// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dota_gcmessages_client_watch.proto

package protocol

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgSpectateFriendGameResponse_EWatchLiveResult int32

const (
	CMsgSpectateFriendGameResponse_SUCCESS                        CMsgSpectateFriendGameResponse_EWatchLiveResult = 0
	CMsgSpectateFriendGameResponse_ERROR_GENERIC                  CMsgSpectateFriendGameResponse_EWatchLiveResult = 1
	CMsgSpectateFriendGameResponse_ERROR_NO_PLUS                  CMsgSpectateFriendGameResponse_EWatchLiveResult = 2
	CMsgSpectateFriendGameResponse_ERROR_NOT_FRIENDS              CMsgSpectateFriendGameResponse_EWatchLiveResult = 3
	CMsgSpectateFriendGameResponse_ERROR_LOBBY_NOT_FOUND          CMsgSpectateFriendGameResponse_EWatchLiveResult = 4
	CMsgSpectateFriendGameResponse_ERROR_SPECTATOR_IN_A_LOBBY     CMsgSpectateFriendGameResponse_EWatchLiveResult = 5
	CMsgSpectateFriendGameResponse_ERROR_LOBBY_IS_LAN             CMsgSpectateFriendGameResponse_EWatchLiveResult = 6
	CMsgSpectateFriendGameResponse_ERROR_WRONG_LOBBY_TYPE         CMsgSpectateFriendGameResponse_EWatchLiveResult = 7
	CMsgSpectateFriendGameResponse_ERROR_WRONG_LOBBY_STATE        CMsgSpectateFriendGameResponse_EWatchLiveResult = 8
	CMsgSpectateFriendGameResponse_ERROR_PLAYER_NOT_PLAYER        CMsgSpectateFriendGameResponse_EWatchLiveResult = 9
	CMsgSpectateFriendGameResponse_ERROR_TOO_MANY_SPECTATORS      CMsgSpectateFriendGameResponse_EWatchLiveResult = 10
	CMsgSpectateFriendGameResponse_ERROR_SPECTATOR_SWITCHED_TEAMS CMsgSpectateFriendGameResponse_EWatchLiveResult = 11
	CMsgSpectateFriendGameResponse_ERROR_FRIENDS_ON_BOTH_SIDES    CMsgSpectateFriendGameResponse_EWatchLiveResult = 12
	CMsgSpectateFriendGameResponse_ERROR_SPECTATOR_IN_THIS_LOBBY  CMsgSpectateFriendGameResponse_EWatchLiveResult = 13
	CMsgSpectateFriendGameResponse_ERROR_LOBBY_IS_LEAGUE          CMsgSpectateFriendGameResponse_EWatchLiveResult = 14
)

// Enum value maps for CMsgSpectateFriendGameResponse_EWatchLiveResult.
var (
	CMsgSpectateFriendGameResponse_EWatchLiveResult_name = map[int32]string{
		0:  "SUCCESS",
		1:  "ERROR_GENERIC",
		2:  "ERROR_NO_PLUS",
		3:  "ERROR_NOT_FRIENDS",
		4:  "ERROR_LOBBY_NOT_FOUND",
		5:  "ERROR_SPECTATOR_IN_A_LOBBY",
		6:  "ERROR_LOBBY_IS_LAN",
		7:  "ERROR_WRONG_LOBBY_TYPE",
		8:  "ERROR_WRONG_LOBBY_STATE",
		9:  "ERROR_PLAYER_NOT_PLAYER",
		10: "ERROR_TOO_MANY_SPECTATORS",
		11: "ERROR_SPECTATOR_SWITCHED_TEAMS",
		12: "ERROR_FRIENDS_ON_BOTH_SIDES",
		13: "ERROR_SPECTATOR_IN_THIS_LOBBY",
		14: "ERROR_LOBBY_IS_LEAGUE",
	}
	CMsgSpectateFriendGameResponse_EWatchLiveResult_value = map[string]int32{
		"SUCCESS":                        0,
		"ERROR_GENERIC":                  1,
		"ERROR_NO_PLUS":                  2,
		"ERROR_NOT_FRIENDS":              3,
		"ERROR_LOBBY_NOT_FOUND":          4,
		"ERROR_SPECTATOR_IN_A_LOBBY":     5,
		"ERROR_LOBBY_IS_LAN":             6,
		"ERROR_WRONG_LOBBY_TYPE":         7,
		"ERROR_WRONG_LOBBY_STATE":        8,
		"ERROR_PLAYER_NOT_PLAYER":        9,
		"ERROR_TOO_MANY_SPECTATORS":      10,
		"ERROR_SPECTATOR_SWITCHED_TEAMS": 11,
		"ERROR_FRIENDS_ON_BOTH_SIDES":    12,
		"ERROR_SPECTATOR_IN_THIS_LOBBY":  13,
		"ERROR_LOBBY_IS_LEAGUE":          14,
	}
)

func (x CMsgSpectateFriendGameResponse_EWatchLiveResult) Enum() *CMsgSpectateFriendGameResponse_EWatchLiveResult {
	p := new(CMsgSpectateFriendGameResponse_EWatchLiveResult)
	*p = x
	return p
}

func (x CMsgSpectateFriendGameResponse_EWatchLiveResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSpectateFriendGameResponse_EWatchLiveResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_watch_proto_enumTypes[0].Descriptor()
}

func (CMsgSpectateFriendGameResponse_EWatchLiveResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_watch_proto_enumTypes[0]
}

func (x CMsgSpectateFriendGameResponse_EWatchLiveResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSpectateFriendGameResponse_EWatchLiveResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSpectateFriendGameResponse_EWatchLiveResult(num)
	return nil
}

// Deprecated: Use CMsgSpectateFriendGameResponse_EWatchLiveResult.Descriptor instead.
func (CMsgSpectateFriendGameResponse_EWatchLiveResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{11, 0}
}

type CMsgWatchGameResponse_WatchGameResult int32

const (
	CMsgWatchGameResponse_PENDING                   CMsgWatchGameResponse_WatchGameResult = 0
	CMsgWatchGameResponse_READY                     CMsgWatchGameResponse_WatchGameResult = 1
	CMsgWatchGameResponse_GAMESERVERNOTFOUND        CMsgWatchGameResponse_WatchGameResult = 2
	CMsgWatchGameResponse_UNAVAILABLE               CMsgWatchGameResponse_WatchGameResult = 3
	CMsgWatchGameResponse_CANCELLED                 CMsgWatchGameResponse_WatchGameResult = 4
	CMsgWatchGameResponse_INCOMPATIBLEVERSION       CMsgWatchGameResponse_WatchGameResult = 5
	CMsgWatchGameResponse_MISSINGLEAGUESUBSCRIPTION CMsgWatchGameResponse_WatchGameResult = 6
	CMsgWatchGameResponse_LOBBYNOTFOUND             CMsgWatchGameResponse_WatchGameResult = 7
)

// Enum value maps for CMsgWatchGameResponse_WatchGameResult.
var (
	CMsgWatchGameResponse_WatchGameResult_name = map[int32]string{
		0: "PENDING",
		1: "READY",
		2: "GAMESERVERNOTFOUND",
		3: "UNAVAILABLE",
		4: "CANCELLED",
		5: "INCOMPATIBLEVERSION",
		6: "MISSINGLEAGUESUBSCRIPTION",
		7: "LOBBYNOTFOUND",
	}
	CMsgWatchGameResponse_WatchGameResult_value = map[string]int32{
		"PENDING":                   0,
		"READY":                     1,
		"GAMESERVERNOTFOUND":        2,
		"UNAVAILABLE":               3,
		"CANCELLED":                 4,
		"INCOMPATIBLEVERSION":       5,
		"MISSINGLEAGUESUBSCRIPTION": 6,
		"LOBBYNOTFOUND":             7,
	}
)

func (x CMsgWatchGameResponse_WatchGameResult) Enum() *CMsgWatchGameResponse_WatchGameResult {
	p := new(CMsgWatchGameResponse_WatchGameResult)
	*p = x
	return p
}

func (x CMsgWatchGameResponse_WatchGameResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgWatchGameResponse_WatchGameResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_watch_proto_enumTypes[1].Descriptor()
}

func (CMsgWatchGameResponse_WatchGameResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_watch_proto_enumTypes[1]
}

func (x CMsgWatchGameResponse_WatchGameResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgWatchGameResponse_WatchGameResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgWatchGameResponse_WatchGameResult(num)
	return nil
}

// Deprecated: Use CMsgWatchGameResponse_WatchGameResult.Descriptor instead.
func (CMsgWatchGameResponse_WatchGameResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{15, 0}
}

type CSourceTVGameSmall struct {
	state                      protoimpl.MessageState       `protogen:"open.v1"`
	ActivateTime               *uint32                      `protobuf:"varint,1,opt,name=activate_time,json=activateTime" json:"activate_time,omitempty"`
	DeactivateTime             *uint32                      `protobuf:"varint,2,opt,name=deactivate_time,json=deactivateTime" json:"deactivate_time,omitempty"`
	ServerSteamId              *uint64                      `protobuf:"varint,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId                    *uint64                      `protobuf:"varint,4,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LeagueId                   *uint32                      `protobuf:"varint,5,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LobbyType                  *uint32                      `protobuf:"varint,6,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	GameTime                   *int32                       `protobuf:"varint,7,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Delay                      *uint32                      `protobuf:"varint,8,opt,name=delay" json:"delay,omitempty"`
	Spectators                 *uint32                      `protobuf:"varint,9,opt,name=spectators" json:"spectators,omitempty"`
	GameMode                   *uint32                      `protobuf:"varint,10,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	AverageMmr                 *uint32                      `protobuf:"varint,11,opt,name=average_mmr,json=averageMmr" json:"average_mmr,omitempty"`
	MatchId                    *uint64                      `protobuf:"varint,12,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	SeriesId                   *uint32                      `protobuf:"varint,13,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	TeamNameRadiant            *string                      `protobuf:"bytes,15,opt,name=team_name_radiant,json=teamNameRadiant" json:"team_name_radiant,omitempty"`
	TeamNameDire               *string                      `protobuf:"bytes,16,opt,name=team_name_dire,json=teamNameDire" json:"team_name_dire,omitempty"`
	TeamLogoRadiant            *uint64                      `protobuf:"fixed64,24,opt,name=team_logo_radiant,json=teamLogoRadiant" json:"team_logo_radiant,omitempty"`
	TeamLogoDire               *uint64                      `protobuf:"fixed64,25,opt,name=team_logo_dire,json=teamLogoDire" json:"team_logo_dire,omitempty"`
	TeamIdRadiant              *uint32                      `protobuf:"varint,30,opt,name=team_id_radiant,json=teamIdRadiant" json:"team_id_radiant,omitempty"`
	TeamIdDire                 *uint32                      `protobuf:"varint,31,opt,name=team_id_dire,json=teamIdDire" json:"team_id_dire,omitempty"`
	SortScore                  *uint32                      `protobuf:"varint,17,opt,name=sort_score,json=sortScore" json:"sort_score,omitempty"`
	LastUpdateTime             *float32                     `protobuf:"fixed32,18,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty"`
	RadiantLead                *int32                       `protobuf:"varint,19,opt,name=radiant_lead,json=radiantLead" json:"radiant_lead,omitempty"`
	RadiantScore               *uint32                      `protobuf:"varint,20,opt,name=radiant_score,json=radiantScore" json:"radiant_score,omitempty"`
	DireScore                  *uint32                      `protobuf:"varint,21,opt,name=dire_score,json=direScore" json:"dire_score,omitempty"`
	Players                    []*CSourceTVGameSmall_Player `protobuf:"bytes,22,rep,name=players" json:"players,omitempty"`
	BuildingState              *uint32                      `protobuf:"fixed32,23,opt,name=building_state,json=buildingState" json:"building_state,omitempty"`
	WeekendTourneyTournamentId *uint32                      `protobuf:"varint,26,opt,name=weekend_tourney_tournament_id,json=weekendTourneyTournamentId" json:"weekend_tourney_tournament_id,omitempty"`
	WeekendTourneyDivision     *uint32                      `protobuf:"varint,27,opt,name=weekend_tourney_division,json=weekendTourneyDivision" json:"weekend_tourney_division,omitempty"`
	WeekendTourneySkillLevel   *uint32                      `protobuf:"varint,28,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound *uint32                      `protobuf:"varint,29,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
	CustomGameDifficulty       *uint32                      `protobuf:"varint,32,opt,name=custom_game_difficulty,json=customGameDifficulty" json:"custom_game_difficulty,omitempty"`
	IsPlayerDraft              *bool                        `protobuf:"varint,33,opt,name=is_player_draft,json=isPlayerDraft" json:"is_player_draft,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CSourceTVGameSmall) Reset() {
	*x = CSourceTVGameSmall{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSourceTVGameSmall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSourceTVGameSmall) ProtoMessage() {}

func (x *CSourceTVGameSmall) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSourceTVGameSmall.ProtoReflect.Descriptor instead.
func (*CSourceTVGameSmall) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{0}
}

func (x *CSourceTVGameSmall) GetActivateTime() uint32 {
	if x != nil && x.ActivateTime != nil {
		return *x.ActivateTime
	}
	return 0
}

func (x *CSourceTVGameSmall) GetDeactivateTime() uint32 {
	if x != nil && x.DeactivateTime != nil {
		return *x.DeactivateTime
	}
	return 0
}

func (x *CSourceTVGameSmall) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CSourceTVGameSmall) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CSourceTVGameSmall) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *CSourceTVGameSmall) GetSpectators() uint32 {
	if x != nil && x.Spectators != nil {
		return *x.Spectators
	}
	return 0
}

func (x *CSourceTVGameSmall) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CSourceTVGameSmall) GetAverageMmr() uint32 {
	if x != nil && x.AverageMmr != nil {
		return *x.AverageMmr
	}
	return 0
}

func (x *CSourceTVGameSmall) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetTeamNameRadiant() string {
	if x != nil && x.TeamNameRadiant != nil {
		return *x.TeamNameRadiant
	}
	return ""
}

func (x *CSourceTVGameSmall) GetTeamNameDire() string {
	if x != nil && x.TeamNameDire != nil {
		return *x.TeamNameDire
	}
	return ""
}

func (x *CSourceTVGameSmall) GetTeamLogoRadiant() uint64 {
	if x != nil && x.TeamLogoRadiant != nil {
		return *x.TeamLogoRadiant
	}
	return 0
}

func (x *CSourceTVGameSmall) GetTeamLogoDire() uint64 {
	if x != nil && x.TeamLogoDire != nil {
		return *x.TeamLogoDire
	}
	return 0
}

func (x *CSourceTVGameSmall) GetTeamIdRadiant() uint32 {
	if x != nil && x.TeamIdRadiant != nil {
		return *x.TeamIdRadiant
	}
	return 0
}

func (x *CSourceTVGameSmall) GetTeamIdDire() uint32 {
	if x != nil && x.TeamIdDire != nil {
		return *x.TeamIdDire
	}
	return 0
}

func (x *CSourceTVGameSmall) GetSortScore() uint32 {
	if x != nil && x.SortScore != nil {
		return *x.SortScore
	}
	return 0
}

func (x *CSourceTVGameSmall) GetLastUpdateTime() float32 {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return 0
}

func (x *CSourceTVGameSmall) GetRadiantLead() int32 {
	if x != nil && x.RadiantLead != nil {
		return *x.RadiantLead
	}
	return 0
}

func (x *CSourceTVGameSmall) GetRadiantScore() uint32 {
	if x != nil && x.RadiantScore != nil {
		return *x.RadiantScore
	}
	return 0
}

func (x *CSourceTVGameSmall) GetDireScore() uint32 {
	if x != nil && x.DireScore != nil {
		return *x.DireScore
	}
	return 0
}

func (x *CSourceTVGameSmall) GetPlayers() []*CSourceTVGameSmall_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CSourceTVGameSmall) GetBuildingState() uint32 {
	if x != nil && x.BuildingState != nil {
		return *x.BuildingState
	}
	return 0
}

func (x *CSourceTVGameSmall) GetWeekendTourneyTournamentId() uint32 {
	if x != nil && x.WeekendTourneyTournamentId != nil {
		return *x.WeekendTourneyTournamentId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetWeekendTourneyDivision() uint32 {
	if x != nil && x.WeekendTourneyDivision != nil {
		return *x.WeekendTourneyDivision
	}
	return 0
}

func (x *CSourceTVGameSmall) GetWeekendTourneySkillLevel() uint32 {
	if x != nil && x.WeekendTourneySkillLevel != nil {
		return *x.WeekendTourneySkillLevel
	}
	return 0
}

func (x *CSourceTVGameSmall) GetWeekendTourneyBracketRound() uint32 {
	if x != nil && x.WeekendTourneyBracketRound != nil {
		return *x.WeekendTourneyBracketRound
	}
	return 0
}

func (x *CSourceTVGameSmall) GetCustomGameDifficulty() uint32 {
	if x != nil && x.CustomGameDifficulty != nil {
		return *x.CustomGameDifficulty
	}
	return 0
}

func (x *CSourceTVGameSmall) GetIsPlayerDraft() bool {
	if x != nil && x.IsPlayerDraft != nil {
		return *x.IsPlayerDraft
	}
	return false
}

type CMsgClientToGCFindTopSourceTVGames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SearchKey     *string                `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	LeagueId      *uint32                `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId        *int32                 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StartGame     *uint32                `protobuf:"varint,4,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	GameListIndex *uint32                `protobuf:"varint,5,opt,name=game_list_index,json=gameListIndex" json:"game_list_index,omitempty"`
	LobbyIds      []uint64               `protobuf:"varint,6,rep,name=lobby_ids,json=lobbyIds" json:"lobby_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCFindTopSourceTVGames) Reset() {
	*x = CMsgClientToGCFindTopSourceTVGames{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCFindTopSourceTVGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFindTopSourceTVGames) ProtoMessage() {}

func (x *CMsgClientToGCFindTopSourceTVGames) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFindTopSourceTVGames.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFindTopSourceTVGames) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetStartGame() uint32 {
	if x != nil && x.StartGame != nil {
		return *x.StartGame
	}
	return 0
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetGameListIndex() uint32 {
	if x != nil && x.GameListIndex != nil {
		return *x.GameListIndex
	}
	return 0
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetLobbyIds() []uint64 {
	if x != nil {
		return x.LobbyIds
	}
	return nil
}

type CMsgGCToClientFindTopSourceTVGamesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SearchKey     *string                `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	LeagueId      *uint32                `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId        *int32                 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StartGame     *uint32                `protobuf:"varint,4,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	NumGames      *uint32                `protobuf:"varint,5,opt,name=num_games,json=numGames" json:"num_games,omitempty"`
	GameListIndex *uint32                `protobuf:"varint,6,opt,name=game_list_index,json=gameListIndex" json:"game_list_index,omitempty"`
	GameList      []*CSourceTVGameSmall  `protobuf:"bytes,7,rep,name=game_list,json=gameList" json:"game_list,omitempty"`
	SpecificGames *bool                  `protobuf:"varint,8,opt,name=specific_games,json=specificGames" json:"specific_games,omitempty"`
	BotGame       *CSourceTVGameSmall    `protobuf:"bytes,9,opt,name=bot_game,json=botGame" json:"bot_game,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) Reset() {
	*x = CMsgGCToClientFindTopSourceTVGamesResponse{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientFindTopSourceTVGamesResponse) ProtoMessage() {}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientFindTopSourceTVGamesResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientFindTopSourceTVGamesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetStartGame() uint32 {
	if x != nil && x.StartGame != nil {
		return *x.StartGame
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetNumGames() uint32 {
	if x != nil && x.NumGames != nil {
		return *x.NumGames
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetGameListIndex() uint32 {
	if x != nil && x.GameListIndex != nil {
		return *x.GameListIndex
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetGameList() []*CSourceTVGameSmall {
	if x != nil {
		return x.GameList
	}
	return nil
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetSpecificGames() bool {
	if x != nil && x.SpecificGames != nil {
		return *x.SpecificGames
	}
	return false
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetBotGame() *CSourceTVGameSmall {
	if x != nil {
		return x.BotGame
	}
	return nil
}

type CMsgGCToClientTopWeekendTourneyGames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LiveGames     []*CSourceTVGameSmall  `protobuf:"bytes,1,rep,name=live_games,json=liveGames" json:"live_games,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientTopWeekendTourneyGames) Reset() {
	*x = CMsgGCToClientTopWeekendTourneyGames{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientTopWeekendTourneyGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTopWeekendTourneyGames) ProtoMessage() {}

func (x *CMsgGCToClientTopWeekendTourneyGames) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTopWeekendTourneyGames.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTopWeekendTourneyGames) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgGCToClientTopWeekendTourneyGames) GetLiveGames() []*CSourceTVGameSmall {
	if x != nil {
		return x.LiveGames
	}
	return nil
}

type CMsgClientToGCTopLeagueMatchesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCTopLeagueMatchesRequest) Reset() {
	*x = CMsgClientToGCTopLeagueMatchesRequest{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCTopLeagueMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTopLeagueMatchesRequest) ProtoMessage() {}

func (x *CMsgClientToGCTopLeagueMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTopLeagueMatchesRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTopLeagueMatchesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{4}
}

type CMsgClientToGCTopFriendMatchesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCTopFriendMatchesRequest) Reset() {
	*x = CMsgClientToGCTopFriendMatchesRequest{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCTopFriendMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTopFriendMatchesRequest) ProtoMessage() {}

func (x *CMsgClientToGCTopFriendMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTopFriendMatchesRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTopFriendMatchesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{5}
}

type CMsgClientToGCMatchesMinimalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchIds      []uint64               `protobuf:"varint,1,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCMatchesMinimalRequest) Reset() {
	*x = CMsgClientToGCMatchesMinimalRequest{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCMatchesMinimalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCMatchesMinimalRequest) ProtoMessage() {}

func (x *CMsgClientToGCMatchesMinimalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCMatchesMinimalRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCMatchesMinimalRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgClientToGCMatchesMinimalRequest) GetMatchIds() []uint64 {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

type CMsgClientToGCMatchesMinimalResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Matches       []*CMsgDOTAMatchMinimal `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	LastMatch     *bool                   `protobuf:"varint,2,opt,name=last_match,json=lastMatch" json:"last_match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCMatchesMinimalResponse) Reset() {
	*x = CMsgClientToGCMatchesMinimalResponse{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCMatchesMinimalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCMatchesMinimalResponse) ProtoMessage() {}

func (x *CMsgClientToGCMatchesMinimalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCMatchesMinimalResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCMatchesMinimalResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgClientToGCMatchesMinimalResponse) GetMatches() []*CMsgDOTAMatchMinimal {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgClientToGCMatchesMinimalResponse) GetLastMatch() bool {
	if x != nil && x.LastMatch != nil {
		return *x.LastMatch
	}
	return false
}

type CMsgGCToClientTopLeagueMatchesResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Matches       []*CMsgDOTAMatchMinimal `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientTopLeagueMatchesResponse) Reset() {
	*x = CMsgGCToClientTopLeagueMatchesResponse{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientTopLeagueMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTopLeagueMatchesResponse) ProtoMessage() {}

func (x *CMsgGCToClientTopLeagueMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTopLeagueMatchesResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTopLeagueMatchesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgGCToClientTopLeagueMatchesResponse) GetMatches() []*CMsgDOTAMatchMinimal {
	if x != nil {
		return x.Matches
	}
	return nil
}

type CMsgGCToClientTopFriendMatchesResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Matches       []*CMsgDOTAMatchMinimal `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientTopFriendMatchesResponse) Reset() {
	*x = CMsgGCToClientTopFriendMatchesResponse{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientTopFriendMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTopFriendMatchesResponse) ProtoMessage() {}

func (x *CMsgGCToClientTopFriendMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTopFriendMatchesResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTopFriendMatchesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgGCToClientTopFriendMatchesResponse) GetMatches() []*CMsgDOTAMatchMinimal {
	if x != nil {
		return x.Matches
	}
	return nil
}

type CMsgSpectateFriendGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	Live          *bool                  `protobuf:"varint,2,opt,name=live" json:"live,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSpectateFriendGame) Reset() {
	*x = CMsgSpectateFriendGame{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSpectateFriendGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpectateFriendGame) ProtoMessage() {}

func (x *CMsgSpectateFriendGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpectateFriendGame.ProtoReflect.Descriptor instead.
func (*CMsgSpectateFriendGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgSpectateFriendGame) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgSpectateFriendGame) GetLive() bool {
	if x != nil && x.Live != nil {
		return *x.Live
	}
	return false
}

type CMsgSpectateFriendGameResponse struct {
	state           protoimpl.MessageState                           `protogen:"open.v1"`
	ServerSteamid   *uint64                                          `protobuf:"fixed64,4,opt,name=server_steamid,json=serverSteamid" json:"server_steamid,omitempty"`
	WatchLiveResult *CMsgSpectateFriendGameResponse_EWatchLiveResult `protobuf:"varint,5,opt,name=watch_live_result,json=watchLiveResult,enum=protocol.CMsgSpectateFriendGameResponse_EWatchLiveResult,def=0" json:"watch_live_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgSpectateFriendGameResponse fields.
const (
	Default_CMsgSpectateFriendGameResponse_WatchLiveResult = CMsgSpectateFriendGameResponse_SUCCESS
)

func (x *CMsgSpectateFriendGameResponse) Reset() {
	*x = CMsgSpectateFriendGameResponse{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSpectateFriendGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpectateFriendGameResponse) ProtoMessage() {}

func (x *CMsgSpectateFriendGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpectateFriendGameResponse.ProtoReflect.Descriptor instead.
func (*CMsgSpectateFriendGameResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgSpectateFriendGameResponse) GetServerSteamid() uint64 {
	if x != nil && x.ServerSteamid != nil {
		return *x.ServerSteamid
	}
	return 0
}

func (x *CMsgSpectateFriendGameResponse) GetWatchLiveResult() CMsgSpectateFriendGameResponse_EWatchLiveResult {
	if x != nil && x.WatchLiveResult != nil {
		return *x.WatchLiveResult
	}
	return Default_CMsgSpectateFriendGameResponse_WatchLiveResult
}

type CDOTAReplayDownloadInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         *CMsgDOTAMatchMinimal  `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Size          *uint32                `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Tags          []string               `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	ExistsOnDisk  *bool                  `protobuf:"varint,6,opt,name=exists_on_disk,json=existsOnDisk" json:"exists_on_disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAReplayDownloadInfo) Reset() {
	*x = CDOTAReplayDownloadInfo{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAReplayDownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAReplayDownloadInfo) ProtoMessage() {}

func (x *CDOTAReplayDownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAReplayDownloadInfo.ProtoReflect.Descriptor instead.
func (*CDOTAReplayDownloadInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{12}
}

func (x *CDOTAReplayDownloadInfo) GetMatch() *CMsgDOTAMatchMinimal {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *CDOTAReplayDownloadInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CDOTAReplayDownloadInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CDOTAReplayDownloadInfo) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *CDOTAReplayDownloadInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CDOTAReplayDownloadInfo) GetExistsOnDisk() bool {
	if x != nil && x.ExistsOnDisk != nil {
		return *x.ExistsOnDisk
	}
	return false
}

type CMsgWatchGame struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ServerSteamid      *uint64                `protobuf:"fixed64,1,opt,name=server_steamid,json=serverSteamid" json:"server_steamid,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	WatchServerSteamid *uint64                `protobuf:"fixed64,3,opt,name=watch_server_steamid,json=watchServerSteamid" json:"watch_server_steamid,omitempty"`
	LobbyId            *uint64                `protobuf:"varint,4,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Regions            []uint32               `protobuf:"varint,5,rep,name=regions" json:"regions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgWatchGame) Reset() {
	*x = CMsgWatchGame{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgWatchGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWatchGame) ProtoMessage() {}

func (x *CMsgWatchGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWatchGame.ProtoReflect.Descriptor instead.
func (*CMsgWatchGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgWatchGame) GetServerSteamid() uint64 {
	if x != nil && x.ServerSteamid != nil {
		return *x.ServerSteamid
	}
	return 0
}

func (x *CMsgWatchGame) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgWatchGame) GetWatchServerSteamid() uint64 {
	if x != nil && x.WatchServerSteamid != nil {
		return *x.WatchServerSteamid
	}
	return 0
}

func (x *CMsgWatchGame) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgWatchGame) GetRegions() []uint32 {
	if x != nil {
		return x.Regions
	}
	return nil
}

type CMsgCancelWatchGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgCancelWatchGame) Reset() {
	*x = CMsgCancelWatchGame{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgCancelWatchGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCancelWatchGame) ProtoMessage() {}

func (x *CMsgCancelWatchGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCancelWatchGame.ProtoReflect.Descriptor instead.
func (*CMsgCancelWatchGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{14}
}

type CMsgWatchGameResponse struct {
	state                   protoimpl.MessageState                 `protogen:"open.v1"`
	WatchGameResult         *CMsgWatchGameResponse_WatchGameResult `protobuf:"varint,1,opt,name=watch_game_result,json=watchGameResult,enum=protocol.CMsgWatchGameResponse_WatchGameResult,def=0" json:"watch_game_result,omitempty"`
	SourceTvPublicAddr      *uint32                                `protobuf:"varint,2,opt,name=source_tv_public_addr,json=sourceTvPublicAddr" json:"source_tv_public_addr,omitempty"`
	SourceTvPrivateAddr     *uint32                                `protobuf:"varint,3,opt,name=source_tv_private_addr,json=sourceTvPrivateAddr" json:"source_tv_private_addr,omitempty"`
	SourceTvPort            *uint32                                `protobuf:"varint,4,opt,name=source_tv_port,json=sourceTvPort" json:"source_tv_port,omitempty"`
	GameServerSteamid       *uint64                                `protobuf:"fixed64,5,opt,name=game_server_steamid,json=gameServerSteamid" json:"game_server_steamid,omitempty"`
	WatchServerSteamid      *uint64                                `protobuf:"fixed64,6,opt,name=watch_server_steamid,json=watchServerSteamid" json:"watch_server_steamid,omitempty"`
	WatchTvUniqueSecretCode *uint64                                `protobuf:"fixed64,7,opt,name=watch_tv_unique_secret_code,json=watchTvUniqueSecretCode" json:"watch_tv_unique_secret_code,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for CMsgWatchGameResponse fields.
const (
	Default_CMsgWatchGameResponse_WatchGameResult = CMsgWatchGameResponse_PENDING
)

func (x *CMsgWatchGameResponse) Reset() {
	*x = CMsgWatchGameResponse{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgWatchGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWatchGameResponse) ProtoMessage() {}

func (x *CMsgWatchGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWatchGameResponse.ProtoReflect.Descriptor instead.
func (*CMsgWatchGameResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgWatchGameResponse) GetWatchGameResult() CMsgWatchGameResponse_WatchGameResult {
	if x != nil && x.WatchGameResult != nil {
		return *x.WatchGameResult
	}
	return Default_CMsgWatchGameResponse_WatchGameResult
}

func (x *CMsgWatchGameResponse) GetSourceTvPublicAddr() uint32 {
	if x != nil && x.SourceTvPublicAddr != nil {
		return *x.SourceTvPublicAddr
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetSourceTvPrivateAddr() uint32 {
	if x != nil && x.SourceTvPrivateAddr != nil {
		return *x.SourceTvPrivateAddr
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetSourceTvPort() uint32 {
	if x != nil && x.SourceTvPort != nil {
		return *x.SourceTvPort
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetGameServerSteamid() uint64 {
	if x != nil && x.GameServerSteamid != nil {
		return *x.GameServerSteamid
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetWatchServerSteamid() uint64 {
	if x != nil && x.WatchServerSteamid != nil {
		return *x.WatchServerSteamid
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetWatchTvUniqueSecretCode() uint64 {
	if x != nil && x.WatchTvUniqueSecretCode != nil {
		return *x.WatchTvUniqueSecretCode
	}
	return 0
}

type CMsgPartyLeaderWatchGamePrompt struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	GameServerSteamid *uint64                `protobuf:"fixed64,5,opt,name=game_server_steamid,json=gameServerSteamid" json:"game_server_steamid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgPartyLeaderWatchGamePrompt) Reset() {
	*x = CMsgPartyLeaderWatchGamePrompt{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPartyLeaderWatchGamePrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyLeaderWatchGamePrompt) ProtoMessage() {}

func (x *CMsgPartyLeaderWatchGamePrompt) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyLeaderWatchGamePrompt.ProtoReflect.Descriptor instead.
func (*CMsgPartyLeaderWatchGamePrompt) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgPartyLeaderWatchGamePrompt) GetGameServerSteamid() uint64 {
	if x != nil && x.GameServerSteamid != nil {
		return *x.GameServerSteamid
	}
	return 0
}

type CDOTABroadcasterInfo struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	AccountId                  *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ServerSteamId              *uint64                `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	Live                       *bool                  `protobuf:"varint,3,opt,name=live" json:"live,omitempty"`
	TeamNameRadiant            *string                `protobuf:"bytes,4,opt,name=team_name_radiant,json=teamNameRadiant" json:"team_name_radiant,omitempty"`
	TeamNameDire               *string                `protobuf:"bytes,5,opt,name=team_name_dire,json=teamNameDire" json:"team_name_dire,omitempty"`
	SeriesGame                 *uint32                `protobuf:"varint,7,opt,name=series_game,json=seriesGame" json:"series_game,omitempty"`
	UpcomingBroadcastTimestamp *uint32                `protobuf:"varint,9,opt,name=upcoming_broadcast_timestamp,json=upcomingBroadcastTimestamp" json:"upcoming_broadcast_timestamp,omitempty"`
	AllowLiveVideo             *bool                  `protobuf:"varint,10,opt,name=allow_live_video,json=allowLiveVideo" json:"allow_live_video,omitempty"`
	NodeType                   *uint32                `protobuf:"varint,11,opt,name=node_type,json=nodeType" json:"node_type,omitempty"`
	NodeName                   *string                `protobuf:"bytes,12,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CDOTABroadcasterInfo) Reset() {
	*x = CDOTABroadcasterInfo{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTABroadcasterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTABroadcasterInfo) ProtoMessage() {}

func (x *CDOTABroadcasterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTABroadcasterInfo.ProtoReflect.Descriptor instead.
func (*CDOTABroadcasterInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{17}
}

func (x *CDOTABroadcasterInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetLive() bool {
	if x != nil && x.Live != nil {
		return *x.Live
	}
	return false
}

func (x *CDOTABroadcasterInfo) GetTeamNameRadiant() string {
	if x != nil && x.TeamNameRadiant != nil {
		return *x.TeamNameRadiant
	}
	return ""
}

func (x *CDOTABroadcasterInfo) GetTeamNameDire() string {
	if x != nil && x.TeamNameDire != nil {
		return *x.TeamNameDire
	}
	return ""
}

func (x *CDOTABroadcasterInfo) GetSeriesGame() uint32 {
	if x != nil && x.SeriesGame != nil {
		return *x.SeriesGame
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetUpcomingBroadcastTimestamp() uint32 {
	if x != nil && x.UpcomingBroadcastTimestamp != nil {
		return *x.UpcomingBroadcastTimestamp
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetAllowLiveVideo() bool {
	if x != nil && x.AllowLiveVideo != nil {
		return *x.AllowLiveVideo
	}
	return false
}

func (x *CDOTABroadcasterInfo) GetNodeType() uint32 {
	if x != nil && x.NodeType != nil {
		return *x.NodeType
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetNodeName() string {
	if x != nil && x.NodeName != nil {
		return *x.NodeName
	}
	return ""
}

type CMsgDOTASeries struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	SeriesId      *uint32                  `protobuf:"varint,1,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType    *uint32                  `protobuf:"varint,2,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	Team_1        *CMsgDOTASeries_TeamInfo `protobuf:"bytes,3,opt,name=team_1,json=team1" json:"team_1,omitempty"`
	Team_2        *CMsgDOTASeries_TeamInfo `protobuf:"bytes,4,opt,name=team_2,json=team2" json:"team_2,omitempty"`
	MatchMinimal  []*CMsgDOTAMatchMinimal  `protobuf:"bytes,5,rep,name=match_minimal,json=matchMinimal" json:"match_minimal,omitempty"`
	LiveGame      *CMsgDOTASeries_LiveGame `protobuf:"bytes,6,opt,name=live_game,json=liveGame" json:"live_game,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTASeries) Reset() {
	*x = CMsgDOTASeries{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeries) ProtoMessage() {}

func (x *CMsgDOTASeries) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeries.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeries) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgDOTASeries) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTASeries) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgDOTASeries) GetTeam_1() *CMsgDOTASeries_TeamInfo {
	if x != nil {
		return x.Team_1
	}
	return nil
}

func (x *CMsgDOTASeries) GetTeam_2() *CMsgDOTASeries_TeamInfo {
	if x != nil {
		return x.Team_2
	}
	return nil
}

func (x *CMsgDOTASeries) GetMatchMinimal() []*CMsgDOTAMatchMinimal {
	if x != nil {
		return x.MatchMinimal
	}
	return nil
}

func (x *CMsgDOTASeries) GetLiveGame() *CMsgDOTASeries_LiveGame {
	if x != nil {
		return x.LiveGame
	}
	return nil
}

type CSourceTVGameSmall_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId        *int32                 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	TeamSlot      *uint32                `protobuf:"varint,3,opt,name=team_slot,json=teamSlot" json:"team_slot,omitempty"`
	Team          *uint32                `protobuf:"varint,4,opt,name=team" json:"team,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSourceTVGameSmall_Player) Reset() {
	*x = CSourceTVGameSmall_Player{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSourceTVGameSmall_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSourceTVGameSmall_Player) ProtoMessage() {}

func (x *CSourceTVGameSmall_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSourceTVGameSmall_Player.ProtoReflect.Descriptor instead.
func (*CSourceTVGameSmall_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CSourceTVGameSmall_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSourceTVGameSmall_Player) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CSourceTVGameSmall_Player) GetTeamSlot() uint32 {
	if x != nil && x.TeamSlot != nil {
		return *x.TeamSlot
	}
	return 0
}

func (x *CSourceTVGameSmall_Player) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

type CDOTAReplayDownloadInfo_Highlight struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *uint32                `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Description   *string                `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAReplayDownloadInfo_Highlight) Reset() {
	*x = CDOTAReplayDownloadInfo_Highlight{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAReplayDownloadInfo_Highlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAReplayDownloadInfo_Highlight) ProtoMessage() {}

func (x *CDOTAReplayDownloadInfo_Highlight) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAReplayDownloadInfo_Highlight.ProtoReflect.Descriptor instead.
func (*CDOTAReplayDownloadInfo_Highlight) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CDOTAReplayDownloadInfo_Highlight) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CDOTAReplayDownloadInfo_Highlight) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CMsgDOTASeries_TeamInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        *uint32                `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName      *string                `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogoUrl   *string                `protobuf:"bytes,3,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	WagerCount    *uint32                `protobuf:"varint,4,opt,name=wager_count,json=wagerCount" json:"wager_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTASeries_TeamInfo) Reset() {
	*x = CMsgDOTASeries_TeamInfo{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASeries_TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeries_TeamInfo) ProtoMessage() {}

func (x *CMsgDOTASeries_TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeries_TeamInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeries_TeamInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CMsgDOTASeries_TeamInfo) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTASeries_TeamInfo) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTASeries_TeamInfo) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

func (x *CMsgDOTASeries_TeamInfo) GetWagerCount() uint32 {
	if x != nil && x.WagerCount != nil {
		return *x.WagerCount
	}
	return 0
}

type CMsgDOTASeries_LiveGame struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	ServerSteamId    *uint64                  `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	TeamRadiant      *CMsgDOTASeries_TeamInfo `protobuf:"bytes,2,opt,name=team_radiant,json=teamRadiant" json:"team_radiant,omitempty"`
	TeamDire         *CMsgDOTASeries_TeamInfo `protobuf:"bytes,3,opt,name=team_dire,json=teamDire" json:"team_dire,omitempty"`
	TeamRadiantScore *uint32                  `protobuf:"varint,4,opt,name=team_radiant_score,json=teamRadiantScore" json:"team_radiant_score,omitempty"`
	TeamDireScore    *uint32                  `protobuf:"varint,5,opt,name=team_dire_score,json=teamDireScore" json:"team_dire_score,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgDOTASeries_LiveGame) Reset() {
	*x = CMsgDOTASeries_LiveGame{}
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASeries_LiveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeries_LiveGame) ProtoMessage() {}

func (x *CMsgDOTASeries_LiveGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeries_LiveGame.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeries_LiveGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{18, 1}
}

func (x *CMsgDOTASeries_LiveGame) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgDOTASeries_LiveGame) GetTeamRadiant() *CMsgDOTASeries_TeamInfo {
	if x != nil {
		return x.TeamRadiant
	}
	return nil
}

func (x *CMsgDOTASeries_LiveGame) GetTeamDire() *CMsgDOTASeries_TeamInfo {
	if x != nil {
		return x.TeamDire
	}
	return nil
}

func (x *CMsgDOTASeries_LiveGame) GetTeamRadiantScore() uint32 {
	if x != nil && x.TeamRadiantScore != nil {
		return *x.TeamRadiantScore
	}
	return 0
}

func (x *CMsgDOTASeries_LiveGame) GetTeamDireScore() uint32 {
	if x != nil && x.TeamDireScore != nil {
		return *x.TeamDireScore
	}
	return 0
}

var File_dota_gcmessages_client_watch_proto protoreflect.FileDescriptor

const file_dota_gcmessages_client_watch_proto_rawDesc = "" +
	"\n" +
	"\"dota_gcmessages_client_watch.proto\x12\bprotocol\x1a\x1cdota_gcmessages_common.proto\"\xfe\n" +
	"\n" +
	"\x12CSourceTVGameSmall\x12#\n" +
	"\ractivate_time\x18\x01 \x01(\rR\factivateTime\x12'\n" +
	"\x0fdeactivate_time\x18\x02 \x01(\rR\x0edeactivateTime\x12&\n" +
	"\x0fserver_steam_id\x18\x03 \x01(\x04R\rserverSteamId\x12\x19\n" +
	"\blobby_id\x18\x04 \x01(\x04R\alobbyId\x12\x1b\n" +
	"\tleague_id\x18\x05 \x01(\rR\bleagueId\x12\x1d\n" +
	"\n" +
	"lobby_type\x18\x06 \x01(\rR\tlobbyType\x12\x1b\n" +
	"\tgame_time\x18\a \x01(\x05R\bgameTime\x12\x14\n" +
	"\x05delay\x18\b \x01(\rR\x05delay\x12\x1e\n" +
	"\n" +
	"spectators\x18\t \x01(\rR\n" +
	"spectators\x12\x1b\n" +
	"\tgame_mode\x18\n" +
	" \x01(\rR\bgameMode\x12\x1f\n" +
	"\vaverage_mmr\x18\v \x01(\rR\n" +
	"averageMmr\x12\x19\n" +
	"\bmatch_id\x18\f \x01(\x04R\amatchId\x12\x1b\n" +
	"\tseries_id\x18\r \x01(\rR\bseriesId\x12*\n" +
	"\x11team_name_radiant\x18\x0f \x01(\tR\x0fteamNameRadiant\x12$\n" +
	"\x0eteam_name_dire\x18\x10 \x01(\tR\fteamNameDire\x12*\n" +
	"\x11team_logo_radiant\x18\x18 \x01(\x06R\x0fteamLogoRadiant\x12$\n" +
	"\x0eteam_logo_dire\x18\x19 \x01(\x06R\fteamLogoDire\x12&\n" +
	"\x0fteam_id_radiant\x18\x1e \x01(\rR\rteamIdRadiant\x12 \n" +
	"\fteam_id_dire\x18\x1f \x01(\rR\n" +
	"teamIdDire\x12\x1d\n" +
	"\n" +
	"sort_score\x18\x11 \x01(\rR\tsortScore\x12(\n" +
	"\x10last_update_time\x18\x12 \x01(\x02R\x0elastUpdateTime\x12!\n" +
	"\fradiant_lead\x18\x13 \x01(\x05R\vradiantLead\x12#\n" +
	"\rradiant_score\x18\x14 \x01(\rR\fradiantScore\x12\x1d\n" +
	"\n" +
	"dire_score\x18\x15 \x01(\rR\tdireScore\x12=\n" +
	"\aplayers\x18\x16 \x03(\v2#.protocol.CSourceTVGameSmall.PlayerR\aplayers\x12%\n" +
	"\x0ebuilding_state\x18\x17 \x01(\aR\rbuildingState\x12A\n" +
	"\x1dweekend_tourney_tournament_id\x18\x1a \x01(\rR\x1aweekendTourneyTournamentId\x128\n" +
	"\x18weekend_tourney_division\x18\x1b \x01(\rR\x16weekendTourneyDivision\x12=\n" +
	"\x1bweekend_tourney_skill_level\x18\x1c \x01(\rR\x18weekendTourneySkillLevel\x12A\n" +
	"\x1dweekend_tourney_bracket_round\x18\x1d \x01(\rR\x1aweekendTourneyBracketRound\x124\n" +
	"\x16custom_game_difficulty\x18  \x01(\rR\x14customGameDifficulty\x12&\n" +
	"\x0fis_player_draft\x18! \x01(\bR\risPlayerDraft\x1aq\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x17\n" +
	"\ahero_id\x18\x02 \x01(\x05R\x06heroId\x12\x1b\n" +
	"\tteam_slot\x18\x03 \x01(\rR\bteamSlot\x12\x12\n" +
	"\x04team\x18\x04 \x01(\rR\x04team\"\xdd\x01\n" +
	"\"CMsgClientToGCFindTopSourceTVGames\x12\x1d\n" +
	"\n" +
	"search_key\x18\x01 \x01(\tR\tsearchKey\x12\x1b\n" +
	"\tleague_id\x18\x02 \x01(\rR\bleagueId\x12\x17\n" +
	"\ahero_id\x18\x03 \x01(\x05R\x06heroId\x12\x1d\n" +
	"\n" +
	"start_game\x18\x04 \x01(\rR\tstartGame\x12&\n" +
	"\x0fgame_list_index\x18\x05 \x01(\rR\rgameListIndex\x12\x1b\n" +
	"\tlobby_ids\x18\x06 \x03(\x04R\blobbyIds\"\x80\x03\n" +
	"*CMsgGCToClientFindTopSourceTVGamesResponse\x12\x1d\n" +
	"\n" +
	"search_key\x18\x01 \x01(\tR\tsearchKey\x12\x1b\n" +
	"\tleague_id\x18\x02 \x01(\rR\bleagueId\x12\x17\n" +
	"\ahero_id\x18\x03 \x01(\x05R\x06heroId\x12\x1d\n" +
	"\n" +
	"start_game\x18\x04 \x01(\rR\tstartGame\x12\x1b\n" +
	"\tnum_games\x18\x05 \x01(\rR\bnumGames\x12&\n" +
	"\x0fgame_list_index\x18\x06 \x01(\rR\rgameListIndex\x129\n" +
	"\tgame_list\x18\a \x03(\v2\x1c.protocol.CSourceTVGameSmallR\bgameList\x12%\n" +
	"\x0especific_games\x18\b \x01(\bR\rspecificGames\x127\n" +
	"\bbot_game\x18\t \x01(\v2\x1c.protocol.CSourceTVGameSmallR\abotGame\"c\n" +
	"$CMsgGCToClientTopWeekendTourneyGames\x12;\n" +
	"\n" +
	"live_games\x18\x01 \x03(\v2\x1c.protocol.CSourceTVGameSmallR\tliveGames\"'\n" +
	"%CMsgClientToGCTopLeagueMatchesRequest\"'\n" +
	"%CMsgClientToGCTopFriendMatchesRequest\"B\n" +
	"#CMsgClientToGCMatchesMinimalRequest\x12\x1b\n" +
	"\tmatch_ids\x18\x01 \x03(\x04R\bmatchIds\"\x7f\n" +
	"$CMsgClientToGCMatchesMinimalResponse\x128\n" +
	"\amatches\x18\x01 \x03(\v2\x1e.protocol.CMsgDOTAMatchMinimalR\amatches\x12\x1d\n" +
	"\n" +
	"last_match\x18\x02 \x01(\bR\tlastMatch\"b\n" +
	"&CMsgGCToClientTopLeagueMatchesResponse\x128\n" +
	"\amatches\x18\x02 \x03(\v2\x1e.protocol.CMsgDOTAMatchMinimalR\amatches\"b\n" +
	"&CMsgGCToClientTopFriendMatchesResponse\x128\n" +
	"\amatches\x18\x01 \x03(\v2\x1e.protocol.CMsgDOTAMatchMinimalR\amatches\"G\n" +
	"\x16CMsgSpectateFriendGame\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12\x12\n" +
	"\x04live\x18\x02 \x01(\bR\x04live\"\xe1\x04\n" +
	"\x1eCMsgSpectateFriendGameResponse\x12%\n" +
	"\x0eserver_steamid\x18\x04 \x01(\x06R\rserverSteamid\x12n\n" +
	"\x11watch_live_result\x18\x05 \x01(\x0e29.protocol.CMsgSpectateFriendGameResponse.EWatchLiveResult:\aSUCCESSR\x0fwatchLiveResult\"\xa7\x03\n" +
	"\x10EWatchLiveResult\x12\v\n" +
	"\aSUCCESS\x10\x00\x12\x11\n" +
	"\rERROR_GENERIC\x10\x01\x12\x11\n" +
	"\rERROR_NO_PLUS\x10\x02\x12\x15\n" +
	"\x11ERROR_NOT_FRIENDS\x10\x03\x12\x19\n" +
	"\x15ERROR_LOBBY_NOT_FOUND\x10\x04\x12\x1e\n" +
	"\x1aERROR_SPECTATOR_IN_A_LOBBY\x10\x05\x12\x16\n" +
	"\x12ERROR_LOBBY_IS_LAN\x10\x06\x12\x1a\n" +
	"\x16ERROR_WRONG_LOBBY_TYPE\x10\a\x12\x1b\n" +
	"\x17ERROR_WRONG_LOBBY_STATE\x10\b\x12\x1b\n" +
	"\x17ERROR_PLAYER_NOT_PLAYER\x10\t\x12\x1d\n" +
	"\x19ERROR_TOO_MANY_SPECTATORS\x10\n" +
	"\x12\"\n" +
	"\x1eERROR_SPECTATOR_SWITCHED_TEAMS\x10\v\x12\x1f\n" +
	"\x1bERROR_FRIENDS_ON_BOTH_SIDES\x10\f\x12!\n" +
	"\x1dERROR_SPECTATOR_IN_THIS_LOBBY\x10\r\x12\x19\n" +
	"\x15ERROR_LOBBY_IS_LEAGUE\x10\x0e\"\xa2\x02\n" +
	"\x17CDOTAReplayDownloadInfo\x124\n" +
	"\x05match\x18\x01 \x01(\v2\x1e.protocol.CMsgDOTAMatchMinimalR\x05match\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04size\x18\x04 \x01(\rR\x04size\x12\x12\n" +
	"\x04tags\x18\x05 \x03(\tR\x04tags\x12$\n" +
	"\x0eexists_on_disk\x18\x06 \x01(\bR\fexistsOnDisk\x1aK\n" +
	"\tHighlight\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\rR\ttimestamp\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\"\xc4\x01\n" +
	"\rCMsgWatchGame\x12%\n" +
	"\x0eserver_steamid\x18\x01 \x01(\x06R\rserverSteamid\x12%\n" +
	"\x0eclient_version\x18\x02 \x01(\rR\rclientVersion\x120\n" +
	"\x14watch_server_steamid\x18\x03 \x01(\x06R\x12watchServerSteamid\x12\x19\n" +
	"\blobby_id\x18\x04 \x01(\x04R\alobbyId\x12\x18\n" +
	"\aregions\x18\x05 \x03(\rR\aregions\"\x15\n" +
	"\x13CMsgCancelWatchGame\"\xda\x04\n" +
	"\x15CMsgWatchGameResponse\x12d\n" +
	"\x11watch_game_result\x18\x01 \x01(\x0e2/.protocol.CMsgWatchGameResponse.WatchGameResult:\aPENDINGR\x0fwatchGameResult\x121\n" +
	"\x15source_tv_public_addr\x18\x02 \x01(\rR\x12sourceTvPublicAddr\x123\n" +
	"\x16source_tv_private_addr\x18\x03 \x01(\rR\x13sourceTvPrivateAddr\x12$\n" +
	"\x0esource_tv_port\x18\x04 \x01(\rR\fsourceTvPort\x12.\n" +
	"\x13game_server_steamid\x18\x05 \x01(\x06R\x11gameServerSteamid\x120\n" +
	"\x14watch_server_steamid\x18\x06 \x01(\x06R\x12watchServerSteamid\x12<\n" +
	"\x1bwatch_tv_unique_secret_code\x18\a \x01(\x06R\x17watchTvUniqueSecretCode\"\xac\x01\n" +
	"\x0fWatchGameResult\x12\v\n" +
	"\aPENDING\x10\x00\x12\t\n" +
	"\x05READY\x10\x01\x12\x16\n" +
	"\x12GAMESERVERNOTFOUND\x10\x02\x12\x0f\n" +
	"\vUNAVAILABLE\x10\x03\x12\r\n" +
	"\tCANCELLED\x10\x04\x12\x17\n" +
	"\x13INCOMPATIBLEVERSION\x10\x05\x12\x1d\n" +
	"\x19MISSINGLEAGUESUBSCRIPTION\x10\x06\x12\x11\n" +
	"\rLOBBYNOTFOUND\x10\a\"P\n" +
	"\x1eCMsgPartyLeaderWatchGamePrompt\x12.\n" +
	"\x13game_server_steamid\x18\x05 \x01(\x06R\x11gameServerSteamid\"\x8a\x03\n" +
	"\x14CDOTABroadcasterInfo\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12&\n" +
	"\x0fserver_steam_id\x18\x02 \x01(\x06R\rserverSteamId\x12\x12\n" +
	"\x04live\x18\x03 \x01(\bR\x04live\x12*\n" +
	"\x11team_name_radiant\x18\x04 \x01(\tR\x0fteamNameRadiant\x12$\n" +
	"\x0eteam_name_dire\x18\x05 \x01(\tR\fteamNameDire\x12\x1f\n" +
	"\vseries_game\x18\a \x01(\rR\n" +
	"seriesGame\x12@\n" +
	"\x1cupcoming_broadcast_timestamp\x18\t \x01(\rR\x1aupcomingBroadcastTimestamp\x12(\n" +
	"\x10allow_live_video\x18\n" +
	" \x01(\bR\x0eallowLiveVideo\x12\x1b\n" +
	"\tnode_type\x18\v \x01(\rR\bnodeType\x12\x1b\n" +
	"\tnode_name\x18\f \x01(\tR\bnodeName\"\xe0\x05\n" +
	"\x0eCMsgDOTASeries\x12\x1b\n" +
	"\tseries_id\x18\x01 \x01(\rR\bseriesId\x12\x1f\n" +
	"\vseries_type\x18\x02 \x01(\rR\n" +
	"seriesType\x128\n" +
	"\x06team_1\x18\x03 \x01(\v2!.protocol.CMsgDOTASeries.TeamInfoR\x05team1\x128\n" +
	"\x06team_2\x18\x04 \x01(\v2!.protocol.CMsgDOTASeries.TeamInfoR\x05team2\x12C\n" +
	"\rmatch_minimal\x18\x05 \x03(\v2\x1e.protocol.CMsgDOTAMatchMinimalR\fmatchMinimal\x12>\n" +
	"\tlive_game\x18\x06 \x01(\v2!.protocol.CMsgDOTASeries.LiveGameR\bliveGame\x1a\x85\x01\n" +
	"\bTeamInfo\x12\x17\n" +
	"\ateam_id\x18\x01 \x01(\rR\x06teamId\x12\x1b\n" +
	"\tteam_name\x18\x02 \x01(\tR\bteamName\x12\"\n" +
	"\rteam_logo_url\x18\x03 \x01(\tR\vteamLogoUrl\x12\x1f\n" +
	"\vwager_count\x18\x04 \x01(\rR\n" +
	"wagerCount\x1a\x8e\x02\n" +
	"\bLiveGame\x12&\n" +
	"\x0fserver_steam_id\x18\x01 \x01(\x06R\rserverSteamId\x12D\n" +
	"\fteam_radiant\x18\x02 \x01(\v2!.protocol.CMsgDOTASeries.TeamInfoR\vteamRadiant\x12>\n" +
	"\tteam_dire\x18\x03 \x01(\v2!.protocol.CMsgDOTASeries.TeamInfoR\bteamDire\x12,\n" +
	"\x12team_radiant_score\x18\x04 \x01(\rR\x10teamRadiantScore\x12&\n" +
	"\x0fteam_dire_score\x18\x05 \x01(\rR\rteamDireScore"

var (
	file_dota_gcmessages_client_watch_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_watch_proto_rawDescData []byte
)

func file_dota_gcmessages_client_watch_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_watch_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_watch_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dota_gcmessages_client_watch_proto_rawDesc), len(file_dota_gcmessages_client_watch_proto_rawDesc)))
	})
	return file_dota_gcmessages_client_watch_proto_rawDescData
}

var file_dota_gcmessages_client_watch_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dota_gcmessages_client_watch_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_dota_gcmessages_client_watch_proto_goTypes = []any{
	(CMsgSpectateFriendGameResponse_EWatchLiveResult)(0), // 0: protocol.CMsgSpectateFriendGameResponse.EWatchLiveResult
	(CMsgWatchGameResponse_WatchGameResult)(0),           // 1: protocol.CMsgWatchGameResponse.WatchGameResult
	(*CSourceTVGameSmall)(nil),                           // 2: protocol.CSourceTVGameSmall
	(*CMsgClientToGCFindTopSourceTVGames)(nil),           // 3: protocol.CMsgClientToGCFindTopSourceTVGames
	(*CMsgGCToClientFindTopSourceTVGamesResponse)(nil),   // 4: protocol.CMsgGCToClientFindTopSourceTVGamesResponse
	(*CMsgGCToClientTopWeekendTourneyGames)(nil),         // 5: protocol.CMsgGCToClientTopWeekendTourneyGames
	(*CMsgClientToGCTopLeagueMatchesRequest)(nil),        // 6: protocol.CMsgClientToGCTopLeagueMatchesRequest
	(*CMsgClientToGCTopFriendMatchesRequest)(nil),        // 7: protocol.CMsgClientToGCTopFriendMatchesRequest
	(*CMsgClientToGCMatchesMinimalRequest)(nil),          // 8: protocol.CMsgClientToGCMatchesMinimalRequest
	(*CMsgClientToGCMatchesMinimalResponse)(nil),         // 9: protocol.CMsgClientToGCMatchesMinimalResponse
	(*CMsgGCToClientTopLeagueMatchesResponse)(nil),       // 10: protocol.CMsgGCToClientTopLeagueMatchesResponse
	(*CMsgGCToClientTopFriendMatchesResponse)(nil),       // 11: protocol.CMsgGCToClientTopFriendMatchesResponse
	(*CMsgSpectateFriendGame)(nil),                       // 12: protocol.CMsgSpectateFriendGame
	(*CMsgSpectateFriendGameResponse)(nil),               // 13: protocol.CMsgSpectateFriendGameResponse
	(*CDOTAReplayDownloadInfo)(nil),                      // 14: protocol.CDOTAReplayDownloadInfo
	(*CMsgWatchGame)(nil),                                // 15: protocol.CMsgWatchGame
	(*CMsgCancelWatchGame)(nil),                          // 16: protocol.CMsgCancelWatchGame
	(*CMsgWatchGameResponse)(nil),                        // 17: protocol.CMsgWatchGameResponse
	(*CMsgPartyLeaderWatchGamePrompt)(nil),               // 18: protocol.CMsgPartyLeaderWatchGamePrompt
	(*CDOTABroadcasterInfo)(nil),                         // 19: protocol.CDOTABroadcasterInfo
	(*CMsgDOTASeries)(nil),                               // 20: protocol.CMsgDOTASeries
	(*CSourceTVGameSmall_Player)(nil),                    // 21: protocol.CSourceTVGameSmall.Player
	(*CDOTAReplayDownloadInfo_Highlight)(nil),            // 22: protocol.CDOTAReplayDownloadInfo.Highlight
	(*CMsgDOTASeries_TeamInfo)(nil),                      // 23: protocol.CMsgDOTASeries.TeamInfo
	(*CMsgDOTASeries_LiveGame)(nil),                      // 24: protocol.CMsgDOTASeries.LiveGame
	(*CMsgDOTAMatchMinimal)(nil),                         // 25: protocol.CMsgDOTAMatchMinimal
}
var file_dota_gcmessages_client_watch_proto_depIdxs = []int32{
	21, // 0: protocol.CSourceTVGameSmall.players:type_name -> protocol.CSourceTVGameSmall.Player
	2,  // 1: protocol.CMsgGCToClientFindTopSourceTVGamesResponse.game_list:type_name -> protocol.CSourceTVGameSmall
	2,  // 2: protocol.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game:type_name -> protocol.CSourceTVGameSmall
	2,  // 3: protocol.CMsgGCToClientTopWeekendTourneyGames.live_games:type_name -> protocol.CSourceTVGameSmall
	25, // 4: protocol.CMsgClientToGCMatchesMinimalResponse.matches:type_name -> protocol.CMsgDOTAMatchMinimal
	25, // 5: protocol.CMsgGCToClientTopLeagueMatchesResponse.matches:type_name -> protocol.CMsgDOTAMatchMinimal
	25, // 6: protocol.CMsgGCToClientTopFriendMatchesResponse.matches:type_name -> protocol.CMsgDOTAMatchMinimal
	0,  // 7: protocol.CMsgSpectateFriendGameResponse.watch_live_result:type_name -> protocol.CMsgSpectateFriendGameResponse.EWatchLiveResult
	25, // 8: protocol.CDOTAReplayDownloadInfo.match:type_name -> protocol.CMsgDOTAMatchMinimal
	1,  // 9: protocol.CMsgWatchGameResponse.watch_game_result:type_name -> protocol.CMsgWatchGameResponse.WatchGameResult
	23, // 10: protocol.CMsgDOTASeries.team_1:type_name -> protocol.CMsgDOTASeries.TeamInfo
	23, // 11: protocol.CMsgDOTASeries.team_2:type_name -> protocol.CMsgDOTASeries.TeamInfo
	25, // 12: protocol.CMsgDOTASeries.match_minimal:type_name -> protocol.CMsgDOTAMatchMinimal
	24, // 13: protocol.CMsgDOTASeries.live_game:type_name -> protocol.CMsgDOTASeries.LiveGame
	23, // 14: protocol.CMsgDOTASeries.LiveGame.team_radiant:type_name -> protocol.CMsgDOTASeries.TeamInfo
	23, // 15: protocol.CMsgDOTASeries.LiveGame.team_dire:type_name -> protocol.CMsgDOTASeries.TeamInfo
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_watch_proto_init() }
func file_dota_gcmessages_client_watch_proto_init() {
	if File_dota_gcmessages_client_watch_proto != nil {
		return
	}
	file_dota_gcmessages_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dota_gcmessages_client_watch_proto_rawDesc), len(file_dota_gcmessages_client_watch_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_watch_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_watch_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_watch_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_watch_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_watch_proto = out.File
	file_dota_gcmessages_client_watch_proto_goTypes = nil
	file_dota_gcmessages_client_watch_proto_depIdxs = nil
}
