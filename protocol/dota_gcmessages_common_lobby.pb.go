// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dota_gcmessages_common_lobby.proto

package protocol

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ELobbyMemberCoachRequestState int32

const (
	ELobbyMemberCoachRequestState_k_eLobbyMemberCoachRequestState_None     ELobbyMemberCoachRequestState = 0
	ELobbyMemberCoachRequestState_k_eLobbyMemberCoachRequestState_Accepted ELobbyMemberCoachRequestState = 1
	ELobbyMemberCoachRequestState_k_eLobbyMemberCoachRequestState_Rejected ELobbyMemberCoachRequestState = 2
)

// Enum value maps for ELobbyMemberCoachRequestState.
var (
	ELobbyMemberCoachRequestState_name = map[int32]string{
		0: "k_eLobbyMemberCoachRequestState_None",
		1: "k_eLobbyMemberCoachRequestState_Accepted",
		2: "k_eLobbyMemberCoachRequestState_Rejected",
	}
	ELobbyMemberCoachRequestState_value = map[string]int32{
		"k_eLobbyMemberCoachRequestState_None":     0,
		"k_eLobbyMemberCoachRequestState_Accepted": 1,
		"k_eLobbyMemberCoachRequestState_Rejected": 2,
	}
)

func (x ELobbyMemberCoachRequestState) Enum() *ELobbyMemberCoachRequestState {
	p := new(ELobbyMemberCoachRequestState)
	*p = x
	return p
}

func (x ELobbyMemberCoachRequestState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELobbyMemberCoachRequestState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_lobby_proto_enumTypes[0].Descriptor()
}

func (ELobbyMemberCoachRequestState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_lobby_proto_enumTypes[0]
}

func (x ELobbyMemberCoachRequestState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELobbyMemberCoachRequestState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELobbyMemberCoachRequestState(num)
	return nil
}

// Deprecated: Use ELobbyMemberCoachRequestState.Descriptor instead.
func (ELobbyMemberCoachRequestState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{0}
}

type LobbyDotaTVDelay int32

const (
	LobbyDotaTVDelay_LobbyDotaTV_10  LobbyDotaTVDelay = 0
	LobbyDotaTVDelay_LobbyDotaTV_120 LobbyDotaTVDelay = 1
	LobbyDotaTVDelay_LobbyDotaTV_300 LobbyDotaTVDelay = 2
	LobbyDotaTVDelay_LobbyDotaTV_900 LobbyDotaTVDelay = 3
)

// Enum value maps for LobbyDotaTVDelay.
var (
	LobbyDotaTVDelay_name = map[int32]string{
		0: "LobbyDotaTV_10",
		1: "LobbyDotaTV_120",
		2: "LobbyDotaTV_300",
		3: "LobbyDotaTV_900",
	}
	LobbyDotaTVDelay_value = map[string]int32{
		"LobbyDotaTV_10":  0,
		"LobbyDotaTV_120": 1,
		"LobbyDotaTV_300": 2,
		"LobbyDotaTV_900": 3,
	}
)

func (x LobbyDotaTVDelay) Enum() *LobbyDotaTVDelay {
	p := new(LobbyDotaTVDelay)
	*p = x
	return p
}

func (x LobbyDotaTVDelay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyDotaTVDelay) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_lobby_proto_enumTypes[1].Descriptor()
}

func (LobbyDotaTVDelay) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_lobby_proto_enumTypes[1]
}

func (x LobbyDotaTVDelay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LobbyDotaTVDelay) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LobbyDotaTVDelay(num)
	return nil
}

// Deprecated: Use LobbyDotaTVDelay.Descriptor instead.
func (LobbyDotaTVDelay) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{1}
}

type LobbyDotaPauseSetting int32

const (
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited LobbyDotaPauseSetting = 0
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Limited   LobbyDotaPauseSetting = 1
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Disabled  LobbyDotaPauseSetting = 2
)

// Enum value maps for LobbyDotaPauseSetting.
var (
	LobbyDotaPauseSetting_name = map[int32]string{
		0: "LobbyDotaPauseSetting_Unlimited",
		1: "LobbyDotaPauseSetting_Limited",
		2: "LobbyDotaPauseSetting_Disabled",
	}
	LobbyDotaPauseSetting_value = map[string]int32{
		"LobbyDotaPauseSetting_Unlimited": 0,
		"LobbyDotaPauseSetting_Limited":   1,
		"LobbyDotaPauseSetting_Disabled":  2,
	}
)

func (x LobbyDotaPauseSetting) Enum() *LobbyDotaPauseSetting {
	p := new(LobbyDotaPauseSetting)
	*p = x
	return p
}

func (x LobbyDotaPauseSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyDotaPauseSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_lobby_proto_enumTypes[2].Descriptor()
}

func (LobbyDotaPauseSetting) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_lobby_proto_enumTypes[2]
}

func (x LobbyDotaPauseSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LobbyDotaPauseSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LobbyDotaPauseSetting(num)
	return nil
}

// Deprecated: Use LobbyDotaPauseSetting.Descriptor instead.
func (LobbyDotaPauseSetting) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{2}
}

type CSODOTALobby_State int32

const (
	CSODOTALobby_UI           CSODOTALobby_State = 0
	CSODOTALobby_READYUP      CSODOTALobby_State = 4
	CSODOTALobby_SERVERSETUP  CSODOTALobby_State = 1
	CSODOTALobby_RUN          CSODOTALobby_State = 2
	CSODOTALobby_POSTGAME     CSODOTALobby_State = 3
	CSODOTALobby_NOTREADY     CSODOTALobby_State = 5
	CSODOTALobby_SERVERASSIGN CSODOTALobby_State = 6
)

// Enum value maps for CSODOTALobby_State.
var (
	CSODOTALobby_State_name = map[int32]string{
		0: "UI",
		4: "READYUP",
		1: "SERVERSETUP",
		2: "RUN",
		3: "POSTGAME",
		5: "NOTREADY",
		6: "SERVERASSIGN",
	}
	CSODOTALobby_State_value = map[string]int32{
		"UI":           0,
		"READYUP":      4,
		"SERVERSETUP":  1,
		"RUN":          2,
		"POSTGAME":     3,
		"NOTREADY":     5,
		"SERVERASSIGN": 6,
	}
)

func (x CSODOTALobby_State) Enum() *CSODOTALobby_State {
	p := new(CSODOTALobby_State)
	*p = x
	return p
}

func (x CSODOTALobby_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODOTALobby_State) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_lobby_proto_enumTypes[3].Descriptor()
}

func (CSODOTALobby_State) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_lobby_proto_enumTypes[3]
}

func (x CSODOTALobby_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODOTALobby_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODOTALobby_State(num)
	return nil
}

// Deprecated: Use CSODOTALobby_State.Descriptor instead.
func (CSODOTALobby_State) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{17, 0}
}

type CSODOTALobby_LobbyType int32

const (
	CSODOTALobby_INVALID           CSODOTALobby_LobbyType = -1
	CSODOTALobby_CASUAL_MATCH      CSODOTALobby_LobbyType = 0
	CSODOTALobby_PRACTICE          CSODOTALobby_LobbyType = 1
	CSODOTALobby_COOP_BOT_MATCH    CSODOTALobby_LobbyType = 4
	CSODOTALobby_COMPETITIVE_MATCH CSODOTALobby_LobbyType = 7
	CSODOTALobby_WEEKEND_TOURNEY   CSODOTALobby_LobbyType = 9
	CSODOTALobby_LOCAL_BOT_MATCH   CSODOTALobby_LobbyType = 10
	CSODOTALobby_SPECTATOR         CSODOTALobby_LobbyType = 11
	CSODOTALobby_EVENT_MATCH       CSODOTALobby_LobbyType = 12
	CSODOTALobby_NEW_PLAYER_POOL   CSODOTALobby_LobbyType = 14
	CSODOTALobby_FEATURED_GAMEMODE CSODOTALobby_LobbyType = 15
)

// Enum value maps for CSODOTALobby_LobbyType.
var (
	CSODOTALobby_LobbyType_name = map[int32]string{
		-1: "INVALID",
		0:  "CASUAL_MATCH",
		1:  "PRACTICE",
		4:  "COOP_BOT_MATCH",
		7:  "COMPETITIVE_MATCH",
		9:  "WEEKEND_TOURNEY",
		10: "LOCAL_BOT_MATCH",
		11: "SPECTATOR",
		12: "EVENT_MATCH",
		14: "NEW_PLAYER_POOL",
		15: "FEATURED_GAMEMODE",
	}
	CSODOTALobby_LobbyType_value = map[string]int32{
		"INVALID":           -1,
		"CASUAL_MATCH":      0,
		"PRACTICE":          1,
		"COOP_BOT_MATCH":    4,
		"COMPETITIVE_MATCH": 7,
		"WEEKEND_TOURNEY":   9,
		"LOCAL_BOT_MATCH":   10,
		"SPECTATOR":         11,
		"EVENT_MATCH":       12,
		"NEW_PLAYER_POOL":   14,
		"FEATURED_GAMEMODE": 15,
	}
)

func (x CSODOTALobby_LobbyType) Enum() *CSODOTALobby_LobbyType {
	p := new(CSODOTALobby_LobbyType)
	*p = x
	return p
}

func (x CSODOTALobby_LobbyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODOTALobby_LobbyType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_lobby_proto_enumTypes[4].Descriptor()
}

func (CSODOTALobby_LobbyType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_lobby_proto_enumTypes[4]
}

func (x CSODOTALobby_LobbyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODOTALobby_LobbyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODOTALobby_LobbyType(num)
	return nil
}

// Deprecated: Use CSODOTALobby_LobbyType.Descriptor instead.
func (CSODOTALobby_LobbyType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{17, 1}
}

type CMsgLobbyCoachFriendRequest struct {
	state           protoimpl.MessageState         `protogen:"open.v1"`
	CoachAccountId  *uint32                        `protobuf:"varint,1,opt,name=coach_account_id,json=coachAccountId" json:"coach_account_id,omitempty"`
	PlayerAccountId *uint32                        `protobuf:"varint,2,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	RequestState    *ELobbyMemberCoachRequestState `protobuf:"varint,3,opt,name=request_state,json=requestState,enum=protocol.ELobbyMemberCoachRequestState,def=0" json:"request_state,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgLobbyCoachFriendRequest fields.
const (
	Default_CMsgLobbyCoachFriendRequest_RequestState = ELobbyMemberCoachRequestState_k_eLobbyMemberCoachRequestState_None
)

func (x *CMsgLobbyCoachFriendRequest) Reset() {
	*x = CMsgLobbyCoachFriendRequest{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLobbyCoachFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyCoachFriendRequest) ProtoMessage() {}

func (x *CMsgLobbyCoachFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyCoachFriendRequest.ProtoReflect.Descriptor instead.
func (*CMsgLobbyCoachFriendRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgLobbyCoachFriendRequest) GetCoachAccountId() uint32 {
	if x != nil && x.CoachAccountId != nil {
		return *x.CoachAccountId
	}
	return 0
}

func (x *CMsgLobbyCoachFriendRequest) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgLobbyCoachFriendRequest) GetRequestState() ELobbyMemberCoachRequestState {
	if x != nil && x.RequestState != nil {
		return *x.RequestState
	}
	return Default_CMsgLobbyCoachFriendRequest_RequestState
}

type CMsgLobbyPlayerPlusSubscriptionData struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	HeroBadges    []*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge `protobuf:"bytes,1,rep,name=hero_badges,json=heroBadges" json:"hero_badges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgLobbyPlayerPlusSubscriptionData) Reset() {
	*x = CMsgLobbyPlayerPlusSubscriptionData{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLobbyPlayerPlusSubscriptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyPlayerPlusSubscriptionData) ProtoMessage() {}

func (x *CMsgLobbyPlayerPlusSubscriptionData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyPlayerPlusSubscriptionData.ProtoReflect.Descriptor instead.
func (*CMsgLobbyPlayerPlusSubscriptionData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgLobbyPlayerPlusSubscriptionData) GetHeroBadges() []*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge {
	if x != nil {
		return x.HeroBadges
	}
	return nil
}

type CMsgEventActionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActionId      *uint32                `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	ActionScore   *uint32                `protobuf:"varint,2,opt,name=action_score,json=actionScore" json:"action_score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgEventActionData) Reset() {
	*x = CMsgEventActionData{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgEventActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventActionData) ProtoMessage() {}

func (x *CMsgEventActionData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventActionData.ProtoReflect.Descriptor instead.
func (*CMsgEventActionData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgEventActionData) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgEventActionData) GetActionScore() uint32 {
	if x != nil && x.ActionScore != nil {
		return *x.ActionScore
	}
	return 0
}

type CMsgPeriodicResourceData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PeriodicResourceId *uint32                `protobuf:"varint,1,opt,name=periodic_resource_id,json=periodicResourceId" json:"periodic_resource_id,omitempty"`
	Remaining          *uint32                `protobuf:"varint,2,opt,name=remaining" json:"remaining,omitempty"`
	Max                *uint32                `protobuf:"varint,3,opt,name=max" json:"max,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgPeriodicResourceData) Reset() {
	*x = CMsgPeriodicResourceData{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPeriodicResourceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPeriodicResourceData) ProtoMessage() {}

func (x *CMsgPeriodicResourceData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPeriodicResourceData.ProtoReflect.Descriptor instead.
func (*CMsgPeriodicResourceData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgPeriodicResourceData) GetPeriodicResourceId() uint32 {
	if x != nil && x.PeriodicResourceId != nil {
		return *x.PeriodicResourceId
	}
	return 0
}

func (x *CMsgPeriodicResourceData) GetRemaining() uint32 {
	if x != nil && x.Remaining != nil {
		return *x.Remaining
	}
	return 0
}

func (x *CMsgPeriodicResourceData) GetMax() uint32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type CMsgLobbyEventPoints struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	EventId       *uint32                               `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AccountPoints []*CMsgLobbyEventPoints_AccountPoints `protobuf:"bytes,2,rep,name=account_points,json=accountPoints" json:"account_points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgLobbyEventPoints) Reset() {
	*x = CMsgLobbyEventPoints{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLobbyEventPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventPoints) ProtoMessage() {}

func (x *CMsgLobbyEventPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventPoints.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgLobbyEventPoints) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgLobbyEventPoints) GetAccountPoints() []*CMsgLobbyEventPoints_AccountPoints {
	if x != nil {
		return x.AccountPoints
	}
	return nil
}

type CMsgLobbyEventGameData struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	GameSeed             *uint32                `protobuf:"varint,1,opt,name=game_seed,json=gameSeed" json:"game_seed,omitempty"`
	EventWindowStartTime *uint32                `protobuf:"varint,2,opt,name=event_window_start_time,json=eventWindowStartTime" json:"event_window_start_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgLobbyEventGameData) Reset() {
	*x = CMsgLobbyEventGameData{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLobbyEventGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventGameData) ProtoMessage() {}

func (x *CMsgLobbyEventGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventGameData.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgLobbyEventGameData) GetGameSeed() uint32 {
	if x != nil && x.GameSeed != nil {
		return *x.GameSeed
	}
	return 0
}

func (x *CMsgLobbyEventGameData) GetEventWindowStartTime() uint32 {
	if x != nil && x.EventWindowStartTime != nil {
		return *x.EventWindowStartTime
	}
	return 0
}

type CSODOTALobbyInvite struct {
	state               protoimpl.MessageState            `protogen:"open.v1"`
	GroupId             *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId            *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName          *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members             []*CSODOTALobbyInvite_LobbyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	CustomGameId        *uint64                           `protobuf:"varint,5,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	InviteGid           *uint64                           `protobuf:"fixed64,6,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	CustomGameCrc       *uint64                           `protobuf:"fixed64,7,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp *uint32                           `protobuf:"fixed32,8,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CSODOTALobbyInvite) Reset() {
	*x = CSODOTALobbyInvite{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTALobbyInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobbyInvite) ProtoMessage() {}

func (x *CSODOTALobbyInvite) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobbyInvite.ProtoReflect.Descriptor instead.
func (*CSODOTALobbyInvite) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{6}
}

func (x *CSODOTALobbyInvite) GetGroupId() uint64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetSenderId() uint64 {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *CSODOTALobbyInvite) GetMembers() []*CSODOTALobbyInvite_LobbyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODOTALobbyInvite) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetInviteGid() uint64 {
	if x != nil && x.InviteGid != nil {
		return *x.InviteGid
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetCustomGameCrc() uint64 {
	if x != nil && x.CustomGameCrc != nil {
		return *x.CustomGameCrc
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetCustomGameTimestamp() uint32 {
	if x != nil && x.CustomGameTimestamp != nil {
		return *x.CustomGameTimestamp
	}
	return 0
}

type CSODOTALobbyMember struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	Id                     *uint64                  `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	HeroId                 *int32                   `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Team                   *DOTA_GC_TEAM            `protobuf:"varint,3,opt,name=team,enum=protocol.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Slot                   *uint32                  `protobuf:"varint,7,opt,name=slot" json:"slot,omitempty"`
	LeaverStatus           *DOTALeaverStatusT       `protobuf:"varint,16,opt,name=leaver_status,json=leaverStatus,enum=protocol.DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverActions          *uint32                  `protobuf:"varint,28,opt,name=leaver_actions,json=leaverActions" json:"leaver_actions,omitempty"`
	CoachTeam              *DOTA_GC_TEAM            `protobuf:"varint,23,opt,name=coach_team,json=coachTeam,enum=protocol.DOTA_GC_TEAM,def=5" json:"coach_team,omitempty"`
	CustomGameProductIds   []uint32                 `protobuf:"varint,31,rep,name=custom_game_product_ids,json=customGameProductIds" json:"custom_game_product_ids,omitempty"`
	LiveSpectatorTeam      *DOTA_GC_TEAM            `protobuf:"varint,40,opt,name=live_spectator_team,json=liveSpectatorTeam,enum=protocol.DOTA_GC_TEAM,def=5" json:"live_spectator_team,omitempty"`
	PendingAwards          []*CMsgPendingEventAward `protobuf:"bytes,44,rep,name=pending_awards,json=pendingAwards" json:"pending_awards,omitempty"`
	PendingAwardsOnVictory []*CMsgPendingEventAward `protobuf:"bytes,45,rep,name=pending_awards_on_victory,json=pendingAwardsOnVictory" json:"pending_awards_on_victory,omitempty"`
	ReportsAvailable       *uint32                  `protobuf:"varint,52,opt,name=reports_available,json=reportsAvailable" json:"reports_available,omitempty"`
	LiveSpectatorAccountId *uint32                  `protobuf:"varint,55,opt,name=live_spectator_account_id,json=liveSpectatorAccountId" json:"live_spectator_account_id,omitempty"`
	CommsReportsAvailable  *uint32                  `protobuf:"varint,56,opt,name=comms_reports_available,json=commsReportsAvailable" json:"comms_reports_available,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for CSODOTALobbyMember fields.
const (
	Default_CSODOTALobbyMember_Team              = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
	Default_CSODOTALobbyMember_LeaverStatus      = DOTALeaverStatusT_DOTA_LEAVER_NONE
	Default_CSODOTALobbyMember_CoachTeam         = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
	Default_CSODOTALobbyMember_LiveSpectatorTeam = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
)

func (x *CSODOTALobbyMember) Reset() {
	*x = CSODOTALobbyMember{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTALobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobbyMember) ProtoMessage() {}

func (x *CSODOTALobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobbyMember.ProtoReflect.Descriptor instead.
func (*CSODOTALobbyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{7}
}

func (x *CSODOTALobbyMember) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CSODOTALobbyMember) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CSODOTALobbyMember) GetTeam() DOTA_GC_TEAM {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CSODOTALobbyMember_Team
}

func (x *CSODOTALobbyMember) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CSODOTALobbyMember) GetLeaverStatus() DOTALeaverStatusT {
	if x != nil && x.LeaverStatus != nil {
		return *x.LeaverStatus
	}
	return Default_CSODOTALobbyMember_LeaverStatus
}

func (x *CSODOTALobbyMember) GetLeaverActions() uint32 {
	if x != nil && x.LeaverActions != nil {
		return *x.LeaverActions
	}
	return 0
}

func (x *CSODOTALobbyMember) GetCoachTeam() DOTA_GC_TEAM {
	if x != nil && x.CoachTeam != nil {
		return *x.CoachTeam
	}
	return Default_CSODOTALobbyMember_CoachTeam
}

func (x *CSODOTALobbyMember) GetCustomGameProductIds() []uint32 {
	if x != nil {
		return x.CustomGameProductIds
	}
	return nil
}

func (x *CSODOTALobbyMember) GetLiveSpectatorTeam() DOTA_GC_TEAM {
	if x != nil && x.LiveSpectatorTeam != nil {
		return *x.LiveSpectatorTeam
	}
	return Default_CSODOTALobbyMember_LiveSpectatorTeam
}

func (x *CSODOTALobbyMember) GetPendingAwards() []*CMsgPendingEventAward {
	if x != nil {
		return x.PendingAwards
	}
	return nil
}

func (x *CSODOTALobbyMember) GetPendingAwardsOnVictory() []*CMsgPendingEventAward {
	if x != nil {
		return x.PendingAwardsOnVictory
	}
	return nil
}

func (x *CSODOTALobbyMember) GetReportsAvailable() uint32 {
	if x != nil && x.ReportsAvailable != nil {
		return *x.ReportsAvailable
	}
	return 0
}

func (x *CSODOTALobbyMember) GetLiveSpectatorAccountId() uint32 {
	if x != nil && x.LiveSpectatorAccountId != nil {
		return *x.LiveSpectatorAccountId
	}
	return 0
}

func (x *CSODOTALobbyMember) GetCommsReportsAvailable() uint32 {
	if x != nil && x.CommsReportsAvailable != nil {
		return *x.CommsReportsAvailable
	}
	return 0
}

type CSODOTAServerLobbyMember struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSODOTAServerLobbyMember) Reset() {
	*x = CSODOTAServerLobbyMember{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTAServerLobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAServerLobbyMember) ProtoMessage() {}

func (x *CSODOTAServerLobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAServerLobbyMember.ProtoReflect.Descriptor instead.
func (*CSODOTAServerLobbyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{8}
}

type CSODOTAStaticLobbyMember struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PartyId       *uint64                `protobuf:"varint,2,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	Channel       *uint32                `protobuf:"varint,3,opt,name=channel,def=6" json:"channel,omitempty"`
	Cameraman     *bool                  `protobuf:"varint,4,opt,name=cameraman" json:"cameraman,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CSODOTAStaticLobbyMember fields.
const (
	Default_CSODOTAStaticLobbyMember_Channel = uint32(6)
)

func (x *CSODOTAStaticLobbyMember) Reset() {
	*x = CSODOTAStaticLobbyMember{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTAStaticLobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAStaticLobbyMember) ProtoMessage() {}

func (x *CSODOTAStaticLobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAStaticLobbyMember.ProtoReflect.Descriptor instead.
func (*CSODOTAStaticLobbyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{9}
}

func (x *CSODOTAStaticLobbyMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSODOTAStaticLobbyMember) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CSODOTAStaticLobbyMember) GetChannel() uint32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_CSODOTAStaticLobbyMember_Channel
}

func (x *CSODOTAStaticLobbyMember) GetCameraman() bool {
	if x != nil && x.Cameraman != nil {
		return *x.Cameraman
	}
	return false
}

type CSODOTAServerStaticLobbyMember struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SteamId                *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	RankTier               *int32                 `protobuf:"varint,3,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
	LeaderboardRank        *int32                 `protobuf:"varint,4,opt,name=leaderboard_rank,json=leaderboardRank,def=-1" json:"leaderboard_rank,omitempty"`
	LaneSelectionFlags     *int32                 `protobuf:"varint,5,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	RankMmrBoostType       *EDOTAMMRBoostType     `protobuf:"varint,6,opt,name=rank_mmr_boost_type,json=rankMmrBoostType,enum=protocol.EDOTAMMRBoostType,def=0" json:"rank_mmr_boost_type,omitempty"`
	CoachRating            *int32                 `protobuf:"varint,7,opt,name=coach_rating,json=coachRating" json:"coach_rating,omitempty"`
	CoachedAccountIds      []uint32               `protobuf:"varint,8,rep,name=coached_account_ids,json=coachedAccountIds" json:"coached_account_ids,omitempty"`
	WasMvpLastGame         *bool                  `protobuf:"varint,9,opt,name=was_mvp_last_game,json=wasMvpLastGame" json:"was_mvp_last_game,omitempty"`
	CanEarnRewards         *bool                  `protobuf:"varint,10,opt,name=can_earn_rewards,json=canEarnRewards" json:"can_earn_rewards,omitempty"`
	IsPlusSubscriber       *bool                  `protobuf:"varint,11,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	FavoriteTeamPacked     *uint64                `protobuf:"varint,12,opt,name=favorite_team_packed,json=favoriteTeamPacked" json:"favorite_team_packed,omitempty"`
	IsSteamChina           *bool                  `protobuf:"varint,13,opt,name=is_steam_china,json=isSteamChina" json:"is_steam_china,omitempty"`
	Title                  *uint32                `protobuf:"varint,14,opt,name=title" json:"title,omitempty"`
	GuildId                *uint32                `protobuf:"varint,15,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	DisabledRandomHeroBits []uint32               `protobuf:"fixed32,16,rep,name=disabled_random_hero_bits,json=disabledRandomHeroBits" json:"disabled_random_hero_bits,omitempty"`
	DisabledHeroId         []int32                `protobuf:"varint,17,rep,name=disabled_hero_id,json=disabledHeroId" json:"disabled_hero_id,omitempty"`
	EnabledHeroId          []int32                `protobuf:"varint,18,rep,name=enabled_hero_id,json=enabledHeroId" json:"enabled_hero_id,omitempty"`
	BannedHeroIds          []int32                `protobuf:"varint,19,rep,name=banned_hero_ids,json=bannedHeroIds" json:"banned_hero_ids,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for CSODOTAServerStaticLobbyMember fields.
const (
	Default_CSODOTAServerStaticLobbyMember_LeaderboardRank  = int32(-1)
	Default_CSODOTAServerStaticLobbyMember_RankMmrBoostType = EDOTAMMRBoostType_k_EDOTAMMRBoostType_None
)

func (x *CSODOTAServerStaticLobbyMember) Reset() {
	*x = CSODOTAServerStaticLobbyMember{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTAServerStaticLobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAServerStaticLobbyMember) ProtoMessage() {}

func (x *CSODOTAServerStaticLobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAServerStaticLobbyMember.ProtoReflect.Descriptor instead.
func (*CSODOTAServerStaticLobbyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{10}
}

func (x *CSODOTAServerStaticLobbyMember) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CSODOTAServerStaticLobbyMember) GetRankTier() int32 {
	if x != nil && x.RankTier != nil {
		return *x.RankTier
	}
	return 0
}

func (x *CSODOTAServerStaticLobbyMember) GetLeaderboardRank() int32 {
	if x != nil && x.LeaderboardRank != nil {
		return *x.LeaderboardRank
	}
	return Default_CSODOTAServerStaticLobbyMember_LeaderboardRank
}

func (x *CSODOTAServerStaticLobbyMember) GetLaneSelectionFlags() int32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CSODOTAServerStaticLobbyMember) GetRankMmrBoostType() EDOTAMMRBoostType {
	if x != nil && x.RankMmrBoostType != nil {
		return *x.RankMmrBoostType
	}
	return Default_CSODOTAServerStaticLobbyMember_RankMmrBoostType
}

func (x *CSODOTAServerStaticLobbyMember) GetCoachRating() int32 {
	if x != nil && x.CoachRating != nil {
		return *x.CoachRating
	}
	return 0
}

func (x *CSODOTAServerStaticLobbyMember) GetCoachedAccountIds() []uint32 {
	if x != nil {
		return x.CoachedAccountIds
	}
	return nil
}

func (x *CSODOTAServerStaticLobbyMember) GetWasMvpLastGame() bool {
	if x != nil && x.WasMvpLastGame != nil {
		return *x.WasMvpLastGame
	}
	return false
}

func (x *CSODOTAServerStaticLobbyMember) GetCanEarnRewards() bool {
	if x != nil && x.CanEarnRewards != nil {
		return *x.CanEarnRewards
	}
	return false
}

func (x *CSODOTAServerStaticLobbyMember) GetIsPlusSubscriber() bool {
	if x != nil && x.IsPlusSubscriber != nil {
		return *x.IsPlusSubscriber
	}
	return false
}

func (x *CSODOTAServerStaticLobbyMember) GetFavoriteTeamPacked() uint64 {
	if x != nil && x.FavoriteTeamPacked != nil {
		return *x.FavoriteTeamPacked
	}
	return 0
}

func (x *CSODOTAServerStaticLobbyMember) GetIsSteamChina() bool {
	if x != nil && x.IsSteamChina != nil {
		return *x.IsSteamChina
	}
	return false
}

func (x *CSODOTAServerStaticLobbyMember) GetTitle() uint32 {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return 0
}

func (x *CSODOTAServerStaticLobbyMember) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CSODOTAServerStaticLobbyMember) GetDisabledRandomHeroBits() []uint32 {
	if x != nil {
		return x.DisabledRandomHeroBits
	}
	return nil
}

func (x *CSODOTAServerStaticLobbyMember) GetDisabledHeroId() []int32 {
	if x != nil {
		return x.DisabledHeroId
	}
	return nil
}

func (x *CSODOTAServerStaticLobbyMember) GetEnabledHeroId() []int32 {
	if x != nil {
		return x.EnabledHeroId
	}
	return nil
}

func (x *CSODOTAServerStaticLobbyMember) GetBannedHeroIds() []int32 {
	if x != nil {
		return x.BannedHeroIds
	}
	return nil
}

type CLobbyTeamDetails struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	TeamName                   *string                `protobuf:"bytes,1,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag                    *string                `protobuf:"bytes,3,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamId                     *uint32                `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamLogo                   *uint64                `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamBaseLogo               *uint64                `protobuf:"varint,6,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	TeamBannerLogo             *uint64                `protobuf:"varint,7,opt,name=team_banner_logo,json=teamBannerLogo" json:"team_banner_logo,omitempty"`
	TeamComplete               *bool                  `protobuf:"varint,8,opt,name=team_complete,json=teamComplete" json:"team_complete,omitempty"`
	Rank                       *uint32                `protobuf:"varint,15,opt,name=rank" json:"rank,omitempty"`
	RankChange                 *int32                 `protobuf:"zigzag32,16,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	IsHomeTeam                 *bool                  `protobuf:"varint,17,opt,name=is_home_team,json=isHomeTeam" json:"is_home_team,omitempty"`
	IsChallengeMatch           *bool                  `protobuf:"varint,18,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	ChallengeMatchTokenAccount *uint64                `protobuf:"varint,19,opt,name=challenge_match_token_account,json=challengeMatchTokenAccount" json:"challenge_match_token_account,omitempty"`
	TeamLogoUrl                *string                `protobuf:"bytes,20,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	TeamAbbreviation           *string                `protobuf:"bytes,21,opt,name=team_abbreviation,json=teamAbbreviation" json:"team_abbreviation,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CLobbyTeamDetails) Reset() {
	*x = CLobbyTeamDetails{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CLobbyTeamDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyTeamDetails) ProtoMessage() {}

func (x *CLobbyTeamDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyTeamDetails.ProtoReflect.Descriptor instead.
func (*CLobbyTeamDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{11}
}

func (x *CLobbyTeamDetails) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CLobbyTeamDetails) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CLobbyTeamDetails) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamBaseLogo() uint64 {
	if x != nil && x.TeamBaseLogo != nil {
		return *x.TeamBaseLogo
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamBannerLogo() uint64 {
	if x != nil && x.TeamBannerLogo != nil {
		return *x.TeamBannerLogo
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamComplete() bool {
	if x != nil && x.TeamComplete != nil {
		return *x.TeamComplete
	}
	return false
}

func (x *CLobbyTeamDetails) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CLobbyTeamDetails) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *CLobbyTeamDetails) GetIsHomeTeam() bool {
	if x != nil && x.IsHomeTeam != nil {
		return *x.IsHomeTeam
	}
	return false
}

func (x *CLobbyTeamDetails) GetIsChallengeMatch() bool {
	if x != nil && x.IsChallengeMatch != nil {
		return *x.IsChallengeMatch
	}
	return false
}

func (x *CLobbyTeamDetails) GetChallengeMatchTokenAccount() uint64 {
	if x != nil && x.ChallengeMatchTokenAccount != nil {
		return *x.ChallengeMatchTokenAccount
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

func (x *CLobbyTeamDetails) GetTeamAbbreviation() string {
	if x != nil && x.TeamAbbreviation != nil {
		return *x.TeamAbbreviation
	}
	return ""
}

type CLobbyGuildDetails struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	GuildId               *uint32                `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	GuildPrimaryColor     *uint32                `protobuf:"varint,2,opt,name=guild_primary_color,json=guildPrimaryColor" json:"guild_primary_color,omitempty"`
	GuildSecondaryColor   *uint32                `protobuf:"varint,3,opt,name=guild_secondary_color,json=guildSecondaryColor" json:"guild_secondary_color,omitempty"`
	GuildPattern          *uint32                `protobuf:"varint,4,opt,name=guild_pattern,json=guildPattern" json:"guild_pattern,omitempty"`
	GuildLogo             *uint64                `protobuf:"varint,5,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	GuildPoints           *uint32                `protobuf:"varint,6,opt,name=guild_points,json=guildPoints" json:"guild_points,omitempty"`
	GuildEvent            *uint32                `protobuf:"varint,7,opt,name=guild_event,json=guildEvent" json:"guild_event,omitempty"`
	GuildFlags            *uint32                `protobuf:"varint,8,opt,name=guild_flags,json=guildFlags" json:"guild_flags,omitempty"`
	TeamForGuild          *DOTA_GC_TEAM          `protobuf:"varint,9,opt,name=team_for_guild,json=teamForGuild,enum=protocol.DOTA_GC_TEAM,def=0" json:"team_for_guild,omitempty"`
	GuildTag              *string                `protobuf:"bytes,10,opt,name=guild_tag,json=guildTag" json:"guild_tag,omitempty"`
	GuildWeeklyPercentile *uint32                `protobuf:"varint,11,opt,name=guild_weekly_percentile,json=guildWeeklyPercentile" json:"guild_weekly_percentile,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for CLobbyGuildDetails fields.
const (
	Default_CLobbyGuildDetails_TeamForGuild = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
)

func (x *CLobbyGuildDetails) Reset() {
	*x = CLobbyGuildDetails{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CLobbyGuildDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyGuildDetails) ProtoMessage() {}

func (x *CLobbyGuildDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyGuildDetails.ProtoReflect.Descriptor instead.
func (*CLobbyGuildDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{12}
}

func (x *CLobbyGuildDetails) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildPrimaryColor() uint32 {
	if x != nil && x.GuildPrimaryColor != nil {
		return *x.GuildPrimaryColor
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildSecondaryColor() uint32 {
	if x != nil && x.GuildSecondaryColor != nil {
		return *x.GuildSecondaryColor
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildPattern() uint32 {
	if x != nil && x.GuildPattern != nil {
		return *x.GuildPattern
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildLogo() uint64 {
	if x != nil && x.GuildLogo != nil {
		return *x.GuildLogo
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildPoints() uint32 {
	if x != nil && x.GuildPoints != nil {
		return *x.GuildPoints
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildEvent() uint32 {
	if x != nil && x.GuildEvent != nil {
		return *x.GuildEvent
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildFlags() uint32 {
	if x != nil && x.GuildFlags != nil {
		return *x.GuildFlags
	}
	return 0
}

func (x *CLobbyGuildDetails) GetTeamForGuild() DOTA_GC_TEAM {
	if x != nil && x.TeamForGuild != nil {
		return *x.TeamForGuild
	}
	return Default_CLobbyGuildDetails_TeamForGuild
}

func (x *CLobbyGuildDetails) GetGuildTag() string {
	if x != nil && x.GuildTag != nil {
		return *x.GuildTag
	}
	return ""
}

func (x *CLobbyGuildDetails) GetGuildWeeklyPercentile() uint32 {
	if x != nil && x.GuildWeeklyPercentile != nil {
		return *x.GuildWeeklyPercentile
	}
	return 0
}

type CLobbyTimedRewardDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemDefIndex  *uint32                `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	IsSupplyCrate *bool                  `protobuf:"varint,3,opt,name=is_supply_crate,json=isSupplyCrate" json:"is_supply_crate,omitempty"`
	IsTimedDrop   *bool                  `protobuf:"varint,4,opt,name=is_timed_drop,json=isTimedDrop" json:"is_timed_drop,omitempty"`
	AccountId     *uint32                `protobuf:"varint,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Origin        *uint32                `protobuf:"varint,6,opt,name=origin" json:"origin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CLobbyTimedRewardDetails) Reset() {
	*x = CLobbyTimedRewardDetails{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CLobbyTimedRewardDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyTimedRewardDetails) ProtoMessage() {}

func (x *CLobbyTimedRewardDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyTimedRewardDetails.ProtoReflect.Descriptor instead.
func (*CLobbyTimedRewardDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{13}
}

func (x *CLobbyTimedRewardDetails) GetItemDefIndex() uint32 {
	if x != nil && x.ItemDefIndex != nil {
		return *x.ItemDefIndex
	}
	return 0
}

func (x *CLobbyTimedRewardDetails) GetIsSupplyCrate() bool {
	if x != nil && x.IsSupplyCrate != nil {
		return *x.IsSupplyCrate
	}
	return false
}

func (x *CLobbyTimedRewardDetails) GetIsTimedDrop() bool {
	if x != nil && x.IsTimedDrop != nil {
		return *x.IsTimedDrop
	}
	return false
}

func (x *CLobbyTimedRewardDetails) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CLobbyTimedRewardDetails) GetOrigin() uint32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

type CLobbyBroadcastChannelInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     *uint32                `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	CountryCode   *string                `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	LanguageCode  *string                `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CLobbyBroadcastChannelInfo) Reset() {
	*x = CLobbyBroadcastChannelInfo{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CLobbyBroadcastChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyBroadcastChannelInfo) ProtoMessage() {}

func (x *CLobbyBroadcastChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyBroadcastChannelInfo.ProtoReflect.Descriptor instead.
func (*CLobbyBroadcastChannelInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{14}
}

func (x *CLobbyBroadcastChannelInfo) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CLobbyBroadcastChannelInfo) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CLobbyBroadcastChannelInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CLobbyBroadcastChannelInfo) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

type CLobbyGuildChallenge struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	GuildId                  *uint32                `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId                  *EEvent                `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	ChallengeInstanceId      *uint32                `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter       *uint32                `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ChallengeTimestamp       *uint32                `protobuf:"varint,5,opt,name=challenge_timestamp,json=challengeTimestamp" json:"challenge_timestamp,omitempty"`
	ChallengePeriodSerial    *uint32                `protobuf:"varint,6,opt,name=challenge_period_serial,json=challengePeriodSerial" json:"challenge_period_serial,omitempty"`
	ChallengeProgressAtStart *uint32                `protobuf:"varint,7,opt,name=challenge_progress_at_start,json=challengeProgressAtStart" json:"challenge_progress_at_start,omitempty"`
	EligibleAccountIds       []uint32               `protobuf:"varint,8,rep,name=eligible_account_ids,json=eligibleAccountIds" json:"eligible_account_ids,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for CLobbyGuildChallenge fields.
const (
	Default_CLobbyGuildChallenge_EventId = EEvent_EVENT_ID_NONE
)

func (x *CLobbyGuildChallenge) Reset() {
	*x = CLobbyGuildChallenge{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CLobbyGuildChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyGuildChallenge) ProtoMessage() {}

func (x *CLobbyGuildChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyGuildChallenge.ProtoReflect.Descriptor instead.
func (*CLobbyGuildChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{15}
}

func (x *CLobbyGuildChallenge) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CLobbyGuildChallenge_EventId
}

func (x *CLobbyGuildChallenge) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetChallengeTimestamp() uint32 {
	if x != nil && x.ChallengeTimestamp != nil {
		return *x.ChallengeTimestamp
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetChallengePeriodSerial() uint32 {
	if x != nil && x.ChallengePeriodSerial != nil {
		return *x.ChallengePeriodSerial
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetChallengeProgressAtStart() uint32 {
	if x != nil && x.ChallengeProgressAtStart != nil {
		return *x.ChallengeProgressAtStart
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetEligibleAccountIds() []uint32 {
	if x != nil {
		return x.EligibleAccountIds
	}
	return nil
}

type CDOTALobbyMatchQualityData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	OverallQuality  *uint32                `protobuf:"varint,1,opt,name=overall_quality,json=overallQuality" json:"overall_quality,omitempty"`
	TeamBalance     *uint32                `protobuf:"varint,2,opt,name=team_balance,json=teamBalance" json:"team_balance,omitempty"`
	MatchSkillRange *uint32                `protobuf:"varint,3,opt,name=match_skill_range,json=matchSkillRange" json:"match_skill_range,omitempty"`
	MatchBehavior   *uint32                `protobuf:"varint,4,opt,name=match_behavior,json=matchBehavior" json:"match_behavior,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDOTALobbyMatchQualityData) Reset() {
	*x = CDOTALobbyMatchQualityData{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTALobbyMatchQualityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTALobbyMatchQualityData) ProtoMessage() {}

func (x *CDOTALobbyMatchQualityData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTALobbyMatchQualityData.ProtoReflect.Descriptor instead.
func (*CDOTALobbyMatchQualityData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{16}
}

func (x *CDOTALobbyMatchQualityData) GetOverallQuality() uint32 {
	if x != nil && x.OverallQuality != nil {
		return *x.OverallQuality
	}
	return 0
}

func (x *CDOTALobbyMatchQualityData) GetTeamBalance() uint32 {
	if x != nil && x.TeamBalance != nil {
		return *x.TeamBalance
	}
	return 0
}

func (x *CDOTALobbyMatchQualityData) GetMatchSkillRange() uint32 {
	if x != nil && x.MatchSkillRange != nil {
		return *x.MatchSkillRange
	}
	return 0
}

func (x *CDOTALobbyMatchQualityData) GetMatchBehavior() uint32 {
	if x != nil && x.MatchBehavior != nil {
		return *x.MatchBehavior
	}
	return 0
}

type CSODOTALobby struct {
	state                                      protoimpl.MessageState         `protogen:"open.v1"`
	LobbyId                                    *uint64                        `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	AllMembers                                 []*CSODOTALobbyMember          `protobuf:"bytes,120,rep,name=all_members,json=allMembers" json:"all_members,omitempty"`
	MemberIndices                              []uint32                       `protobuf:"varint,121,rep,name=member_indices,json=memberIndices" json:"member_indices,omitempty"`
	LeftMemberIndices                          []uint32                       `protobuf:"varint,122,rep,name=left_member_indices,json=leftMemberIndices" json:"left_member_indices,omitempty"`
	FreeMemberIndices                          []uint32                       `protobuf:"varint,123,rep,name=free_member_indices,json=freeMemberIndices" json:"free_member_indices,omitempty"`
	LeaderId                                   *uint64                        `protobuf:"fixed64,11,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	ServerId                                   *uint64                        `protobuf:"fixed64,6,opt,name=server_id,json=serverId,def=0" json:"server_id,omitempty"`
	GameMode                                   *uint32                        `protobuf:"varint,3,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	PendingInvites                             []uint64                       `protobuf:"fixed64,10,rep,name=pending_invites,json=pendingInvites" json:"pending_invites,omitempty"`
	State                                      *CSODOTALobby_State            `protobuf:"varint,4,opt,name=state,enum=protocol.CSODOTALobby_State,def=0" json:"state,omitempty"`
	Connect                                    *string                        `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	LobbyType                                  *CSODOTALobby_LobbyType        `protobuf:"varint,12,opt,name=lobby_type,json=lobbyType,enum=protocol.CSODOTALobby_LobbyType,def=-1" json:"lobby_type,omitempty"`
	AllowCheats                                *bool                          `protobuf:"varint,13,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	FillWithBots                               *bool                          `protobuf:"varint,14,opt,name=fill_with_bots,json=fillWithBots" json:"fill_with_bots,omitempty"`
	GameName                                   *string                        `protobuf:"bytes,16,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	TeamDetails                                []*CLobbyTeamDetails           `protobuf:"bytes,17,rep,name=team_details,json=teamDetails" json:"team_details,omitempty"`
	TournamentId                               *uint32                        `protobuf:"varint,19,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentGameId                           *uint32                        `protobuf:"varint,20,opt,name=tournament_game_id,json=tournamentGameId" json:"tournament_game_id,omitempty"`
	ServerRegion                               *uint32                        `protobuf:"varint,21,opt,name=server_region,json=serverRegion,def=0" json:"server_region,omitempty"`
	GameState                                  *DOTA_GameState                `protobuf:"varint,22,opt,name=game_state,json=gameState,enum=protocol.DOTA_GameState,def=0" json:"game_state,omitempty"`
	NumSpectators                              *uint32                        `protobuf:"varint,23,opt,name=num_spectators,json=numSpectators" json:"num_spectators,omitempty"`
	Matchgroup                                 *uint32                        `protobuf:"varint,25,opt,name=matchgroup" json:"matchgroup,omitempty"`
	CmPick                                     *DOTA_CM_PICK                  `protobuf:"varint,28,opt,name=cm_pick,json=cmPick,enum=protocol.DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	MatchId                                    *uint64                        `protobuf:"varint,30,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AllowSpectating                            *bool                          `protobuf:"varint,31,opt,name=allow_spectating,json=allowSpectating,def=1" json:"allow_spectating,omitempty"`
	BotDifficultyRadiant                       *DOTABotDifficulty             `protobuf:"varint,36,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=protocol.DOTABotDifficulty,def=3" json:"bot_difficulty_radiant,omitempty"`
	PassKey                                    *string                        `protobuf:"bytes,39,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Leagueid                                   *uint32                        `protobuf:"varint,42,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant                        *uint32                        `protobuf:"varint,43,opt,name=penalty_level_radiant,json=penaltyLevelRadiant,def=0" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire                           *uint32                        `protobuf:"varint,44,opt,name=penalty_level_dire,json=penaltyLevelDire,def=0" json:"penalty_level_dire,omitempty"`
	SeriesType                                 *uint32                        `protobuf:"varint,46,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	RadiantSeriesWins                          *uint32                        `protobuf:"varint,47,opt,name=radiant_series_wins,json=radiantSeriesWins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins                             *uint32                        `protobuf:"varint,48,opt,name=dire_series_wins,json=direSeriesWins" json:"dire_series_wins,omitempty"`
	Allchat                                    *bool                          `protobuf:"varint,51,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay                                *LobbyDotaTVDelay              `protobuf:"varint,53,opt,name=dota_tv_delay,json=dotaTvDelay,enum=protocol.LobbyDotaTVDelay,def=0" json:"dota_tv_delay,omitempty"`
	CustomGameMode                             *string                        `protobuf:"bytes,54,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	CustomMapName                              *string                        `protobuf:"bytes,55,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	CustomDifficulty                           *uint32                        `protobuf:"varint,56,opt,name=custom_difficulty,json=customDifficulty" json:"custom_difficulty,omitempty"`
	Lan                                        *bool                          `protobuf:"varint,57,opt,name=lan" json:"lan,omitempty"`
	BroadcastChannelInfo                       []*CLobbyBroadcastChannelInfo  `protobuf:"bytes,58,rep,name=broadcast_channel_info,json=broadcastChannelInfo" json:"broadcast_channel_info,omitempty"`
	FirstLeaverAccountid                       *uint32                        `protobuf:"varint,59,opt,name=first_leaver_accountid,json=firstLeaverAccountid" json:"first_leaver_accountid,omitempty"`
	SeriesId                                   *uint32                        `protobuf:"varint,60,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	LowPriority                                *bool                          `protobuf:"varint,61,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	ExtraMessages                              []*CSODOTALobby_CExtraMsg      `protobuf:"bytes,62,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	FirstBloodHappened                         *bool                          `protobuf:"varint,65,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	MatchOutcome                               *EMatchOutcome                 `protobuf:"varint,70,opt,name=match_outcome,json=matchOutcome,enum=protocol.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	MassDisconnect                             *bool                          `protobuf:"varint,67,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	CustomGameId                               *uint64                        `protobuf:"varint,68,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	CustomMinPlayers                           *uint32                        `protobuf:"varint,71,opt,name=custom_min_players,json=customMinPlayers" json:"custom_min_players,omitempty"`
	CustomMaxPlayers                           *uint32                        `protobuf:"varint,72,opt,name=custom_max_players,json=customMaxPlayers" json:"custom_max_players,omitempty"`
	Visibility                                 *DOTALobbyVisibility           `protobuf:"varint,75,opt,name=visibility,enum=protocol.DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc                              *uint64                        `protobuf:"fixed64,76,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameAutoCreatedLobby                 *bool                          `protobuf:"varint,77,opt,name=custom_game_auto_created_lobby,json=customGameAutoCreatedLobby" json:"custom_game_auto_created_lobby,omitempty"`
	CustomGameTimestamp                        *uint32                        `protobuf:"fixed32,80,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	PreviousSeriesMatches                      []uint64                       `protobuf:"varint,81,rep,name=previous_series_matches,json=previousSeriesMatches" json:"previous_series_matches,omitempty"`
	PreviousMatchOverride                      *uint64                        `protobuf:"varint,82,opt,name=previous_match_override,json=previousMatchOverride" json:"previous_match_override,omitempty"`
	GameStartTime                              *uint32                        `protobuf:"varint,87,opt,name=game_start_time,json=gameStartTime" json:"game_start_time,omitempty"`
	PauseSetting                               *LobbyDotaPauseSetting         `protobuf:"varint,88,opt,name=pause_setting,json=pauseSetting,enum=protocol.LobbyDotaPauseSetting,def=0" json:"pause_setting,omitempty"`
	WeekendTourneyDivisionId                   *uint32                        `protobuf:"varint,90,opt,name=weekend_tourney_division_id,json=weekendTourneyDivisionId" json:"weekend_tourney_division_id,omitempty"`
	WeekendTourneySkillLevel                   *uint32                        `protobuf:"varint,91,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound                 *uint32                        `protobuf:"varint,92,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
	BotDifficultyDire                          *DOTABotDifficulty             `protobuf:"varint,93,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=protocol.DOTABotDifficulty,def=3" json:"bot_difficulty_dire,omitempty"`
	BotRadiant                                 *uint64                        `protobuf:"varint,94,opt,name=bot_radiant,json=botRadiant" json:"bot_radiant,omitempty"`
	BotDire                                    *uint64                        `protobuf:"varint,95,opt,name=bot_dire,json=botDire" json:"bot_dire,omitempty"`
	EventProgressionEnabled                    []EEvent                       `protobuf:"varint,96,rep,name=event_progression_enabled,json=eventProgressionEnabled,enum=protocol.EEvent" json:"event_progression_enabled,omitempty"`
	SelectionPriorityRules                     *DOTASelectionPriorityRules    `protobuf:"varint,97,opt,name=selection_priority_rules,json=selectionPriorityRules,enum=protocol.DOTASelectionPriorityRules,def=0" json:"selection_priority_rules,omitempty"`
	SeriesPreviousSelectionPriorityTeamId      *uint32                        `protobuf:"varint,98,opt,name=series_previous_selection_priority_team_id,json=seriesPreviousSelectionPriorityTeamId" json:"series_previous_selection_priority_team_id,omitempty"`
	SeriesCurrentSelectionPriorityTeamId       *uint32                        `protobuf:"varint,99,opt,name=series_current_selection_priority_team_id,json=seriesCurrentSelectionPriorityTeamId" json:"series_current_selection_priority_team_id,omitempty"`
	SeriesCurrentPriorityTeamChoice            *DOTASelectionPriorityChoice   `protobuf:"varint,100,opt,name=series_current_priority_team_choice,json=seriesCurrentPriorityTeamChoice,enum=protocol.DOTASelectionPriorityChoice,def=0" json:"series_current_priority_team_choice,omitempty"`
	SeriesCurrentNonPriorityTeamChoice         *DOTASelectionPriorityChoice   `protobuf:"varint,101,opt,name=series_current_non_priority_team_choice,json=seriesCurrentNonPriorityTeamChoice,enum=protocol.DOTASelectionPriorityChoice,def=0" json:"series_current_non_priority_team_choice,omitempty"`
	SeriesCurrentSelectionPriorityUsedCoinToss *bool                          `protobuf:"varint,102,opt,name=series_current_selection_priority_used_coin_toss,json=seriesCurrentSelectionPriorityUsedCoinToss" json:"series_current_selection_priority_used_coin_toss,omitempty"`
	CurrentPrimaryEvent                        *EEvent                        `protobuf:"varint,103,opt,name=current_primary_event,json=currentPrimaryEvent,enum=protocol.EEvent,def=0" json:"current_primary_event,omitempty"`
	EmergencyDisabledHeroIds                   []int32                        `protobuf:"varint,105,rep,name=emergency_disabled_hero_ids,json=emergencyDisabledHeroIds" json:"emergency_disabled_hero_ids,omitempty"`
	CustomGamePrivateKey                       *uint64                        `protobuf:"fixed64,106,opt,name=custom_game_private_key,json=customGamePrivateKey" json:"custom_game_private_key,omitempty"`
	CustomGamePenalties                        *bool                          `protobuf:"varint,107,opt,name=custom_game_penalties,json=customGamePenalties" json:"custom_game_penalties,omitempty"`
	LanHostPingLocation                        *string                        `protobuf:"bytes,109,opt,name=lan_host_ping_location,json=lanHostPingLocation" json:"lan_host_ping_location,omitempty"`
	LeagueNodeId                               *uint32                        `protobuf:"varint,110,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	MatchDuration                              *uint32                        `protobuf:"varint,111,opt,name=match_duration,json=matchDuration" json:"match_duration,omitempty"`
	LeaguePhase                                *uint32                        `protobuf:"varint,113,opt,name=league_phase,json=leaguePhase" json:"league_phase,omitempty"`
	ExperimentalGameplayEnabled                *bool                          `protobuf:"varint,116,opt,name=experimental_gameplay_enabled,json=experimentalGameplayEnabled" json:"experimental_gameplay_enabled,omitempty"`
	GuildChallenges                            []*CLobbyGuildChallenge        `protobuf:"bytes,117,rep,name=guild_challenges,json=guildChallenges" json:"guild_challenges,omitempty"`
	GuildDetails                               []*CLobbyGuildDetails          `protobuf:"bytes,118,rep,name=guild_details,json=guildDetails" json:"guild_details,omitempty"`
	RequestedHeroIds                           []int32                        `protobuf:"varint,124,rep,name=requested_hero_ids,json=requestedHeroIds" json:"requested_hero_ids,omitempty"`
	CoachFriendRequests                        []*CMsgLobbyCoachFriendRequest `protobuf:"bytes,125,rep,name=coach_friend_requests,json=coachFriendRequests" json:"coach_friend_requests,omitempty"`
	IsInSteamChina                             *bool                          `protobuf:"varint,126,opt,name=is_in_steam_china,json=isInSteamChina" json:"is_in_steam_china,omitempty"`
	WithScenarioSave                           *bool                          `protobuf:"varint,127,opt,name=with_scenario_save,json=withScenarioSave" json:"with_scenario_save,omitempty"`
	LobbyCreationTime                          *uint32                        `protobuf:"varint,128,opt,name=lobby_creation_time,json=lobbyCreationTime" json:"lobby_creation_time,omitempty"`
	EventGameDefinition                        *string                        `protobuf:"bytes,129,opt,name=event_game_definition,json=eventGameDefinition" json:"event_game_definition,omitempty"`
	MatchQualityData                           *CDOTALobbyMatchQualityData    `protobuf:"bytes,131,opt,name=match_quality_data,json=matchQualityData" json:"match_quality_data,omitempty"`
	RequestedHeroTeams                         []int32                        `protobuf:"varint,132,rep,name=requested_hero_teams,json=requestedHeroTeams" json:"requested_hero_teams,omitempty"`
	unknownFields                              protoimpl.UnknownFields
	sizeCache                                  protoimpl.SizeCache
}

// Default values for CSODOTALobby fields.
const (
	Default_CSODOTALobby_ServerId                           = uint64(0)
	Default_CSODOTALobby_State                              = CSODOTALobby_UI
	Default_CSODOTALobby_LobbyType                          = CSODOTALobby_INVALID
	Default_CSODOTALobby_ServerRegion                       = uint32(0)
	Default_CSODOTALobby_GameState                          = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
	Default_CSODOTALobby_CmPick                             = DOTA_CM_PICK_DOTA_CM_RANDOM
	Default_CSODOTALobby_AllowSpectating                    = bool(true)
	Default_CSODOTALobby_BotDifficultyRadiant               = DOTABotDifficulty_BOT_DIFFICULTY_HARD
	Default_CSODOTALobby_PenaltyLevelRadiant                = uint32(0)
	Default_CSODOTALobby_PenaltyLevelDire                   = uint32(0)
	Default_CSODOTALobby_Allchat                            = bool(false)
	Default_CSODOTALobby_DotaTvDelay                        = LobbyDotaTVDelay_LobbyDotaTV_10
	Default_CSODOTALobby_MatchOutcome                       = EMatchOutcome_k_EMatchOutcome_Unknown
	Default_CSODOTALobby_Visibility                         = DOTALobbyVisibility_DOTALobbyVisibility_Public
	Default_CSODOTALobby_PauseSetting                       = LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited
	Default_CSODOTALobby_BotDifficultyDire                  = DOTABotDifficulty_BOT_DIFFICULTY_HARD
	Default_CSODOTALobby_SelectionPriorityRules             = DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual
	Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice    = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
	Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
	Default_CSODOTALobby_CurrentPrimaryEvent                = EEvent_EVENT_ID_NONE
)

func (x *CSODOTALobby) Reset() {
	*x = CSODOTALobby{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTALobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobby) ProtoMessage() {}

func (x *CSODOTALobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobby.ProtoReflect.Descriptor instead.
func (*CSODOTALobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{17}
}

func (x *CSODOTALobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSODOTALobby) GetAllMembers() []*CSODOTALobbyMember {
	if x != nil {
		return x.AllMembers
	}
	return nil
}

func (x *CSODOTALobby) GetMemberIndices() []uint32 {
	if x != nil {
		return x.MemberIndices
	}
	return nil
}

func (x *CSODOTALobby) GetLeftMemberIndices() []uint32 {
	if x != nil {
		return x.LeftMemberIndices
	}
	return nil
}

func (x *CSODOTALobby) GetFreeMemberIndices() []uint32 {
	if x != nil {
		return x.FreeMemberIndices
	}
	return nil
}

func (x *CSODOTALobby) GetLeaderId() uint64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *CSODOTALobby) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return Default_CSODOTALobby_ServerId
}

func (x *CSODOTALobby) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CSODOTALobby) GetPendingInvites() []uint64 {
	if x != nil {
		return x.PendingInvites
	}
	return nil
}

func (x *CSODOTALobby) GetState() CSODOTALobby_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CSODOTALobby_State
}

func (x *CSODOTALobby) GetConnect() string {
	if x != nil && x.Connect != nil {
		return *x.Connect
	}
	return ""
}

func (x *CSODOTALobby) GetLobbyType() CSODOTALobby_LobbyType {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return Default_CSODOTALobby_LobbyType
}

func (x *CSODOTALobby) GetAllowCheats() bool {
	if x != nil && x.AllowCheats != nil {
		return *x.AllowCheats
	}
	return false
}

func (x *CSODOTALobby) GetFillWithBots() bool {
	if x != nil && x.FillWithBots != nil {
		return *x.FillWithBots
	}
	return false
}

func (x *CSODOTALobby) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *CSODOTALobby) GetTeamDetails() []*CLobbyTeamDetails {
	if x != nil {
		return x.TeamDetails
	}
	return nil
}

func (x *CSODOTALobby) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CSODOTALobby) GetTournamentGameId() uint32 {
	if x != nil && x.TournamentGameId != nil {
		return *x.TournamentGameId
	}
	return 0
}

func (x *CSODOTALobby) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return Default_CSODOTALobby_ServerRegion
}

func (x *CSODOTALobby) GetGameState() DOTA_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CSODOTALobby_GameState
}

func (x *CSODOTALobby) GetNumSpectators() uint32 {
	if x != nil && x.NumSpectators != nil {
		return *x.NumSpectators
	}
	return 0
}

func (x *CSODOTALobby) GetMatchgroup() uint32 {
	if x != nil && x.Matchgroup != nil {
		return *x.Matchgroup
	}
	return 0
}

func (x *CSODOTALobby) GetCmPick() DOTA_CM_PICK {
	if x != nil && x.CmPick != nil {
		return *x.CmPick
	}
	return Default_CSODOTALobby_CmPick
}

func (x *CSODOTALobby) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSODOTALobby) GetAllowSpectating() bool {
	if x != nil && x.AllowSpectating != nil {
		return *x.AllowSpectating
	}
	return Default_CSODOTALobby_AllowSpectating
}

func (x *CSODOTALobby) GetBotDifficultyRadiant() DOTABotDifficulty {
	if x != nil && x.BotDifficultyRadiant != nil {
		return *x.BotDifficultyRadiant
	}
	return Default_CSODOTALobby_BotDifficultyRadiant
}

func (x *CSODOTALobby) GetPassKey() string {
	if x != nil && x.PassKey != nil {
		return *x.PassKey
	}
	return ""
}

func (x *CSODOTALobby) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

func (x *CSODOTALobby) GetPenaltyLevelRadiant() uint32 {
	if x != nil && x.PenaltyLevelRadiant != nil {
		return *x.PenaltyLevelRadiant
	}
	return Default_CSODOTALobby_PenaltyLevelRadiant
}

func (x *CSODOTALobby) GetPenaltyLevelDire() uint32 {
	if x != nil && x.PenaltyLevelDire != nil {
		return *x.PenaltyLevelDire
	}
	return Default_CSODOTALobby_PenaltyLevelDire
}

func (x *CSODOTALobby) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CSODOTALobby) GetRadiantSeriesWins() uint32 {
	if x != nil && x.RadiantSeriesWins != nil {
		return *x.RadiantSeriesWins
	}
	return 0
}

func (x *CSODOTALobby) GetDireSeriesWins() uint32 {
	if x != nil && x.DireSeriesWins != nil {
		return *x.DireSeriesWins
	}
	return 0
}

func (x *CSODOTALobby) GetAllchat() bool {
	if x != nil && x.Allchat != nil {
		return *x.Allchat
	}
	return Default_CSODOTALobby_Allchat
}

func (x *CSODOTALobby) GetDotaTvDelay() LobbyDotaTVDelay {
	if x != nil && x.DotaTvDelay != nil {
		return *x.DotaTvDelay
	}
	return Default_CSODOTALobby_DotaTvDelay
}

func (x *CSODOTALobby) GetCustomGameMode() string {
	if x != nil && x.CustomGameMode != nil {
		return *x.CustomGameMode
	}
	return ""
}

func (x *CSODOTALobby) GetCustomMapName() string {
	if x != nil && x.CustomMapName != nil {
		return *x.CustomMapName
	}
	return ""
}

func (x *CSODOTALobby) GetCustomDifficulty() uint32 {
	if x != nil && x.CustomDifficulty != nil {
		return *x.CustomDifficulty
	}
	return 0
}

func (x *CSODOTALobby) GetLan() bool {
	if x != nil && x.Lan != nil {
		return *x.Lan
	}
	return false
}

func (x *CSODOTALobby) GetBroadcastChannelInfo() []*CLobbyBroadcastChannelInfo {
	if x != nil {
		return x.BroadcastChannelInfo
	}
	return nil
}

func (x *CSODOTALobby) GetFirstLeaverAccountid() uint32 {
	if x != nil && x.FirstLeaverAccountid != nil {
		return *x.FirstLeaverAccountid
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CSODOTALobby) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CSODOTALobby) GetExtraMessages() []*CSODOTALobby_CExtraMsg {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CSODOTALobby) GetFirstBloodHappened() bool {
	if x != nil && x.FirstBloodHappened != nil {
		return *x.FirstBloodHappened
	}
	return false
}

func (x *CSODOTALobby) GetMatchOutcome() EMatchOutcome {
	if x != nil && x.MatchOutcome != nil {
		return *x.MatchOutcome
	}
	return Default_CSODOTALobby_MatchOutcome
}

func (x *CSODOTALobby) GetMassDisconnect() bool {
	if x != nil && x.MassDisconnect != nil {
		return *x.MassDisconnect
	}
	return false
}

func (x *CSODOTALobby) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CSODOTALobby) GetCustomMinPlayers() uint32 {
	if x != nil && x.CustomMinPlayers != nil {
		return *x.CustomMinPlayers
	}
	return 0
}

func (x *CSODOTALobby) GetCustomMaxPlayers() uint32 {
	if x != nil && x.CustomMaxPlayers != nil {
		return *x.CustomMaxPlayers
	}
	return 0
}

func (x *CSODOTALobby) GetVisibility() DOTALobbyVisibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Default_CSODOTALobby_Visibility
}

func (x *CSODOTALobby) GetCustomGameCrc() uint64 {
	if x != nil && x.CustomGameCrc != nil {
		return *x.CustomGameCrc
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGameAutoCreatedLobby() bool {
	if x != nil && x.CustomGameAutoCreatedLobby != nil {
		return *x.CustomGameAutoCreatedLobby
	}
	return false
}

func (x *CSODOTALobby) GetCustomGameTimestamp() uint32 {
	if x != nil && x.CustomGameTimestamp != nil {
		return *x.CustomGameTimestamp
	}
	return 0
}

func (x *CSODOTALobby) GetPreviousSeriesMatches() []uint64 {
	if x != nil {
		return x.PreviousSeriesMatches
	}
	return nil
}

func (x *CSODOTALobby) GetPreviousMatchOverride() uint64 {
	if x != nil && x.PreviousMatchOverride != nil {
		return *x.PreviousMatchOverride
	}
	return 0
}

func (x *CSODOTALobby) GetGameStartTime() uint32 {
	if x != nil && x.GameStartTime != nil {
		return *x.GameStartTime
	}
	return 0
}

func (x *CSODOTALobby) GetPauseSetting() LobbyDotaPauseSetting {
	if x != nil && x.PauseSetting != nil {
		return *x.PauseSetting
	}
	return Default_CSODOTALobby_PauseSetting
}

func (x *CSODOTALobby) GetWeekendTourneyDivisionId() uint32 {
	if x != nil && x.WeekendTourneyDivisionId != nil {
		return *x.WeekendTourneyDivisionId
	}
	return 0
}

func (x *CSODOTALobby) GetWeekendTourneySkillLevel() uint32 {
	if x != nil && x.WeekendTourneySkillLevel != nil {
		return *x.WeekendTourneySkillLevel
	}
	return 0
}

func (x *CSODOTALobby) GetWeekendTourneyBracketRound() uint32 {
	if x != nil && x.WeekendTourneyBracketRound != nil {
		return *x.WeekendTourneyBracketRound
	}
	return 0
}

func (x *CSODOTALobby) GetBotDifficultyDire() DOTABotDifficulty {
	if x != nil && x.BotDifficultyDire != nil {
		return *x.BotDifficultyDire
	}
	return Default_CSODOTALobby_BotDifficultyDire
}

func (x *CSODOTALobby) GetBotRadiant() uint64 {
	if x != nil && x.BotRadiant != nil {
		return *x.BotRadiant
	}
	return 0
}

func (x *CSODOTALobby) GetBotDire() uint64 {
	if x != nil && x.BotDire != nil {
		return *x.BotDire
	}
	return 0
}

func (x *CSODOTALobby) GetEventProgressionEnabled() []EEvent {
	if x != nil {
		return x.EventProgressionEnabled
	}
	return nil
}

func (x *CSODOTALobby) GetSelectionPriorityRules() DOTASelectionPriorityRules {
	if x != nil && x.SelectionPriorityRules != nil {
		return *x.SelectionPriorityRules
	}
	return Default_CSODOTALobby_SelectionPriorityRules
}

func (x *CSODOTALobby) GetSeriesPreviousSelectionPriorityTeamId() uint32 {
	if x != nil && x.SeriesPreviousSelectionPriorityTeamId != nil {
		return *x.SeriesPreviousSelectionPriorityTeamId
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesCurrentSelectionPriorityTeamId() uint32 {
	if x != nil && x.SeriesCurrentSelectionPriorityTeamId != nil {
		return *x.SeriesCurrentSelectionPriorityTeamId
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesCurrentPriorityTeamChoice() DOTASelectionPriorityChoice {
	if x != nil && x.SeriesCurrentPriorityTeamChoice != nil {
		return *x.SeriesCurrentPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice
}

func (x *CSODOTALobby) GetSeriesCurrentNonPriorityTeamChoice() DOTASelectionPriorityChoice {
	if x != nil && x.SeriesCurrentNonPriorityTeamChoice != nil {
		return *x.SeriesCurrentNonPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice
}

func (x *CSODOTALobby) GetSeriesCurrentSelectionPriorityUsedCoinToss() bool {
	if x != nil && x.SeriesCurrentSelectionPriorityUsedCoinToss != nil {
		return *x.SeriesCurrentSelectionPriorityUsedCoinToss
	}
	return false
}

func (x *CSODOTALobby) GetCurrentPrimaryEvent() EEvent {
	if x != nil && x.CurrentPrimaryEvent != nil {
		return *x.CurrentPrimaryEvent
	}
	return Default_CSODOTALobby_CurrentPrimaryEvent
}

func (x *CSODOTALobby) GetEmergencyDisabledHeroIds() []int32 {
	if x != nil {
		return x.EmergencyDisabledHeroIds
	}
	return nil
}

func (x *CSODOTALobby) GetCustomGamePrivateKey() uint64 {
	if x != nil && x.CustomGamePrivateKey != nil {
		return *x.CustomGamePrivateKey
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGamePenalties() bool {
	if x != nil && x.CustomGamePenalties != nil {
		return *x.CustomGamePenalties
	}
	return false
}

func (x *CSODOTALobby) GetLanHostPingLocation() string {
	if x != nil && x.LanHostPingLocation != nil {
		return *x.LanHostPingLocation
	}
	return ""
}

func (x *CSODOTALobby) GetLeagueNodeId() uint32 {
	if x != nil && x.LeagueNodeId != nil {
		return *x.LeagueNodeId
	}
	return 0
}

func (x *CSODOTALobby) GetMatchDuration() uint32 {
	if x != nil && x.MatchDuration != nil {
		return *x.MatchDuration
	}
	return 0
}

func (x *CSODOTALobby) GetLeaguePhase() uint32 {
	if x != nil && x.LeaguePhase != nil {
		return *x.LeaguePhase
	}
	return 0
}

func (x *CSODOTALobby) GetExperimentalGameplayEnabled() bool {
	if x != nil && x.ExperimentalGameplayEnabled != nil {
		return *x.ExperimentalGameplayEnabled
	}
	return false
}

func (x *CSODOTALobby) GetGuildChallenges() []*CLobbyGuildChallenge {
	if x != nil {
		return x.GuildChallenges
	}
	return nil
}

func (x *CSODOTALobby) GetGuildDetails() []*CLobbyGuildDetails {
	if x != nil {
		return x.GuildDetails
	}
	return nil
}

func (x *CSODOTALobby) GetRequestedHeroIds() []int32 {
	if x != nil {
		return x.RequestedHeroIds
	}
	return nil
}

func (x *CSODOTALobby) GetCoachFriendRequests() []*CMsgLobbyCoachFriendRequest {
	if x != nil {
		return x.CoachFriendRequests
	}
	return nil
}

func (x *CSODOTALobby) GetIsInSteamChina() bool {
	if x != nil && x.IsInSteamChina != nil {
		return *x.IsInSteamChina
	}
	return false
}

func (x *CSODOTALobby) GetWithScenarioSave() bool {
	if x != nil && x.WithScenarioSave != nil {
		return *x.WithScenarioSave
	}
	return false
}

func (x *CSODOTALobby) GetLobbyCreationTime() uint32 {
	if x != nil && x.LobbyCreationTime != nil {
		return *x.LobbyCreationTime
	}
	return 0
}

func (x *CSODOTALobby) GetEventGameDefinition() string {
	if x != nil && x.EventGameDefinition != nil {
		return *x.EventGameDefinition
	}
	return ""
}

func (x *CSODOTALobby) GetMatchQualityData() *CDOTALobbyMatchQualityData {
	if x != nil {
		return x.MatchQualityData
	}
	return nil
}

func (x *CSODOTALobby) GetRequestedHeroTeams() []int32 {
	if x != nil {
		return x.RequestedHeroTeams
	}
	return nil
}

type CSODOTAServerLobby struct {
	state                protoimpl.MessageState      `protogen:"open.v1"`
	AllMembers           []*CSODOTAServerLobbyMember `protobuf:"bytes,1,rep,name=all_members,json=allMembers" json:"all_members,omitempty"`
	ExtraStartupMessages []*CSODOTALobby_CExtraMsg   `protobuf:"bytes,2,rep,name=extra_startup_messages,json=extraStartupMessages" json:"extra_startup_messages,omitempty"`
	BroadcastActive      *bool                       `protobuf:"varint,3,opt,name=broadcast_active,json=broadcastActive" json:"broadcast_active,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CSODOTAServerLobby) Reset() {
	*x = CSODOTAServerLobby{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTAServerLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAServerLobby) ProtoMessage() {}

func (x *CSODOTAServerLobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAServerLobby.ProtoReflect.Descriptor instead.
func (*CSODOTAServerLobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{18}
}

func (x *CSODOTAServerLobby) GetAllMembers() []*CSODOTAServerLobbyMember {
	if x != nil {
		return x.AllMembers
	}
	return nil
}

func (x *CSODOTAServerLobby) GetExtraStartupMessages() []*CSODOTALobby_CExtraMsg {
	if x != nil {
		return x.ExtraStartupMessages
	}
	return nil
}

func (x *CSODOTAServerLobby) GetBroadcastActive() bool {
	if x != nil && x.BroadcastActive != nil {
		return *x.BroadcastActive
	}
	return false
}

type CSODOTAStaticLobby struct {
	state               protoimpl.MessageState      `protogen:"open.v1"`
	AllMembers          []*CSODOTAStaticLobbyMember `protobuf:"bytes,1,rep,name=all_members,json=allMembers" json:"all_members,omitempty"`
	IsPlayerDraft       *bool                       `protobuf:"varint,2,opt,name=is_player_draft,json=isPlayerDraft" json:"is_player_draft,omitempty"`
	IsLastMatchInSeries *bool                       `protobuf:"varint,3,opt,name=is_last_match_in_series,json=isLastMatchInSeries" json:"is_last_match_in_series,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CSODOTAStaticLobby) Reset() {
	*x = CSODOTAStaticLobby{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTAStaticLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAStaticLobby) ProtoMessage() {}

func (x *CSODOTAStaticLobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAStaticLobby.ProtoReflect.Descriptor instead.
func (*CSODOTAStaticLobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{19}
}

func (x *CSODOTAStaticLobby) GetAllMembers() []*CSODOTAStaticLobbyMember {
	if x != nil {
		return x.AllMembers
	}
	return nil
}

func (x *CSODOTAStaticLobby) GetIsPlayerDraft() bool {
	if x != nil && x.IsPlayerDraft != nil {
		return *x.IsPlayerDraft
	}
	return false
}

func (x *CSODOTAStaticLobby) GetIsLastMatchInSeries() bool {
	if x != nil && x.IsLastMatchInSeries != nil {
		return *x.IsLastMatchInSeries
	}
	return false
}

type CSODOTAServerStaticLobby struct {
	state                       protoimpl.MessageState            `protogen:"open.v1"`
	AllMembers                  []*CSODOTAServerStaticLobbyMember `protobuf:"bytes,1,rep,name=all_members,json=allMembers" json:"all_members,omitempty"`
	PostPatchStrategyTimeBuffer *float32                          `protobuf:"fixed32,2,opt,name=post_patch_strategy_time_buffer,json=postPatchStrategyTimeBuffer" json:"post_patch_strategy_time_buffer,omitempty"`
	LobbyEventPoints            []*CMsgLobbyEventPoints           `protobuf:"bytes,3,rep,name=lobby_event_points,json=lobbyEventPoints" json:"lobby_event_points,omitempty"`
	BroadcastUrl                *string                           `protobuf:"bytes,4,opt,name=broadcast_url,json=broadcastUrl" json:"broadcast_url,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CSODOTAServerStaticLobby) Reset() {
	*x = CSODOTAServerStaticLobby{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTAServerStaticLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAServerStaticLobby) ProtoMessage() {}

func (x *CSODOTAServerStaticLobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAServerStaticLobby.ProtoReflect.Descriptor instead.
func (*CSODOTAServerStaticLobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{20}
}

func (x *CSODOTAServerStaticLobby) GetAllMembers() []*CSODOTAServerStaticLobbyMember {
	if x != nil {
		return x.AllMembers
	}
	return nil
}

func (x *CSODOTAServerStaticLobby) GetPostPatchStrategyTimeBuffer() float32 {
	if x != nil && x.PostPatchStrategyTimeBuffer != nil {
		return *x.PostPatchStrategyTimeBuffer
	}
	return 0
}

func (x *CSODOTAServerStaticLobby) GetLobbyEventPoints() []*CMsgLobbyEventPoints {
	if x != nil {
		return x.LobbyEventPoints
	}
	return nil
}

func (x *CSODOTAServerStaticLobby) GetBroadcastUrl() string {
	if x != nil && x.BroadcastUrl != nil {
		return *x.BroadcastUrl
	}
	return ""
}

type CMsgAdditionalLobbyStartupAccountData struct {
	state                          protoimpl.MessageState                                         `protogen:"open.v1"`
	AccountId                      *uint32                                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlusData                       *CMsgLobbyPlayerPlusSubscriptionData                           `protobuf:"bytes,2,opt,name=plus_data,json=plusData" json:"plus_data,omitempty"`
	UnlockedChatWheelMessageRanges []*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange `protobuf:"bytes,3,rep,name=unlocked_chat_wheel_message_ranges,json=unlockedChatWheelMessageRanges" json:"unlocked_chat_wheel_message_ranges,omitempty"`
	UnlockedPingWheelMessageRanges []*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange `protobuf:"bytes,4,rep,name=unlocked_ping_wheel_message_ranges,json=unlockedPingWheelMessageRanges" json:"unlocked_ping_wheel_message_ranges,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CMsgAdditionalLobbyStartupAccountData) Reset() {
	*x = CMsgAdditionalLobbyStartupAccountData{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgAdditionalLobbyStartupAccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAdditionalLobbyStartupAccountData) ProtoMessage() {}

func (x *CMsgAdditionalLobbyStartupAccountData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAdditionalLobbyStartupAccountData.ProtoReflect.Descriptor instead.
func (*CMsgAdditionalLobbyStartupAccountData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgAdditionalLobbyStartupAccountData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgAdditionalLobbyStartupAccountData) GetPlusData() *CMsgLobbyPlayerPlusSubscriptionData {
	if x != nil {
		return x.PlusData
	}
	return nil
}

func (x *CMsgAdditionalLobbyStartupAccountData) GetUnlockedChatWheelMessageRanges() []*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange {
	if x != nil {
		return x.UnlockedChatWheelMessageRanges
	}
	return nil
}

func (x *CMsgAdditionalLobbyStartupAccountData) GetUnlockedPingWheelMessageRanges() []*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange {
	if x != nil {
		return x.UnlockedPingWheelMessageRanges
	}
	return nil
}

type CMsgLobbyInitializationComplete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgLobbyInitializationComplete) Reset() {
	*x = CMsgLobbyInitializationComplete{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLobbyInitializationComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyInitializationComplete) ProtoMessage() {}

func (x *CMsgLobbyInitializationComplete) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyInitializationComplete.ProtoReflect.Descriptor instead.
func (*CMsgLobbyInitializationComplete) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{22}
}

type CMsgLobbyPlaytestDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Json          *string                `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgLobbyPlaytestDetails) Reset() {
	*x = CMsgLobbyPlaytestDetails{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLobbyPlaytestDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyPlaytestDetails) ProtoMessage() {}

func (x *CMsgLobbyPlaytestDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyPlaytestDetails.ProtoReflect.Descriptor instead.
func (*CMsgLobbyPlaytestDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgLobbyPlaytestDetails) GetJson() string {
	if x != nil && x.Json != nil {
		return *x.Json
	}
	return ""
}

type CMsgLocalServerGuildData struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	GuildId               *uint32                `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId               *EEvent                `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	GuildPoints           *uint32                `protobuf:"varint,3,opt,name=guild_points,json=guildPoints" json:"guild_points,omitempty"`
	GuildLogo             *uint64                `protobuf:"varint,4,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	GuildPrimaryColor     *uint32                `protobuf:"varint,5,opt,name=guild_primary_color,json=guildPrimaryColor" json:"guild_primary_color,omitempty"`
	GuildSecondaryColor   *uint32                `protobuf:"varint,6,opt,name=guild_secondary_color,json=guildSecondaryColor" json:"guild_secondary_color,omitempty"`
	GuildPattern          *uint32                `protobuf:"varint,7,opt,name=guild_pattern,json=guildPattern" json:"guild_pattern,omitempty"`
	GuildFlags            *uint32                `protobuf:"varint,8,opt,name=guild_flags,json=guildFlags" json:"guild_flags,omitempty"`
	GuildWeeklyPercentile *uint32                `protobuf:"varint,9,opt,name=guild_weekly_percentile,json=guildWeeklyPercentile" json:"guild_weekly_percentile,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for CMsgLocalServerGuildData fields.
const (
	Default_CMsgLocalServerGuildData_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgLocalServerGuildData) Reset() {
	*x = CMsgLocalServerGuildData{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLocalServerGuildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLocalServerGuildData) ProtoMessage() {}

func (x *CMsgLocalServerGuildData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLocalServerGuildData.ProtoReflect.Descriptor instead.
func (*CMsgLocalServerGuildData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgLocalServerGuildData) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgLocalServerGuildData_EventId
}

func (x *CMsgLocalServerGuildData) GetGuildPoints() uint32 {
	if x != nil && x.GuildPoints != nil {
		return *x.GuildPoints
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildLogo() uint64 {
	if x != nil && x.GuildLogo != nil {
		return *x.GuildLogo
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildPrimaryColor() uint32 {
	if x != nil && x.GuildPrimaryColor != nil {
		return *x.GuildPrimaryColor
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildSecondaryColor() uint32 {
	if x != nil && x.GuildSecondaryColor != nil {
		return *x.GuildSecondaryColor
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildPattern() uint32 {
	if x != nil && x.GuildPattern != nil {
		return *x.GuildPattern
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildFlags() uint32 {
	if x != nil && x.GuildFlags != nil {
		return *x.GuildFlags
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildWeeklyPercentile() uint32 {
	if x != nil && x.GuildWeeklyPercentile != nil {
		return *x.GuildWeeklyPercentile
	}
	return 0
}

type CMsgLocalServerFakeLobbyData struct {
	state               protoimpl.MessageState                 `protogen:"open.v1"`
	AccountId           *uint32                                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventPoints         []*CMsgLobbyEventPoints                `protobuf:"bytes,2,rep,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	IsPlusSubscriber    *bool                                  `protobuf:"varint,3,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	PrimaryEventId      *uint32                                `protobuf:"varint,4,opt,name=primary_event_id,json=primaryEventId" json:"primary_event_id,omitempty"`
	FavoriteTeam        *uint32                                `protobuf:"varint,5,opt,name=favorite_team,json=favoriteTeam" json:"favorite_team,omitempty"`
	FavoriteTeamQuality *uint32                                `protobuf:"varint,6,opt,name=favorite_team_quality,json=favoriteTeamQuality" json:"favorite_team_quality,omitempty"`
	GuildInfo           *CMsgLocalServerGuildData              `protobuf:"bytes,7,opt,name=guild_info,json=guildInfo" json:"guild_info,omitempty"`
	TeleportFxLevel     *uint32                                `protobuf:"varint,8,opt,name=teleport_fx_level,json=teleportFxLevel" json:"teleport_fx_level,omitempty"`
	AdditionalData      *CMsgAdditionalLobbyStartupAccountData `protobuf:"bytes,9,opt,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgLocalServerFakeLobbyData) Reset() {
	*x = CMsgLocalServerFakeLobbyData{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLocalServerFakeLobbyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLocalServerFakeLobbyData) ProtoMessage() {}

func (x *CMsgLocalServerFakeLobbyData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLocalServerFakeLobbyData.ProtoReflect.Descriptor instead.
func (*CMsgLocalServerFakeLobbyData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgLocalServerFakeLobbyData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgLocalServerFakeLobbyData) GetEventPoints() []*CMsgLobbyEventPoints {
	if x != nil {
		return x.EventPoints
	}
	return nil
}

func (x *CMsgLocalServerFakeLobbyData) GetIsPlusSubscriber() bool {
	if x != nil && x.IsPlusSubscriber != nil {
		return *x.IsPlusSubscriber
	}
	return false
}

func (x *CMsgLocalServerFakeLobbyData) GetPrimaryEventId() uint32 {
	if x != nil && x.PrimaryEventId != nil {
		return *x.PrimaryEventId
	}
	return 0
}

func (x *CMsgLocalServerFakeLobbyData) GetFavoriteTeam() uint32 {
	if x != nil && x.FavoriteTeam != nil {
		return *x.FavoriteTeam
	}
	return 0
}

func (x *CMsgLocalServerFakeLobbyData) GetFavoriteTeamQuality() uint32 {
	if x != nil && x.FavoriteTeamQuality != nil {
		return *x.FavoriteTeamQuality
	}
	return 0
}

func (x *CMsgLocalServerFakeLobbyData) GetGuildInfo() *CMsgLocalServerGuildData {
	if x != nil {
		return x.GuildInfo
	}
	return nil
}

func (x *CMsgLocalServerFakeLobbyData) GetTeleportFxLevel() uint32 {
	if x != nil && x.TeleportFxLevel != nil {
		return *x.TeleportFxLevel
	}
	return 0
}

func (x *CMsgLocalServerFakeLobbyData) GetAdditionalData() *CMsgAdditionalLobbyStartupAccountData {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

type CMsgLobbyPlayerPlusSubscriptionData_HeroBadge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroBadgeXp   *uint32                `protobuf:"varint,2,opt,name=hero_badge_xp,json=heroBadgeXp" json:"hero_badge_xp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) Reset() {
	*x = CMsgLobbyPlayerPlusSubscriptionData_HeroBadge{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) ProtoMessage() {}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.ProtoReflect.Descriptor instead.
func (*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) GetHeroBadgeXp() uint32 {
	if x != nil && x.HeroBadgeXp != nil {
		return *x.HeroBadgeXp
	}
	return 0
}

type CMsgLobbyEventPoints_AccountPoints struct {
	state                  protoimpl.MessageState      `protogen:"open.v1"`
	AccountId              *uint32                     `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	NormalPoints           *uint32                     `protobuf:"varint,2,opt,name=normal_points,json=normalPoints" json:"normal_points,omitempty"`
	PremiumPoints          *uint32                     `protobuf:"varint,3,opt,name=premium_points,json=premiumPoints" json:"premium_points,omitempty"`
	Owned                  *bool                       `protobuf:"varint,4,opt,name=owned" json:"owned,omitempty"`
	EventLevel             *uint32                     `protobuf:"varint,7,opt,name=event_level,json=eventLevel" json:"event_level,omitempty"`
	ActiveEffectsMask      *uint64                     `protobuf:"varint,12,opt,name=active_effects_mask,json=activeEffectsMask" json:"active_effects_mask,omitempty"`
	WagerStreak            *uint32                     `protobuf:"varint,23,opt,name=wager_streak,json=wagerStreak" json:"wager_streak,omitempty"`
	EventGameCustomActions []*CMsgEventActionData      `protobuf:"bytes,25,rep,name=event_game_custom_actions,json=eventGameCustomActions" json:"event_game_custom_actions,omitempty"`
	TipAmountIndex         *uint32                     `protobuf:"varint,26,opt,name=tip_amount_index,json=tipAmountIndex" json:"tip_amount_index,omitempty"`
	ActiveEventSeasonId    *uint32                     `protobuf:"varint,27,opt,name=active_event_season_id,json=activeEventSeasonId" json:"active_event_season_id,omitempty"`
	TeleportFxLevel        *uint32                     `protobuf:"varint,28,opt,name=teleport_fx_level,json=teleportFxLevel" json:"teleport_fx_level,omitempty"`
	NetworkedEventActions  []*CMsgEventActionData      `protobuf:"bytes,30,rep,name=networked_event_actions,json=networkedEventActions" json:"networked_event_actions,omitempty"`
	PeriodicResources      []*CMsgPeriodicResourceData `protobuf:"bytes,31,rep,name=periodic_resources,json=periodicResources" json:"periodic_resources,omitempty"`
	ExtraEventMessages     []*CExtraMsgBlock           `protobuf:"bytes,32,rep,name=extra_event_messages,json=extraEventMessages" json:"extra_event_messages,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgLobbyEventPoints_AccountPoints) Reset() {
	*x = CMsgLobbyEventPoints_AccountPoints{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLobbyEventPoints_AccountPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventPoints_AccountPoints) ProtoMessage() {}

func (x *CMsgLobbyEventPoints_AccountPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventPoints_AccountPoints.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventPoints_AccountPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetNormalPoints() uint32 {
	if x != nil && x.NormalPoints != nil {
		return *x.NormalPoints
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetPremiumPoints() uint32 {
	if x != nil && x.PremiumPoints != nil {
		return *x.PremiumPoints
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetEventLevel() uint32 {
	if x != nil && x.EventLevel != nil {
		return *x.EventLevel
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetActiveEffectsMask() uint64 {
	if x != nil && x.ActiveEffectsMask != nil {
		return *x.ActiveEffectsMask
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetWagerStreak() uint32 {
	if x != nil && x.WagerStreak != nil {
		return *x.WagerStreak
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetEventGameCustomActions() []*CMsgEventActionData {
	if x != nil {
		return x.EventGameCustomActions
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetTipAmountIndex() uint32 {
	if x != nil && x.TipAmountIndex != nil {
		return *x.TipAmountIndex
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetActiveEventSeasonId() uint32 {
	if x != nil && x.ActiveEventSeasonId != nil {
		return *x.ActiveEventSeasonId
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetTeleportFxLevel() uint32 {
	if x != nil && x.TeleportFxLevel != nil {
		return *x.TeleportFxLevel
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetNetworkedEventActions() []*CMsgEventActionData {
	if x != nil {
		return x.NetworkedEventActions
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetPeriodicResources() []*CMsgPeriodicResourceData {
	if x != nil {
		return x.PeriodicResources
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetExtraEventMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraEventMessages
	}
	return nil
}

type CSODOTALobbyInvite_LobbyMember struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId       *uint64                `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSODOTALobbyInvite_LobbyMember) Reset() {
	*x = CSODOTALobbyInvite_LobbyMember{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTALobbyInvite_LobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobbyInvite_LobbyMember) ProtoMessage() {}

func (x *CSODOTALobbyInvite_LobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobbyInvite_LobbyMember.ProtoReflect.Descriptor instead.
func (*CSODOTALobbyInvite_LobbyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CSODOTALobbyInvite_LobbyMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSODOTALobbyInvite_LobbyMember) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CSODOTALobby_CExtraMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents      []byte                 `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSODOTALobby_CExtraMsg) Reset() {
	*x = CSODOTALobby_CExtraMsg{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTALobby_CExtraMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobby_CExtraMsg) ProtoMessage() {}

func (x *CSODOTALobby_CExtraMsg) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobby_CExtraMsg.ProtoReflect.Descriptor instead.
func (*CSODOTALobby_CExtraMsg) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CSODOTALobby_CExtraMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CSODOTALobby_CExtraMsg) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MessageIdStart *uint32                `protobuf:"varint,1,opt,name=message_id_start,json=messageIdStart,def=4294967295" json:"message_id_start,omitempty"`
	MessageIdEnd   *uint32                `protobuf:"varint,2,opt,name=message_id_end,json=messageIdEnd,def=4294967295" json:"message_id_end,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange fields.
const (
	Default_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_MessageIdStart = uint32(4294967295)
	Default_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_MessageIdEnd   = uint32(4294967295)
)

func (x *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) Reset() {
	*x = CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) ProtoMessage() {}

func (x *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.ProtoReflect.Descriptor instead.
func (*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) GetMessageIdStart() uint32 {
	if x != nil && x.MessageIdStart != nil {
		return *x.MessageIdStart
	}
	return Default_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_MessageIdStart
}

func (x *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) GetMessageIdEnd() uint32 {
	if x != nil && x.MessageIdEnd != nil {
		return *x.MessageIdEnd
	}
	return Default_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_MessageIdEnd
}

type CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MessageIdStart *uint32                `protobuf:"varint,1,opt,name=message_id_start,json=messageIdStart,def=4294967295" json:"message_id_start,omitempty"`
	MessageIdEnd   *uint32                `protobuf:"varint,2,opt,name=message_id_end,json=messageIdEnd,def=4294967295" json:"message_id_end,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange fields.
const (
	Default_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_MessageIdStart = uint32(4294967295)
	Default_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_MessageIdEnd   = uint32(4294967295)
)

func (x *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) Reset() {
	*x = CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange{}
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) ProtoMessage() {}

func (x *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_lobby_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.ProtoReflect.Descriptor instead.
func (*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_lobby_proto_rawDescGZIP(), []int{21, 1}
}

func (x *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) GetMessageIdStart() uint32 {
	if x != nil && x.MessageIdStart != nil {
		return *x.MessageIdStart
	}
	return Default_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_MessageIdStart
}

func (x *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) GetMessageIdEnd() uint32 {
	if x != nil && x.MessageIdEnd != nil {
		return *x.MessageIdEnd
	}
	return Default_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_MessageIdEnd
}

var File_dota_gcmessages_common_lobby_proto protoreflect.FileDescriptor

const file_dota_gcmessages_common_lobby_proto_rawDesc = "" +
	"\n" +
	"\"dota_gcmessages_common_lobby.proto\x12\bprotocol\x1a\x13steammessages.proto\x1a\x17dota_shared_enums.proto\x1a\x16gcsdk_gcmessages.proto\"\xe7\x01\n" +
	"\x1bCMsgLobbyCoachFriendRequest\x12(\n" +
	"\x10coach_account_id\x18\x01 \x01(\rR\x0ecoachAccountId\x12*\n" +
	"\x11player_account_id\x18\x02 \x01(\rR\x0fplayerAccountId\x12r\n" +
	"\rrequest_state\x18\x03 \x01(\x0e2'.protocol.ELobbyMemberCoachRequestState:$k_eLobbyMemberCoachRequestState_NoneR\frequestState\"\xc9\x01\n" +
	"#CMsgLobbyPlayerPlusSubscriptionData\x12X\n" +
	"\vhero_badges\x18\x01 \x03(\v27.protocol.CMsgLobbyPlayerPlusSubscriptionData.HeroBadgeR\n" +
	"heroBadges\x1aH\n" +
	"\tHeroBadge\x12\x17\n" +
	"\ahero_id\x18\x01 \x01(\x05R\x06heroId\x12\"\n" +
	"\rhero_badge_xp\x18\x02 \x01(\rR\vheroBadgeXp\"U\n" +
	"\x13CMsgEventActionData\x12\x1b\n" +
	"\taction_id\x18\x01 \x01(\rR\bactionId\x12!\n" +
	"\faction_score\x18\x02 \x01(\rR\vactionScore\"|\n" +
	"\x18CMsgPeriodicResourceData\x120\n" +
	"\x14periodic_resource_id\x18\x01 \x01(\rR\x12periodicResourceId\x12\x1c\n" +
	"\tremaining\x18\x02 \x01(\rR\tremaining\x12\x10\n" +
	"\x03max\x18\x03 \x01(\rR\x03max\"\xe8\x06\n" +
	"\x14CMsgLobbyEventPoints\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\rR\aeventId\x12S\n" +
	"\x0eaccount_points\x18\x02 \x03(\v2,.protocol.CMsgLobbyEventPoints.AccountPointsR\raccountPoints\x1a\xdf\x05\n" +
	"\rAccountPoints\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12#\n" +
	"\rnormal_points\x18\x02 \x01(\rR\fnormalPoints\x12%\n" +
	"\x0epremium_points\x18\x03 \x01(\rR\rpremiumPoints\x12\x14\n" +
	"\x05owned\x18\x04 \x01(\bR\x05owned\x12\x1f\n" +
	"\vevent_level\x18\a \x01(\rR\n" +
	"eventLevel\x12.\n" +
	"\x13active_effects_mask\x18\f \x01(\x04R\x11activeEffectsMask\x12!\n" +
	"\fwager_streak\x18\x17 \x01(\rR\vwagerStreak\x12X\n" +
	"\x19event_game_custom_actions\x18\x19 \x03(\v2\x1d.protocol.CMsgEventActionDataR\x16eventGameCustomActions\x12(\n" +
	"\x10tip_amount_index\x18\x1a \x01(\rR\x0etipAmountIndex\x123\n" +
	"\x16active_event_season_id\x18\x1b \x01(\rR\x13activeEventSeasonId\x12*\n" +
	"\x11teleport_fx_level\x18\x1c \x01(\rR\x0fteleportFxLevel\x12U\n" +
	"\x17networked_event_actions\x18\x1e \x03(\v2\x1d.protocol.CMsgEventActionDataR\x15networkedEventActions\x12Q\n" +
	"\x12periodic_resources\x18\x1f \x03(\v2\".protocol.CMsgPeriodicResourceDataR\x11periodicResources\x12J\n" +
	"\x14extra_event_messages\x18  \x03(\v2\x18.protocol.CExtraMsgBlockR\x12extraEventMessages\"l\n" +
	"\x16CMsgLobbyEventGameData\x12\x1b\n" +
	"\tgame_seed\x18\x01 \x01(\rR\bgameSeed\x125\n" +
	"\x17event_window_start_time\x18\x02 \x01(\rR\x14eventWindowStartTime\"\x96\x03\n" +
	"\x12CSODOTALobbyInvite\x12\x1f\n" +
	"\bgroup_id\x18\x01 \x01(\x04B\x04\x80\xa6\x1d\x01R\agroupId\x12\x1b\n" +
	"\tsender_id\x18\x02 \x01(\x06R\bsenderId\x12\x1f\n" +
	"\vsender_name\x18\x03 \x01(\tR\n" +
	"senderName\x12B\n" +
	"\amembers\x18\x04 \x03(\v2(.protocol.CSODOTALobbyInvite.LobbyMemberR\amembers\x12$\n" +
	"\x0ecustom_game_id\x18\x05 \x01(\x04R\fcustomGameId\x12\x1d\n" +
	"\n" +
	"invite_gid\x18\x06 \x01(\x06R\tinviteGid\x12&\n" +
	"\x0fcustom_game_crc\x18\a \x01(\x06R\rcustomGameCrc\x122\n" +
	"\x15custom_game_timestamp\x18\b \x01(\aR\x13customGameTimestamp\x1a<\n" +
	"\vLobbyMember\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x19\n" +
	"\bsteam_id\x18\x02 \x01(\x06R\asteamId\"\xbb\x06\n" +
	"\x12CSODOTALobbyMember\x12\x14\n" +
	"\x02id\x18\x01 \x01(\x06B\x04\x80\xa6\x1d\x01R\x02id\x12\x17\n" +
	"\ahero_id\x18\x02 \x01(\x05R\x06heroId\x12B\n" +
	"\x04team\x18\x03 \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x16DOTA_GC_TEAM_GOOD_GUYSR\x04team\x12\x12\n" +
	"\x04slot\x18\a \x01(\rR\x04slot\x12S\n" +
	"\rleaver_status\x18\x10 \x01(\x0e2\x1c.protocol.DOTALeaverStatus_t:\x10DOTA_LEAVER_NONER\fleaverStatus\x12%\n" +
	"\x0eleaver_actions\x18\x1c \x01(\rR\rleaverActions\x12J\n" +
	"\n" +
	"coach_team\x18\x17 \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x13DOTA_GC_TEAM_NOTEAMR\tcoachTeam\x125\n" +
	"\x17custom_game_product_ids\x18\x1f \x03(\rR\x14customGameProductIds\x12[\n" +
	"\x13live_spectator_team\x18( \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x13DOTA_GC_TEAM_NOTEAMR\x11liveSpectatorTeam\x12F\n" +
	"\x0epending_awards\x18, \x03(\v2\x1f.protocol.CMsgPendingEventAwardR\rpendingAwards\x12Z\n" +
	"\x19pending_awards_on_victory\x18- \x03(\v2\x1f.protocol.CMsgPendingEventAwardR\x16pendingAwardsOnVictory\x12+\n" +
	"\x11reports_available\x184 \x01(\rR\x10reportsAvailable\x129\n" +
	"\x19live_spectator_account_id\x187 \x01(\rR\x16liveSpectatorAccountId\x126\n" +
	"\x17comms_reports_available\x188 \x01(\rR\x15commsReportsAvailable\"\x1a\n" +
	"\x18CSODOTAServerLobbyMember\"\x84\x01\n" +
	"\x18CSODOTAStaticLobbyMember\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x19\n" +
	"\bparty_id\x18\x02 \x01(\x04R\apartyId\x12\x1b\n" +
	"\achannel\x18\x03 \x01(\r:\x016R\achannel\x12\x1c\n" +
	"\tcameraman\x18\x04 \x01(\bR\tcameraman\"\xb3\x06\n" +
	"\x1eCSODOTAServerStaticLobbyMember\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12\x1b\n" +
	"\trank_tier\x18\x03 \x01(\x05R\brankTier\x12-\n" +
	"\x10leaderboard_rank\x18\x04 \x01(\x05:\x02-1R\x0fleaderboardRank\x120\n" +
	"\x14lane_selection_flags\x18\x05 \x01(\x05R\x12laneSelectionFlags\x12d\n" +
	"\x13rank_mmr_boost_type\x18\x06 \x01(\x0e2\x1b.protocol.EDOTAMMRBoostType:\x18k_EDOTAMMRBoostType_NoneR\x10rankMmrBoostType\x12!\n" +
	"\fcoach_rating\x18\a \x01(\x05R\vcoachRating\x12.\n" +
	"\x13coached_account_ids\x18\b \x03(\rR\x11coachedAccountIds\x12)\n" +
	"\x11was_mvp_last_game\x18\t \x01(\bR\x0ewasMvpLastGame\x12(\n" +
	"\x10can_earn_rewards\x18\n" +
	" \x01(\bR\x0ecanEarnRewards\x12,\n" +
	"\x12is_plus_subscriber\x18\v \x01(\bR\x10isPlusSubscriber\x120\n" +
	"\x14favorite_team_packed\x18\f \x01(\x04R\x12favoriteTeamPacked\x12$\n" +
	"\x0eis_steam_china\x18\r \x01(\bR\fisSteamChina\x12\x14\n" +
	"\x05title\x18\x0e \x01(\rR\x05title\x12\x19\n" +
	"\bguild_id\x18\x0f \x01(\rR\aguildId\x129\n" +
	"\x19disabled_random_hero_bits\x18\x10 \x03(\aR\x16disabledRandomHeroBits\x12(\n" +
	"\x10disabled_hero_id\x18\x11 \x03(\x05R\x0edisabledHeroId\x12&\n" +
	"\x0fenabled_hero_id\x18\x12 \x03(\x05R\renabledHeroId\x12&\n" +
	"\x0fbanned_hero_ids\x18\x13 \x03(\x05R\rbannedHeroIds\"\x8f\x04\n" +
	"\x11CLobbyTeamDetails\x12\x1b\n" +
	"\tteam_name\x18\x01 \x01(\tR\bteamName\x12\x19\n" +
	"\bteam_tag\x18\x03 \x01(\tR\ateamTag\x12\x17\n" +
	"\ateam_id\x18\x04 \x01(\rR\x06teamId\x12\x1b\n" +
	"\tteam_logo\x18\x05 \x01(\x04R\bteamLogo\x12$\n" +
	"\x0eteam_base_logo\x18\x06 \x01(\x04R\fteamBaseLogo\x12(\n" +
	"\x10team_banner_logo\x18\a \x01(\x04R\x0eteamBannerLogo\x12#\n" +
	"\rteam_complete\x18\b \x01(\bR\fteamComplete\x12\x12\n" +
	"\x04rank\x18\x0f \x01(\rR\x04rank\x12\x1f\n" +
	"\vrank_change\x18\x10 \x01(\x11R\n" +
	"rankChange\x12 \n" +
	"\fis_home_team\x18\x11 \x01(\bR\n" +
	"isHomeTeam\x12,\n" +
	"\x12is_challenge_match\x18\x12 \x01(\bR\x10isChallengeMatch\x12A\n" +
	"\x1dchallenge_match_token_account\x18\x13 \x01(\x04R\x1achallengeMatchTokenAccount\x12\"\n" +
	"\rteam_logo_url\x18\x14 \x01(\tR\vteamLogoUrl\x12+\n" +
	"\x11team_abbreviation\x18\x15 \x01(\tR\x10teamAbbreviation\"\xe7\x03\n" +
	"\x12CLobbyGuildDetails\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\rR\aguildId\x12.\n" +
	"\x13guild_primary_color\x18\x02 \x01(\rR\x11guildPrimaryColor\x122\n" +
	"\x15guild_secondary_color\x18\x03 \x01(\rR\x13guildSecondaryColor\x12#\n" +
	"\rguild_pattern\x18\x04 \x01(\rR\fguildPattern\x12\x1d\n" +
	"\n" +
	"guild_logo\x18\x05 \x01(\x04R\tguildLogo\x12!\n" +
	"\fguild_points\x18\x06 \x01(\rR\vguildPoints\x12\x1f\n" +
	"\vguild_event\x18\a \x01(\rR\n" +
	"guildEvent\x12\x1f\n" +
	"\vguild_flags\x18\b \x01(\rR\n" +
	"guildFlags\x12T\n" +
	"\x0eteam_for_guild\x18\t \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x16DOTA_GC_TEAM_GOOD_GUYSR\fteamForGuild\x12\x1b\n" +
	"\tguild_tag\x18\n" +
	" \x01(\tR\bguildTag\x126\n" +
	"\x17guild_weekly_percentile\x18\v \x01(\rR\x15guildWeeklyPercentile\"\xc3\x01\n" +
	"\x18CLobbyTimedRewardDetails\x12$\n" +
	"\x0eitem_def_index\x18\x02 \x01(\rR\fitemDefIndex\x12&\n" +
	"\x0fis_supply_crate\x18\x03 \x01(\bR\risSupplyCrate\x12\"\n" +
	"\ris_timed_drop\x18\x04 \x01(\bR\visTimedDrop\x12\x1d\n" +
	"\n" +
	"account_id\x18\x05 \x01(\rR\taccountId\x12\x16\n" +
	"\x06origin\x18\x06 \x01(\rR\x06origin\"\xa5\x01\n" +
	"\x1aCLobbyBroadcastChannelInfo\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\rR\tchannelId\x12!\n" +
	"\fcountry_code\x18\x02 \x01(\tR\vcountryCode\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12#\n" +
	"\rlanguage_code\x18\x04 \x01(\tR\flanguageCode\"\xac\x03\n" +
	"\x14CLobbyGuildChallenge\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\rR\aguildId\x12:\n" +
	"\bevent_id\x18\x02 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x122\n" +
	"\x15challenge_instance_id\x18\x03 \x01(\rR\x13challengeInstanceId\x12/\n" +
	"\x13challenge_parameter\x18\x04 \x01(\rR\x12challengeParameter\x12/\n" +
	"\x13challenge_timestamp\x18\x05 \x01(\rR\x12challengeTimestamp\x126\n" +
	"\x17challenge_period_serial\x18\x06 \x01(\rR\x15challengePeriodSerial\x12=\n" +
	"\x1bchallenge_progress_at_start\x18\a \x01(\rR\x18challengeProgressAtStart\x120\n" +
	"\x14eligible_account_ids\x18\b \x03(\rR\x12eligibleAccountIds\"\xbb\x01\n" +
	"\x1aCDOTALobbyMatchQualityData\x12'\n" +
	"\x0foverall_quality\x18\x01 \x01(\rR\x0eoverallQuality\x12!\n" +
	"\fteam_balance\x18\x02 \x01(\rR\vteamBalance\x12*\n" +
	"\x11match_skill_range\x18\x03 \x01(\rR\x0fmatchSkillRange\x12%\n" +
	"\x0ematch_behavior\x18\x04 \x01(\rR\rmatchBehavior\"\x82+\n" +
	"\fCSODOTALobby\x12\x1f\n" +
	"\blobby_id\x18\x01 \x01(\x04B\x04\x80\xa6\x1d\x01R\alobbyId\x12=\n" +
	"\vall_members\x18x \x03(\v2\x1c.protocol.CSODOTALobbyMemberR\n" +
	"allMembers\x12%\n" +
	"\x0emember_indices\x18y \x03(\rR\rmemberIndices\x12.\n" +
	"\x13left_member_indices\x18z \x03(\rR\x11leftMemberIndices\x12.\n" +
	"\x13free_member_indices\x18{ \x03(\rR\x11freeMemberIndices\x12\x1b\n" +
	"\tleader_id\x18\v \x01(\x06R\bleaderId\x12\x1e\n" +
	"\tserver_id\x18\x06 \x01(\x06:\x010R\bserverId\x12\x1b\n" +
	"\tgame_mode\x18\x03 \x01(\rR\bgameMode\x12'\n" +
	"\x0fpending_invites\x18\n" +
	" \x03(\x06R\x0ependingInvites\x126\n" +
	"\x05state\x18\x04 \x01(\x0e2\x1c.protocol.CSODOTALobby.State:\x02UIR\x05state\x12\x18\n" +
	"\aconnect\x18\x05 \x01(\tR\aconnect\x12H\n" +
	"\n" +
	"lobby_type\x18\f \x01(\x0e2 .protocol.CSODOTALobby.LobbyType:\aINVALIDR\tlobbyType\x12!\n" +
	"\fallow_cheats\x18\r \x01(\bR\vallowCheats\x12$\n" +
	"\x0efill_with_bots\x18\x0e \x01(\bR\ffillWithBots\x12\x1b\n" +
	"\tgame_name\x18\x10 \x01(\tR\bgameName\x12>\n" +
	"\fteam_details\x18\x11 \x03(\v2\x1b.protocol.CLobbyTeamDetailsR\vteamDetails\x12#\n" +
	"\rtournament_id\x18\x13 \x01(\rR\ftournamentId\x12,\n" +
	"\x12tournament_game_id\x18\x14 \x01(\rR\x10tournamentGameId\x12&\n" +
	"\rserver_region\x18\x15 \x01(\r:\x010R\fserverRegion\x12R\n" +
	"\n" +
	"game_state\x18\x16 \x01(\x0e2\x18.protocol.DOTA_GameState:\x19DOTA_GAMERULES_STATE_INITR\tgameState\x12%\n" +
	"\x0enum_spectators\x18\x17 \x01(\rR\rnumSpectators\x12\x1e\n" +
	"\n" +
	"matchgroup\x18\x19 \x01(\rR\n" +
	"matchgroup\x12?\n" +
	"\acm_pick\x18\x1c \x01(\x0e2\x16.protocol.DOTA_CM_PICK:\x0eDOTA_CM_RANDOMR\x06cmPick\x12\x19\n" +
	"\bmatch_id\x18\x1e \x01(\x04R\amatchId\x12/\n" +
	"\x10allow_spectating\x18\x1f \x01(\b:\x04trueR\x0fallowSpectating\x12f\n" +
	"\x16bot_difficulty_radiant\x18$ \x01(\x0e2\x1b.protocol.DOTABotDifficulty:\x13BOT_DIFFICULTY_HARDR\x14botDifficultyRadiant\x12\x19\n" +
	"\bpass_key\x18' \x01(\tR\apassKey\x12\x1a\n" +
	"\bleagueid\x18* \x01(\rR\bleagueid\x125\n" +
	"\x15penalty_level_radiant\x18+ \x01(\r:\x010R\x13penaltyLevelRadiant\x12/\n" +
	"\x12penalty_level_dire\x18, \x01(\r:\x010R\x10penaltyLevelDire\x12\x1f\n" +
	"\vseries_type\x18. \x01(\rR\n" +
	"seriesType\x12.\n" +
	"\x13radiant_series_wins\x18/ \x01(\rR\x11radiantSeriesWins\x12(\n" +
	"\x10dire_series_wins\x180 \x01(\rR\x0edireSeriesWins\x12\x1f\n" +
	"\aallchat\x183 \x01(\b:\x05falseR\aallchat\x12N\n" +
	"\rdota_tv_delay\x185 \x01(\x0e2\x1a.protocol.LobbyDotaTVDelay:\x0eLobbyDotaTV_10R\vdotaTvDelay\x12(\n" +
	"\x10custom_game_mode\x186 \x01(\tR\x0ecustomGameMode\x12&\n" +
	"\x0fcustom_map_name\x187 \x01(\tR\rcustomMapName\x12+\n" +
	"\x11custom_difficulty\x188 \x01(\rR\x10customDifficulty\x12\x10\n" +
	"\x03lan\x189 \x01(\bR\x03lan\x12Z\n" +
	"\x16broadcast_channel_info\x18: \x03(\v2$.protocol.CLobbyBroadcastChannelInfoR\x14broadcastChannelInfo\x124\n" +
	"\x16first_leaver_accountid\x18; \x01(\rR\x14firstLeaverAccountid\x12\x1b\n" +
	"\tseries_id\x18< \x01(\rR\bseriesId\x12!\n" +
	"\flow_priority\x18= \x01(\bR\vlowPriority\x12G\n" +
	"\x0eextra_messages\x18> \x03(\v2 .protocol.CSODOTALobby.CExtraMsgR\rextraMessages\x120\n" +
	"\x14first_blood_happened\x18A \x01(\bR\x12firstBloodHappened\x12U\n" +
	"\rmatch_outcome\x18F \x01(\x0e2\x17.protocol.EMatchOutcome:\x17k_EMatchOutcome_UnknownR\fmatchOutcome\x12'\n" +
	"\x0fmass_disconnect\x18C \x01(\bR\x0emassDisconnect\x12$\n" +
	"\x0ecustom_game_id\x18D \x01(\x04R\fcustomGameId\x12,\n" +
	"\x12custom_min_players\x18G \x01(\rR\x10customMinPlayers\x12,\n" +
	"\x12custom_max_players\x18H \x01(\rR\x10customMaxPlayers\x12Y\n" +
	"\n" +
	"visibility\x18K \x01(\x0e2\x1d.protocol.DOTALobbyVisibility:\x1aDOTALobbyVisibility_PublicR\n" +
	"visibility\x12&\n" +
	"\x0fcustom_game_crc\x18L \x01(\x06R\rcustomGameCrc\x12B\n" +
	"\x1ecustom_game_auto_created_lobby\x18M \x01(\bR\x1acustomGameAutoCreatedLobby\x122\n" +
	"\x15custom_game_timestamp\x18P \x01(\aR\x13customGameTimestamp\x126\n" +
	"\x17previous_series_matches\x18Q \x03(\x04R\x15previousSeriesMatches\x126\n" +
	"\x17previous_match_override\x18R \x01(\x04R\x15previousMatchOverride\x12&\n" +
	"\x0fgame_start_time\x18W \x01(\rR\rgameStartTime\x12e\n" +
	"\rpause_setting\x18X \x01(\x0e2\x1f.protocol.LobbyDotaPauseSetting:\x1fLobbyDotaPauseSetting_UnlimitedR\fpauseSetting\x12=\n" +
	"\x1bweekend_tourney_division_id\x18Z \x01(\rR\x18weekendTourneyDivisionId\x12=\n" +
	"\x1bweekend_tourney_skill_level\x18[ \x01(\rR\x18weekendTourneySkillLevel\x12A\n" +
	"\x1dweekend_tourney_bracket_round\x18\\ \x01(\rR\x1aweekendTourneyBracketRound\x12`\n" +
	"\x13bot_difficulty_dire\x18] \x01(\x0e2\x1b.protocol.DOTABotDifficulty:\x13BOT_DIFFICULTY_HARDR\x11botDifficultyDire\x12\x1f\n" +
	"\vbot_radiant\x18^ \x01(\x04R\n" +
	"botRadiant\x12\x19\n" +
	"\bbot_dire\x18_ \x01(\x04R\abotDire\x12L\n" +
	"\x19event_progression_enabled\x18` \x03(\x0e2\x10.protocol.EEventR\x17eventProgressionEnabled\x12\x83\x01\n" +
	"\x18selection_priority_rules\x18a \x01(\x0e2$.protocol.DOTASelectionPriorityRules:#k_DOTASelectionPriorityRules_ManualR\x16selectionPriorityRules\x12Y\n" +
	"*series_previous_selection_priority_team_id\x18b \x01(\rR%seriesPreviousSelectionPriorityTeamId\x12W\n" +
	")series_current_selection_priority_team_id\x18c \x01(\rR$seriesCurrentSelectionPriorityTeamId\x12\x9a\x01\n" +
	"#series_current_priority_team_choice\x18d \x01(\x0e2%.protocol.DOTASelectionPriorityChoice:%k_DOTASelectionPriorityChoice_InvalidR\x1fseriesCurrentPriorityTeamChoice\x12\xa1\x01\n" +
	"'series_current_non_priority_team_choice\x18e \x01(\x0e2%.protocol.DOTASelectionPriorityChoice:%k_DOTASelectionPriorityChoice_InvalidR\"seriesCurrentNonPriorityTeamChoice\x12d\n" +
	"0series_current_selection_priority_used_coin_toss\x18f \x01(\bR*seriesCurrentSelectionPriorityUsedCoinToss\x12S\n" +
	"\x15current_primary_event\x18g \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\x13currentPrimaryEvent\x12=\n" +
	"\x1bemergency_disabled_hero_ids\x18i \x03(\x05R\x18emergencyDisabledHeroIds\x125\n" +
	"\x17custom_game_private_key\x18j \x01(\x06R\x14customGamePrivateKey\x122\n" +
	"\x15custom_game_penalties\x18k \x01(\bR\x13customGamePenalties\x123\n" +
	"\x16lan_host_ping_location\x18m \x01(\tR\x13lanHostPingLocation\x12$\n" +
	"\x0eleague_node_id\x18n \x01(\rR\fleagueNodeId\x12%\n" +
	"\x0ematch_duration\x18o \x01(\rR\rmatchDuration\x12!\n" +
	"\fleague_phase\x18q \x01(\rR\vleaguePhase\x12B\n" +
	"\x1dexperimental_gameplay_enabled\x18t \x01(\bR\x1bexperimentalGameplayEnabled\x12I\n" +
	"\x10guild_challenges\x18u \x03(\v2\x1e.protocol.CLobbyGuildChallengeR\x0fguildChallenges\x12A\n" +
	"\rguild_details\x18v \x03(\v2\x1c.protocol.CLobbyGuildDetailsR\fguildDetails\x12,\n" +
	"\x12requested_hero_ids\x18| \x03(\x05R\x10requestedHeroIds\x12Y\n" +
	"\x15coach_friend_requests\x18} \x03(\v2%.protocol.CMsgLobbyCoachFriendRequestR\x13coachFriendRequests\x12)\n" +
	"\x11is_in_steam_china\x18~ \x01(\bR\x0eisInSteamChina\x12,\n" +
	"\x12with_scenario_save\x18\x7f \x01(\bR\x10withScenarioSave\x12/\n" +
	"\x13lobby_creation_time\x18\x80\x01 \x01(\rR\x11lobbyCreationTime\x123\n" +
	"\x15event_game_definition\x18\x81\x01 \x01(\tR\x13eventGameDefinition\x12S\n" +
	"\x12match_quality_data\x18\x83\x01 \x01(\v2$.protocol.CDOTALobbyMatchQualityDataR\x10matchQualityData\x121\n" +
	"\x14requested_hero_teams\x18\x84\x01 \x03(\x05R\x12requestedHeroTeams\x1a7\n" +
	"\tCExtraMsg\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x1a\n" +
	"\bcontents\x18\x02 \x01(\fR\bcontents\"d\n" +
	"\x05State\x12\x06\n" +
	"\x02UI\x10\x00\x12\v\n" +
	"\aREADYUP\x10\x04\x12\x0f\n" +
	"\vSERVERSETUP\x10\x01\x12\a\n" +
	"\x03RUN\x10\x02\x12\f\n" +
	"\bPOSTGAME\x10\x03\x12\f\n" +
	"\bNOTREADY\x10\x05\x12\x10\n" +
	"\fSERVERASSIGN\x10\x06\"\xe2\x01\n" +
	"\tLobbyType\x12\x14\n" +
	"\aINVALID\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x10\n" +
	"\fCASUAL_MATCH\x10\x00\x12\f\n" +
	"\bPRACTICE\x10\x01\x12\x12\n" +
	"\x0eCOOP_BOT_MATCH\x10\x04\x12\x15\n" +
	"\x11COMPETITIVE_MATCH\x10\a\x12\x13\n" +
	"\x0fWEEKEND_TOURNEY\x10\t\x12\x13\n" +
	"\x0fLOCAL_BOT_MATCH\x10\n" +
	"\x12\r\n" +
	"\tSPECTATOR\x10\v\x12\x0f\n" +
	"\vEVENT_MATCH\x10\f\x12\x13\n" +
	"\x0fNEW_PLAYER_POOL\x10\x0e\x12\x15\n" +
	"\x11FEATURED_GAMEMODE\x10\x0f\"\xdc\x01\n" +
	"\x12CSODOTAServerLobby\x12C\n" +
	"\vall_members\x18\x01 \x03(\v2\".protocol.CSODOTAServerLobbyMemberR\n" +
	"allMembers\x12V\n" +
	"\x16extra_startup_messages\x18\x02 \x03(\v2 .protocol.CSODOTALobby.CExtraMsgR\x14extraStartupMessages\x12)\n" +
	"\x10broadcast_active\x18\x03 \x01(\bR\x0fbroadcastActive\"\xb7\x01\n" +
	"\x12CSODOTAStaticLobby\x12C\n" +
	"\vall_members\x18\x01 \x03(\v2\".protocol.CSODOTAStaticLobbyMemberR\n" +
	"allMembers\x12&\n" +
	"\x0fis_player_draft\x18\x02 \x01(\bR\risPlayerDraft\x124\n" +
	"\x17is_last_match_in_series\x18\x03 \x01(\bR\x13isLastMatchInSeries\"\x9e\x02\n" +
	"\x18CSODOTAServerStaticLobby\x12I\n" +
	"\vall_members\x18\x01 \x03(\v2(.protocol.CSODOTAServerStaticLobbyMemberR\n" +
	"allMembers\x12D\n" +
	"\x1fpost_patch_strategy_time_buffer\x18\x02 \x01(\x02R\x1bpostPatchStrategyTimeBuffer\x12L\n" +
	"\x12lobby_event_points\x18\x03 \x03(\v2\x1e.protocol.CMsgLobbyEventPointsR\x10lobbyEventPoints\x12#\n" +
	"\rbroadcast_url\x18\x04 \x01(\tR\fbroadcastUrl\"\xbc\x05\n" +
	"%CMsgAdditionalLobbyStartupAccountData\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12J\n" +
	"\tplus_data\x18\x02 \x01(\v2-.protocol.CMsgLobbyPlayerPlusSubscriptionDataR\bplusData\x12\x91\x01\n" +
	"\"unlocked_chat_wheel_message_ranges\x18\x03 \x03(\v2E.protocol.CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRangeR\x1eunlockedChatWheelMessageRanges\x12\x91\x01\n" +
	"\"unlocked_ping_wheel_message_ranges\x18\x04 \x03(\v2E.protocol.CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRangeR\x1eunlockedPingWheelMessageRanges\x1a\x7f\n" +
	"\x15ChatWheelMessageRange\x124\n" +
	"\x10message_id_start\x18\x01 \x01(\r:\n" +
	"4294967295R\x0emessageIdStart\x120\n" +
	"\x0emessage_id_end\x18\x02 \x01(\r:\n" +
	"4294967295R\fmessageIdEnd\x1a\x7f\n" +
	"\x15PingWheelMessageRange\x124\n" +
	"\x10message_id_start\x18\x01 \x01(\r:\n" +
	"4294967295R\x0emessageIdStart\x120\n" +
	"\x0emessage_id_end\x18\x02 \x01(\r:\n" +
	"4294967295R\fmessageIdEnd\"!\n" +
	"\x1fCMsgLobbyInitializationComplete\".\n" +
	"\x18CMsgLobbyPlaytestDetails\x12\x12\n" +
	"\x04json\x18\x01 \x01(\tR\x04json\"\x95\x03\n" +
	"\x18CMsgLocalServerGuildData\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\rR\aguildId\x12:\n" +
	"\bevent_id\x18\x02 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12!\n" +
	"\fguild_points\x18\x03 \x01(\rR\vguildPoints\x12\x1d\n" +
	"\n" +
	"guild_logo\x18\x04 \x01(\x04R\tguildLogo\x12.\n" +
	"\x13guild_primary_color\x18\x05 \x01(\rR\x11guildPrimaryColor\x122\n" +
	"\x15guild_secondary_color\x18\x06 \x01(\rR\x13guildSecondaryColor\x12#\n" +
	"\rguild_pattern\x18\a \x01(\rR\fguildPattern\x12\x1f\n" +
	"\vguild_flags\x18\b \x01(\rR\n" +
	"guildFlags\x126\n" +
	"\x17guild_weekly_percentile\x18\t \x01(\rR\x15guildWeeklyPercentile\"\xfa\x03\n" +
	"\x1cCMsgLocalServerFakeLobbyData\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12A\n" +
	"\fevent_points\x18\x02 \x03(\v2\x1e.protocol.CMsgLobbyEventPointsR\veventPoints\x12,\n" +
	"\x12is_plus_subscriber\x18\x03 \x01(\bR\x10isPlusSubscriber\x12(\n" +
	"\x10primary_event_id\x18\x04 \x01(\rR\x0eprimaryEventId\x12#\n" +
	"\rfavorite_team\x18\x05 \x01(\rR\ffavoriteTeam\x122\n" +
	"\x15favorite_team_quality\x18\x06 \x01(\rR\x13favoriteTeamQuality\x12A\n" +
	"\n" +
	"guild_info\x18\a \x01(\v2\".protocol.CMsgLocalServerGuildDataR\tguildInfo\x12*\n" +
	"\x11teleport_fx_level\x18\b \x01(\rR\x0fteleportFxLevel\x12X\n" +
	"\x0fadditional_data\x18\t \x01(\v2/.protocol.CMsgAdditionalLobbyStartupAccountDataR\x0eadditionalData*\xa5\x01\n" +
	"\x1dELobbyMemberCoachRequestState\x12(\n" +
	"$k_eLobbyMemberCoachRequestState_None\x10\x00\x12,\n" +
	"(k_eLobbyMemberCoachRequestState_Accepted\x10\x01\x12,\n" +
	"(k_eLobbyMemberCoachRequestState_Rejected\x10\x02*e\n" +
	"\x10LobbyDotaTVDelay\x12\x12\n" +
	"\x0eLobbyDotaTV_10\x10\x00\x12\x13\n" +
	"\x0fLobbyDotaTV_120\x10\x01\x12\x13\n" +
	"\x0fLobbyDotaTV_300\x10\x02\x12\x13\n" +
	"\x0fLobbyDotaTV_900\x10\x03*\x83\x01\n" +
	"\x15LobbyDotaPauseSetting\x12#\n" +
	"\x1fLobbyDotaPauseSetting_Unlimited\x10\x00\x12!\n" +
	"\x1dLobbyDotaPauseSetting_Limited\x10\x01\x12\"\n" +
	"\x1eLobbyDotaPauseSetting_Disabled\x10\x02"

var (
	file_dota_gcmessages_common_lobby_proto_rawDescOnce sync.Once
	file_dota_gcmessages_common_lobby_proto_rawDescData []byte
)

func file_dota_gcmessages_common_lobby_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_common_lobby_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_common_lobby_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dota_gcmessages_common_lobby_proto_rawDesc), len(file_dota_gcmessages_common_lobby_proto_rawDesc)))
	})
	return file_dota_gcmessages_common_lobby_proto_rawDescData
}

var file_dota_gcmessages_common_lobby_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_dota_gcmessages_common_lobby_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_dota_gcmessages_common_lobby_proto_goTypes = []any{
	(ELobbyMemberCoachRequestState)(0),                                  // 0: protocol.ELobbyMemberCoachRequestState
	(LobbyDotaTVDelay)(0),                                               // 1: protocol.LobbyDotaTVDelay
	(LobbyDotaPauseSetting)(0),                                          // 2: protocol.LobbyDotaPauseSetting
	(CSODOTALobby_State)(0),                                             // 3: protocol.CSODOTALobby.State
	(CSODOTALobby_LobbyType)(0),                                         // 4: protocol.CSODOTALobby.LobbyType
	(*CMsgLobbyCoachFriendRequest)(nil),                                 // 5: protocol.CMsgLobbyCoachFriendRequest
	(*CMsgLobbyPlayerPlusSubscriptionData)(nil),                         // 6: protocol.CMsgLobbyPlayerPlusSubscriptionData
	(*CMsgEventActionData)(nil),                                         // 7: protocol.CMsgEventActionData
	(*CMsgPeriodicResourceData)(nil),                                    // 8: protocol.CMsgPeriodicResourceData
	(*CMsgLobbyEventPoints)(nil),                                        // 9: protocol.CMsgLobbyEventPoints
	(*CMsgLobbyEventGameData)(nil),                                      // 10: protocol.CMsgLobbyEventGameData
	(*CSODOTALobbyInvite)(nil),                                          // 11: protocol.CSODOTALobbyInvite
	(*CSODOTALobbyMember)(nil),                                          // 12: protocol.CSODOTALobbyMember
	(*CSODOTAServerLobbyMember)(nil),                                    // 13: protocol.CSODOTAServerLobbyMember
	(*CSODOTAStaticLobbyMember)(nil),                                    // 14: protocol.CSODOTAStaticLobbyMember
	(*CSODOTAServerStaticLobbyMember)(nil),                              // 15: protocol.CSODOTAServerStaticLobbyMember
	(*CLobbyTeamDetails)(nil),                                           // 16: protocol.CLobbyTeamDetails
	(*CLobbyGuildDetails)(nil),                                          // 17: protocol.CLobbyGuildDetails
	(*CLobbyTimedRewardDetails)(nil),                                    // 18: protocol.CLobbyTimedRewardDetails
	(*CLobbyBroadcastChannelInfo)(nil),                                  // 19: protocol.CLobbyBroadcastChannelInfo
	(*CLobbyGuildChallenge)(nil),                                        // 20: protocol.CLobbyGuildChallenge
	(*CDOTALobbyMatchQualityData)(nil),                                  // 21: protocol.CDOTALobbyMatchQualityData
	(*CSODOTALobby)(nil),                                                // 22: protocol.CSODOTALobby
	(*CSODOTAServerLobby)(nil),                                          // 23: protocol.CSODOTAServerLobby
	(*CSODOTAStaticLobby)(nil),                                          // 24: protocol.CSODOTAStaticLobby
	(*CSODOTAServerStaticLobby)(nil),                                    // 25: protocol.CSODOTAServerStaticLobby
	(*CMsgAdditionalLobbyStartupAccountData)(nil),                       // 26: protocol.CMsgAdditionalLobbyStartupAccountData
	(*CMsgLobbyInitializationComplete)(nil),                             // 27: protocol.CMsgLobbyInitializationComplete
	(*CMsgLobbyPlaytestDetails)(nil),                                    // 28: protocol.CMsgLobbyPlaytestDetails
	(*CMsgLocalServerGuildData)(nil),                                    // 29: protocol.CMsgLocalServerGuildData
	(*CMsgLocalServerFakeLobbyData)(nil),                                // 30: protocol.CMsgLocalServerFakeLobbyData
	(*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge)(nil),               // 31: protocol.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge
	(*CMsgLobbyEventPoints_AccountPoints)(nil),                          // 32: protocol.CMsgLobbyEventPoints.AccountPoints
	(*CSODOTALobbyInvite_LobbyMember)(nil),                              // 33: protocol.CSODOTALobbyInvite.LobbyMember
	(*CSODOTALobby_CExtraMsg)(nil),                                      // 34: protocol.CSODOTALobby.CExtraMsg
	(*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange)(nil), // 35: protocol.CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange
	(*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange)(nil), // 36: protocol.CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange
	(DOTA_GC_TEAM)(0),                                                   // 37: protocol.DOTA_GC_TEAM
	(DOTALeaverStatusT)(0),                                              // 38: protocol.DOTALeaverStatus_t
	(*CMsgPendingEventAward)(nil),                                       // 39: protocol.CMsgPendingEventAward
	(EDOTAMMRBoostType)(0),                                              // 40: protocol.EDOTAMMRBoostType
	(EEvent)(0),                                                         // 41: protocol.EEvent
	(DOTA_GameState)(0),                                                 // 42: protocol.DOTA_GameState
	(DOTA_CM_PICK)(0),                                                   // 43: protocol.DOTA_CM_PICK
	(DOTABotDifficulty)(0),                                              // 44: protocol.DOTABotDifficulty
	(EMatchOutcome)(0),                                                  // 45: protocol.EMatchOutcome
	(DOTALobbyVisibility)(0),                                            // 46: protocol.DOTALobbyVisibility
	(DOTASelectionPriorityRules)(0),                                     // 47: protocol.DOTASelectionPriorityRules
	(DOTASelectionPriorityChoice)(0),                                    // 48: protocol.DOTASelectionPriorityChoice
	(*CExtraMsgBlock)(nil),                                              // 49: protocol.CExtraMsgBlock
}
var file_dota_gcmessages_common_lobby_proto_depIdxs = []int32{
	0,  // 0: protocol.CMsgLobbyCoachFriendRequest.request_state:type_name -> protocol.ELobbyMemberCoachRequestState
	31, // 1: protocol.CMsgLobbyPlayerPlusSubscriptionData.hero_badges:type_name -> protocol.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge
	32, // 2: protocol.CMsgLobbyEventPoints.account_points:type_name -> protocol.CMsgLobbyEventPoints.AccountPoints
	33, // 3: protocol.CSODOTALobbyInvite.members:type_name -> protocol.CSODOTALobbyInvite.LobbyMember
	37, // 4: protocol.CSODOTALobbyMember.team:type_name -> protocol.DOTA_GC_TEAM
	38, // 5: protocol.CSODOTALobbyMember.leaver_status:type_name -> protocol.DOTALeaverStatus_t
	37, // 6: protocol.CSODOTALobbyMember.coach_team:type_name -> protocol.DOTA_GC_TEAM
	37, // 7: protocol.CSODOTALobbyMember.live_spectator_team:type_name -> protocol.DOTA_GC_TEAM
	39, // 8: protocol.CSODOTALobbyMember.pending_awards:type_name -> protocol.CMsgPendingEventAward
	39, // 9: protocol.CSODOTALobbyMember.pending_awards_on_victory:type_name -> protocol.CMsgPendingEventAward
	40, // 10: protocol.CSODOTAServerStaticLobbyMember.rank_mmr_boost_type:type_name -> protocol.EDOTAMMRBoostType
	37, // 11: protocol.CLobbyGuildDetails.team_for_guild:type_name -> protocol.DOTA_GC_TEAM
	41, // 12: protocol.CLobbyGuildChallenge.event_id:type_name -> protocol.EEvent
	12, // 13: protocol.CSODOTALobby.all_members:type_name -> protocol.CSODOTALobbyMember
	3,  // 14: protocol.CSODOTALobby.state:type_name -> protocol.CSODOTALobby.State
	4,  // 15: protocol.CSODOTALobby.lobby_type:type_name -> protocol.CSODOTALobby.LobbyType
	16, // 16: protocol.CSODOTALobby.team_details:type_name -> protocol.CLobbyTeamDetails
	42, // 17: protocol.CSODOTALobby.game_state:type_name -> protocol.DOTA_GameState
	43, // 18: protocol.CSODOTALobby.cm_pick:type_name -> protocol.DOTA_CM_PICK
	44, // 19: protocol.CSODOTALobby.bot_difficulty_radiant:type_name -> protocol.DOTABotDifficulty
	1,  // 20: protocol.CSODOTALobby.dota_tv_delay:type_name -> protocol.LobbyDotaTVDelay
	19, // 21: protocol.CSODOTALobby.broadcast_channel_info:type_name -> protocol.CLobbyBroadcastChannelInfo
	34, // 22: protocol.CSODOTALobby.extra_messages:type_name -> protocol.CSODOTALobby.CExtraMsg
	45, // 23: protocol.CSODOTALobby.match_outcome:type_name -> protocol.EMatchOutcome
	46, // 24: protocol.CSODOTALobby.visibility:type_name -> protocol.DOTALobbyVisibility
	2,  // 25: protocol.CSODOTALobby.pause_setting:type_name -> protocol.LobbyDotaPauseSetting
	44, // 26: protocol.CSODOTALobby.bot_difficulty_dire:type_name -> protocol.DOTABotDifficulty
	41, // 27: protocol.CSODOTALobby.event_progression_enabled:type_name -> protocol.EEvent
	47, // 28: protocol.CSODOTALobby.selection_priority_rules:type_name -> protocol.DOTASelectionPriorityRules
	48, // 29: protocol.CSODOTALobby.series_current_priority_team_choice:type_name -> protocol.DOTASelectionPriorityChoice
	48, // 30: protocol.CSODOTALobby.series_current_non_priority_team_choice:type_name -> protocol.DOTASelectionPriorityChoice
	41, // 31: protocol.CSODOTALobby.current_primary_event:type_name -> protocol.EEvent
	20, // 32: protocol.CSODOTALobby.guild_challenges:type_name -> protocol.CLobbyGuildChallenge
	17, // 33: protocol.CSODOTALobby.guild_details:type_name -> protocol.CLobbyGuildDetails
	5,  // 34: protocol.CSODOTALobby.coach_friend_requests:type_name -> protocol.CMsgLobbyCoachFriendRequest
	21, // 35: protocol.CSODOTALobby.match_quality_data:type_name -> protocol.CDOTALobbyMatchQualityData
	13, // 36: protocol.CSODOTAServerLobby.all_members:type_name -> protocol.CSODOTAServerLobbyMember
	34, // 37: protocol.CSODOTAServerLobby.extra_startup_messages:type_name -> protocol.CSODOTALobby.CExtraMsg
	14, // 38: protocol.CSODOTAStaticLobby.all_members:type_name -> protocol.CSODOTAStaticLobbyMember
	15, // 39: protocol.CSODOTAServerStaticLobby.all_members:type_name -> protocol.CSODOTAServerStaticLobbyMember
	9,  // 40: protocol.CSODOTAServerStaticLobby.lobby_event_points:type_name -> protocol.CMsgLobbyEventPoints
	6,  // 41: protocol.CMsgAdditionalLobbyStartupAccountData.plus_data:type_name -> protocol.CMsgLobbyPlayerPlusSubscriptionData
	35, // 42: protocol.CMsgAdditionalLobbyStartupAccountData.unlocked_chat_wheel_message_ranges:type_name -> protocol.CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange
	36, // 43: protocol.CMsgAdditionalLobbyStartupAccountData.unlocked_ping_wheel_message_ranges:type_name -> protocol.CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange
	41, // 44: protocol.CMsgLocalServerGuildData.event_id:type_name -> protocol.EEvent
	9,  // 45: protocol.CMsgLocalServerFakeLobbyData.event_points:type_name -> protocol.CMsgLobbyEventPoints
	29, // 46: protocol.CMsgLocalServerFakeLobbyData.guild_info:type_name -> protocol.CMsgLocalServerGuildData
	26, // 47: protocol.CMsgLocalServerFakeLobbyData.additional_data:type_name -> protocol.CMsgAdditionalLobbyStartupAccountData
	7,  // 48: protocol.CMsgLobbyEventPoints.AccountPoints.event_game_custom_actions:type_name -> protocol.CMsgEventActionData
	7,  // 49: protocol.CMsgLobbyEventPoints.AccountPoints.networked_event_actions:type_name -> protocol.CMsgEventActionData
	8,  // 50: protocol.CMsgLobbyEventPoints.AccountPoints.periodic_resources:type_name -> protocol.CMsgPeriodicResourceData
	49, // 51: protocol.CMsgLobbyEventPoints.AccountPoints.extra_event_messages:type_name -> protocol.CExtraMsgBlock
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_common_lobby_proto_init() }
func file_dota_gcmessages_common_lobby_proto_init() {
	if File_dota_gcmessages_common_lobby_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_dota_shared_enums_proto_init()
	file_gcsdk_gcmessages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dota_gcmessages_common_lobby_proto_rawDesc), len(file_dota_gcmessages_common_lobby_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_common_lobby_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_common_lobby_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_common_lobby_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_common_lobby_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_common_lobby_proto = out.File
	file_dota_gcmessages_common_lobby_proto_goTypes = nil
	file_dota_gcmessages_common_lobby_proto_depIdxs = nil
}
