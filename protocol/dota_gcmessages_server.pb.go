// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dota_gcmessages_server.proto

package protocol

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EPoorNetworkConditionsType int32

const (
	EPoorNetworkConditionsType_k_EPoorNetworkConditions_None                  EPoorNetworkConditionsType = 0
	EPoorNetworkConditionsType_k_EPoorNetworkConditions_Unknown               EPoorNetworkConditionsType = 1
	EPoorNetworkConditionsType_k_EPoorNetworkConditions_MassDisconnect        EPoorNetworkConditionsType = 2
	EPoorNetworkConditionsType_k_EPoorNetworkConditions_ExcessBadQosIntervals EPoorNetworkConditionsType = 3
)

// Enum value maps for EPoorNetworkConditionsType.
var (
	EPoorNetworkConditionsType_name = map[int32]string{
		0: "k_EPoorNetworkConditions_None",
		1: "k_EPoorNetworkConditions_Unknown",
		2: "k_EPoorNetworkConditions_MassDisconnect",
		3: "k_EPoorNetworkConditions_ExcessBadQosIntervals",
	}
	EPoorNetworkConditionsType_value = map[string]int32{
		"k_EPoorNetworkConditions_None":                  0,
		"k_EPoorNetworkConditions_Unknown":               1,
		"k_EPoorNetworkConditions_MassDisconnect":        2,
		"k_EPoorNetworkConditions_ExcessBadQosIntervals": 3,
	}
)

func (x EPoorNetworkConditionsType) Enum() *EPoorNetworkConditionsType {
	p := new(EPoorNetworkConditionsType)
	*p = x
	return p
}

func (x EPoorNetworkConditionsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPoorNetworkConditionsType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[0].Descriptor()
}

func (EPoorNetworkConditionsType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[0]
}

func (x EPoorNetworkConditionsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPoorNetworkConditionsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPoorNetworkConditionsType(num)
	return nil
}

// Deprecated: Use EPoorNetworkConditionsType.Descriptor instead.
func (EPoorNetworkConditionsType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

type CMsgConnectedPlayers_SendReason int32

const (
	CMsgConnectedPlayers_INVALID                            CMsgConnectedPlayers_SendReason = 0
	CMsgConnectedPlayers_HEARTBEAT                          CMsgConnectedPlayers_SendReason = 1
	CMsgConnectedPlayers_GAME_STATE                         CMsgConnectedPlayers_SendReason = 2
	CMsgConnectedPlayers_FIRST_BLOOD                        CMsgConnectedPlayers_SendReason = 3
	CMsgConnectedPlayers_PLAYER_CONNECTED                   CMsgConnectedPlayers_SendReason = 4
	CMsgConnectedPlayers_PLAYER_HERO                        CMsgConnectedPlayers_SendReason = 5
	CMsgConnectedPlayers_PLAYER_DISCONNECTED_CONSEQUENCES   CMsgConnectedPlayers_SendReason = 6
	CMsgConnectedPlayers_PLAYER_DISCONNECTED_NOCONSEQUENCES CMsgConnectedPlayers_SendReason = 7
	CMsgConnectedPlayers_GAMESTATE_TIMEOUT                  CMsgConnectedPlayers_SendReason = 10
	CMsgConnectedPlayers_MASS_DISCONNECT                    CMsgConnectedPlayers_SendReason = 11
	CMsgConnectedPlayers_KILLS                              CMsgConnectedPlayers_SendReason = 13
	CMsgConnectedPlayers_BUILDING_STATE                     CMsgConnectedPlayers_SendReason = 14
)

// Enum value maps for CMsgConnectedPlayers_SendReason.
var (
	CMsgConnectedPlayers_SendReason_name = map[int32]string{
		0:  "INVALID",
		1:  "HEARTBEAT",
		2:  "GAME_STATE",
		3:  "FIRST_BLOOD",
		4:  "PLAYER_CONNECTED",
		5:  "PLAYER_HERO",
		6:  "PLAYER_DISCONNECTED_CONSEQUENCES",
		7:  "PLAYER_DISCONNECTED_NOCONSEQUENCES",
		10: "GAMESTATE_TIMEOUT",
		11: "MASS_DISCONNECT",
		13: "KILLS",
		14: "BUILDING_STATE",
	}
	CMsgConnectedPlayers_SendReason_value = map[string]int32{
		"INVALID":                            0,
		"HEARTBEAT":                          1,
		"GAME_STATE":                         2,
		"FIRST_BLOOD":                        3,
		"PLAYER_CONNECTED":                   4,
		"PLAYER_HERO":                        5,
		"PLAYER_DISCONNECTED_CONSEQUENCES":   6,
		"PLAYER_DISCONNECTED_NOCONSEQUENCES": 7,
		"GAMESTATE_TIMEOUT":                  10,
		"MASS_DISCONNECT":                    11,
		"KILLS":                              13,
		"BUILDING_STATE":                     14,
	}
)

func (x CMsgConnectedPlayers_SendReason) Enum() *CMsgConnectedPlayers_SendReason {
	p := new(CMsgConnectedPlayers_SendReason)
	*p = x
	return p
}

func (x CMsgConnectedPlayers_SendReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgConnectedPlayers_SendReason) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[1].Descriptor()
}

func (CMsgConnectedPlayers_SendReason) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[1]
}

func (x CMsgConnectedPlayers_SendReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgConnectedPlayers_SendReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgConnectedPlayers_SendReason(num)
	return nil
}

// Deprecated: Use CMsgConnectedPlayers_SendReason.Descriptor instead.
func (CMsgConnectedPlayers_SendReason) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{2, 0}
}

type CMsgGameServerInfo_ServerType int32

const (
	CMsgGameServerInfo_UNSPECIFIED      CMsgGameServerInfo_ServerType = 0
	CMsgGameServerInfo_GAME             CMsgGameServerInfo_ServerType = 1
	CMsgGameServerInfo_PROXY            CMsgGameServerInfo_ServerType = 2
	CMsgGameServerInfo_DOTA_ONLY        CMsgGameServerInfo_ServerType = 4
	CMsgGameServerInfo_CUSTOM_GAME_ONLY CMsgGameServerInfo_ServerType = 5
	CMsgGameServerInfo_EVENT_GAME_ONLY  CMsgGameServerInfo_ServerType = 6
)

// Enum value maps for CMsgGameServerInfo_ServerType.
var (
	CMsgGameServerInfo_ServerType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "GAME",
		2: "PROXY",
		4: "DOTA_ONLY",
		5: "CUSTOM_GAME_ONLY",
		6: "EVENT_GAME_ONLY",
	}
	CMsgGameServerInfo_ServerType_value = map[string]int32{
		"UNSPECIFIED":      0,
		"GAME":             1,
		"PROXY":            2,
		"DOTA_ONLY":        4,
		"CUSTOM_GAME_ONLY": 5,
		"EVENT_GAME_ONLY":  6,
	}
)

func (x CMsgGameServerInfo_ServerType) Enum() *CMsgGameServerInfo_ServerType {
	p := new(CMsgGameServerInfo_ServerType)
	*p = x
	return p
}

func (x CMsgGameServerInfo_ServerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameServerInfo_ServerType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[2].Descriptor()
}

func (CMsgGameServerInfo_ServerType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[2]
}

func (x CMsgGameServerInfo_ServerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameServerInfo_ServerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameServerInfo_ServerType(num)
	return nil
}

// Deprecated: Use CMsgGameServerInfo_ServerType.Descriptor instead.
func (CMsgGameServerInfo_ServerType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{3, 0}
}

type CMsgGameServerInfo_CustomGames int32

const (
	CMsgGameServerInfo_BOTH  CMsgGameServerInfo_CustomGames = 0
	CMsgGameServerInfo_NONE  CMsgGameServerInfo_CustomGames = 1
	CMsgGameServerInfo_ONLY  CMsgGameServerInfo_CustomGames = 2
	CMsgGameServerInfo_EVENT CMsgGameServerInfo_CustomGames = 3
)

// Enum value maps for CMsgGameServerInfo_CustomGames.
var (
	CMsgGameServerInfo_CustomGames_name = map[int32]string{
		0: "BOTH",
		1: "NONE",
		2: "ONLY",
		3: "EVENT",
	}
	CMsgGameServerInfo_CustomGames_value = map[string]int32{
		"BOTH":  0,
		"NONE":  1,
		"ONLY":  2,
		"EVENT": 3,
	}
)

func (x CMsgGameServerInfo_CustomGames) Enum() *CMsgGameServerInfo_CustomGames {
	p := new(CMsgGameServerInfo_CustomGames)
	*p = x
	return p
}

func (x CMsgGameServerInfo_CustomGames) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameServerInfo_CustomGames) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[3].Descriptor()
}

func (CMsgGameServerInfo_CustomGames) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[3]
}

func (x CMsgGameServerInfo_CustomGames) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameServerInfo_CustomGames) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameServerInfo_CustomGames(num)
	return nil
}

// Deprecated: Use CMsgGameServerInfo_CustomGames.Descriptor instead.
func (CMsgGameServerInfo_CustomGames) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{3, 1}
}

type CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType int32

const (
	CMsgGameMatchSignOut_CTeam_CPlayer_HERO_DAMAGE_PHYSICAL CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType = 0
	CMsgGameMatchSignOut_CTeam_CPlayer_HERO_DAMAGE_MAGICAL  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType = 1
	CMsgGameMatchSignOut_CTeam_CPlayer_HERO_DAMAGE_PURE     CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType = 2
)

// Enum value maps for CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType.
var (
	CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_name = map[int32]string{
		0: "HERO_DAMAGE_PHYSICAL",
		1: "HERO_DAMAGE_MAGICAL",
		2: "HERO_DAMAGE_PURE",
	}
	CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_value = map[string]int32{
		"HERO_DAMAGE_PHYSICAL": 0,
		"HERO_DAMAGE_MAGICAL":  1,
		"HERO_DAMAGE_PURE":     2,
	}
)

func (x CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) Enum() *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType {
	p := new(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType)
	*p = x
	return p
}

func (x CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[4].Descriptor()
}

func (CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[4]
}

func (x CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType(num)
	return nil
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType.Descriptor instead.
func (CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 0, 0, 0}
}

type CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState int32

const (
	CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateNotLearned CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState = 0
	CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateCooldown   CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState = 1
	CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateNeedsMana  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState = 2
	CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateReady      CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState = 3
)

// Enum value maps for CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState.
var (
	CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_name = map[int32]string{
		0: "k_EDOTAUltimateStateNotLearned",
		1: "k_EDOTAUltimateStateCooldown",
		2: "k_EDOTAUltimateStateNeedsMana",
		3: "k_EDOTAUltimateStateReady",
	}
	CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_value = map[string]int32{
		"k_EDOTAUltimateStateNotLearned": 0,
		"k_EDOTAUltimateStateCooldown":   1,
		"k_EDOTAUltimateStateNeedsMana":  2,
		"k_EDOTAUltimateStateReady":      3,
	}
)

func (x CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) Enum() *CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState {
	p := new(CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState)
	*p = x
	return p
}

func (x CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[5].Descriptor()
}

func (CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[5]
}

func (x CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState(num)
	return nil
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState.Descriptor instead.
func (CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{24, 0, 0, 0}
}

type CMsgPoorNetworkConditions struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	DetectionType *EPoorNetworkConditionsType         `protobuf:"varint,1,opt,name=detection_type,json=detectionType,enum=protocol.EPoorNetworkConditionsType,def=0" json:"detection_type,omitempty"`
	Players       []*CMsgPoorNetworkConditions_Player `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgPoorNetworkConditions fields.
const (
	Default_CMsgPoorNetworkConditions_DetectionType = EPoorNetworkConditionsType_k_EPoorNetworkConditions_None
)

func (x *CMsgPoorNetworkConditions) Reset() {
	*x = CMsgPoorNetworkConditions{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPoorNetworkConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPoorNetworkConditions) ProtoMessage() {}

func (x *CMsgPoorNetworkConditions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPoorNetworkConditions.ProtoReflect.Descriptor instead.
func (*CMsgPoorNetworkConditions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgPoorNetworkConditions) GetDetectionType() EPoorNetworkConditionsType {
	if x != nil && x.DetectionType != nil {
		return *x.DetectionType
	}
	return Default_CMsgPoorNetworkConditions_DetectionType
}

func (x *CMsgPoorNetworkConditions) GetPlayers() []*CMsgPoorNetworkConditions_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameserverCrash struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	MatchId            *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LobbyId            *uint64                `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	GameState          *DOTA_GameState        `protobuf:"varint,3,opt,name=game_state,json=gameState,enum=protocol.DOTA_GameState,def=0" json:"game_state,omitempty"`
	SentinelSaveTime   *uint32                `protobuf:"fixed32,4,opt,name=sentinel_save_time,json=sentinelSaveTime" json:"sentinel_save_time,omitempty"`
	CustomGameId       *uint64                `protobuf:"fixed64,11,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	TournamentId       *uint32                `protobuf:"varint,12,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	ServerSteamId      *uint64                `protobuf:"fixed64,5,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	ServerPublicIpAddr *uint32                `protobuf:"fixed32,6,opt,name=server_public_ip_addr,json=serverPublicIpAddr" json:"server_public_ip_addr,omitempty"`
	ServerPort         *uint32                `protobuf:"varint,7,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	ServerCluster      *uint32                `protobuf:"varint,8,opt,name=server_cluster,json=serverCluster" json:"server_cluster,omitempty"`
	Pid                *uint32                `protobuf:"varint,9,opt,name=pid" json:"pid,omitempty"`
	Engine             *uint32                `protobuf:"varint,10,opt,name=engine" json:"engine,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgGameserverCrash fields.
const (
	Default_CMsgGameserverCrash_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
)

func (x *CMsgGameserverCrash) Reset() {
	*x = CMsgGameserverCrash{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameserverCrash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameserverCrash) ProtoMessage() {}

func (x *CMsgGameserverCrash) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameserverCrash.ProtoReflect.Descriptor instead.
func (*CMsgGameserverCrash) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgGameserverCrash) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetGameState() DOTA_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CMsgGameserverCrash_GameState
}

func (x *CMsgGameserverCrash) GetSentinelSaveTime() uint32 {
	if x != nil && x.SentinelSaveTime != nil {
		return *x.SentinelSaveTime
	}
	return 0
}

func (x *CMsgGameserverCrash) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetServerPublicIpAddr() uint32 {
	if x != nil && x.ServerPublicIpAddr != nil {
		return *x.ServerPublicIpAddr
	}
	return 0
}

func (x *CMsgGameserverCrash) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgGameserverCrash) GetServerCluster() uint32 {
	if x != nil && x.ServerCluster != nil {
		return *x.ServerCluster
	}
	return 0
}

func (x *CMsgGameserverCrash) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CMsgGameserverCrash) GetEngine() uint32 {
	if x != nil && x.Engine != nil {
		return *x.Engine
	}
	return 0
}

type CMsgConnectedPlayers struct {
	state                 protoimpl.MessageState              `protogen:"open.v1"`
	ConnectedPlayers      []*CMsgConnectedPlayers_Player      `protobuf:"bytes,1,rep,name=connected_players,json=connectedPlayers" json:"connected_players,omitempty"`
	DisconnectedPlayers   []*CMsgConnectedPlayers_Player      `protobuf:"bytes,7,rep,name=disconnected_players,json=disconnectedPlayers" json:"disconnected_players,omitempty"`
	GameState             *DOTA_GameState                     `protobuf:"varint,2,opt,name=game_state,json=gameState,enum=protocol.DOTA_GameState,def=0" json:"game_state,omitempty"`
	FirstBloodHappened    *bool                               `protobuf:"varint,6,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	PoorNetworkConditions *CMsgPoorNetworkConditions          `protobuf:"bytes,10,opt,name=poor_network_conditions,json=poorNetworkConditions" json:"poor_network_conditions,omitempty"`
	SendReason            *CMsgConnectedPlayers_SendReason    `protobuf:"varint,8,opt,name=send_reason,json=sendReason,enum=protocol.CMsgConnectedPlayers_SendReason,def=0" json:"send_reason,omitempty"`
	RadiantKills          *uint32                             `protobuf:"varint,11,opt,name=radiant_kills,json=radiantKills" json:"radiant_kills,omitempty"`
	DireKills             *uint32                             `protobuf:"varint,12,opt,name=dire_kills,json=direKills" json:"dire_kills,omitempty"`
	RadiantLead           *int32                              `protobuf:"varint,14,opt,name=radiant_lead,json=radiantLead" json:"radiant_lead,omitempty"`
	BuildingState         *uint32                             `protobuf:"varint,15,opt,name=building_state,json=buildingState" json:"building_state,omitempty"`
	PlayerDraft           []*CMsgConnectedPlayers_PlayerDraft `protobuf:"bytes,16,rep,name=player_draft,json=playerDraft" json:"player_draft,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for CMsgConnectedPlayers fields.
const (
	Default_CMsgConnectedPlayers_GameState  = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
	Default_CMsgConnectedPlayers_SendReason = CMsgConnectedPlayers_INVALID
)

func (x *CMsgConnectedPlayers) Reset() {
	*x = CMsgConnectedPlayers{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgConnectedPlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgConnectedPlayers) ProtoMessage() {}

func (x *CMsgConnectedPlayers) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgConnectedPlayers.ProtoReflect.Descriptor instead.
func (*CMsgConnectedPlayers) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgConnectedPlayers) GetConnectedPlayers() []*CMsgConnectedPlayers_Player {
	if x != nil {
		return x.ConnectedPlayers
	}
	return nil
}

func (x *CMsgConnectedPlayers) GetDisconnectedPlayers() []*CMsgConnectedPlayers_Player {
	if x != nil {
		return x.DisconnectedPlayers
	}
	return nil
}

func (x *CMsgConnectedPlayers) GetGameState() DOTA_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CMsgConnectedPlayers_GameState
}

func (x *CMsgConnectedPlayers) GetFirstBloodHappened() bool {
	if x != nil && x.FirstBloodHappened != nil {
		return *x.FirstBloodHappened
	}
	return false
}

func (x *CMsgConnectedPlayers) GetPoorNetworkConditions() *CMsgPoorNetworkConditions {
	if x != nil {
		return x.PoorNetworkConditions
	}
	return nil
}

func (x *CMsgConnectedPlayers) GetSendReason() CMsgConnectedPlayers_SendReason {
	if x != nil && x.SendReason != nil {
		return *x.SendReason
	}
	return Default_CMsgConnectedPlayers_SendReason
}

func (x *CMsgConnectedPlayers) GetRadiantKills() uint32 {
	if x != nil && x.RadiantKills != nil {
		return *x.RadiantKills
	}
	return 0
}

func (x *CMsgConnectedPlayers) GetDireKills() uint32 {
	if x != nil && x.DireKills != nil {
		return *x.DireKills
	}
	return 0
}

func (x *CMsgConnectedPlayers) GetRadiantLead() int32 {
	if x != nil && x.RadiantLead != nil {
		return *x.RadiantLead
	}
	return 0
}

func (x *CMsgConnectedPlayers) GetBuildingState() uint32 {
	if x != nil && x.BuildingState != nil {
		return *x.BuildingState
	}
	return 0
}

func (x *CMsgConnectedPlayers) GetPlayerDraft() []*CMsgConnectedPlayers_PlayerDraft {
	if x != nil {
		return x.PlayerDraft
	}
	return nil
}

type CMsgGameServerInfo struct {
	state                            protoimpl.MessageState          `protogen:"open.v1"`
	ServerPublicIpAddr               *uint32                         `protobuf:"fixed32,1,opt,name=server_public_ip_addr,json=serverPublicIpAddr" json:"server_public_ip_addr,omitempty"`
	ServerPrivateIpAddr              *uint32                         `protobuf:"fixed32,2,opt,name=server_private_ip_addr,json=serverPrivateIpAddr" json:"server_private_ip_addr,omitempty"`
	ServerPort                       *uint32                         `protobuf:"varint,3,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	ServerTvPort                     *uint32                         `protobuf:"varint,4,opt,name=server_tv_port,json=serverTvPort" json:"server_tv_port,omitempty"`
	AssignedServerTvPort             *uint32                         `protobuf:"varint,22,opt,name=assigned_server_tv_port,json=assignedServerTvPort" json:"assigned_server_tv_port,omitempty"`
	LegacyServerSteamdatagramAddress []byte                          `protobuf:"bytes,27,opt,name=legacy_server_steamdatagram_address,json=legacyServerSteamdatagramAddress" json:"legacy_server_steamdatagram_address,omitempty"`
	ServerKey                        *string                         `protobuf:"bytes,5,opt,name=server_key,json=serverKey" json:"server_key,omitempty"`
	ServerHibernation                *bool                           `protobuf:"varint,6,opt,name=server_hibernation,json=serverHibernation" json:"server_hibernation,omitempty"`
	ServerType                       *CMsgGameServerInfo_ServerType  `protobuf:"varint,7,opt,name=server_type,json=serverType,enum=protocol.CMsgGameServerInfo_ServerType,def=0" json:"server_type,omitempty"`
	ServerRegion                     *uint32                         `protobuf:"varint,8,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	ServerLoadavg                    *float32                        `protobuf:"fixed32,9,opt,name=server_loadavg,json=serverLoadavg" json:"server_loadavg,omitempty"`
	ServerTvBroadcastTime            *float32                        `protobuf:"fixed32,10,opt,name=server_tv_broadcast_time,json=serverTvBroadcastTime" json:"server_tv_broadcast_time,omitempty"`
	ServerGameTime                   *float32                        `protobuf:"fixed32,11,opt,name=server_game_time,json=serverGameTime" json:"server_game_time,omitempty"`
	ServerRelayConnectedSteamId      *uint64                         `protobuf:"fixed64,12,opt,name=server_relay_connected_steam_id,json=serverRelayConnectedSteamId" json:"server_relay_connected_steam_id,omitempty"`
	RelaySlotsMax                    *uint32                         `protobuf:"varint,13,opt,name=relay_slots_max,json=relaySlotsMax" json:"relay_slots_max,omitempty"`
	RelaysConnected                  *int32                          `protobuf:"varint,14,opt,name=relays_connected,json=relaysConnected" json:"relays_connected,omitempty"`
	RelayClientsConnected            *int32                          `protobuf:"varint,15,opt,name=relay_clients_connected,json=relayClientsConnected" json:"relay_clients_connected,omitempty"`
	RelayedGameServerSteamId         *uint64                         `protobuf:"fixed64,16,opt,name=relayed_game_server_steam_id,json=relayedGameServerSteamId" json:"relayed_game_server_steam_id,omitempty"`
	ParentRelayCount                 *uint32                         `protobuf:"varint,17,opt,name=parent_relay_count,json=parentRelayCount" json:"parent_relay_count,omitempty"`
	TvSecretCode                     *uint64                         `protobuf:"fixed64,18,opt,name=tv_secret_code,json=tvSecretCode" json:"tv_secret_code,omitempty"`
	ServerVersion                    *uint32                         `protobuf:"varint,19,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	ServerCluster                    *uint32                         `protobuf:"varint,20,opt,name=server_cluster,json=serverCluster" json:"server_cluster,omitempty"`
	AllowCustomGames                 *CMsgGameServerInfo_CustomGames `protobuf:"varint,23,opt,name=allow_custom_games,json=allowCustomGames,enum=protocol.CMsgGameServerInfo_CustomGames,def=0" json:"allow_custom_games,omitempty"`
	BuildVersion                     *uint32                         `protobuf:"varint,24,opt,name=build_version,json=buildVersion" json:"build_version,omitempty"`
	SrcdsInstance                    *uint32                         `protobuf:"varint,26,opt,name=srcds_instance,json=srcdsInstance" json:"srcds_instance,omitempty"`
	DevForceServerType               *bool                           `protobuf:"varint,28,opt,name=dev_force_server_type,json=devForceServerType" json:"dev_force_server_type,omitempty"`
	IsRecordingMatchTrainingData     *bool                           `protobuf:"varint,29,opt,name=is_recording_match_training_data,json=isRecordingMatchTrainingData" json:"is_recording_match_training_data,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

// Default values for CMsgGameServerInfo fields.
const (
	Default_CMsgGameServerInfo_ServerType       = CMsgGameServerInfo_UNSPECIFIED
	Default_CMsgGameServerInfo_AllowCustomGames = CMsgGameServerInfo_BOTH
)

func (x *CMsgGameServerInfo) Reset() {
	*x = CMsgGameServerInfo{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerInfo) ProtoMessage() {}

func (x *CMsgGameServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerInfo.ProtoReflect.Descriptor instead.
func (*CMsgGameServerInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgGameServerInfo) GetServerPublicIpAddr() uint32 {
	if x != nil && x.ServerPublicIpAddr != nil {
		return *x.ServerPublicIpAddr
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerPrivateIpAddr() uint32 {
	if x != nil && x.ServerPrivateIpAddr != nil {
		return *x.ServerPrivateIpAddr
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerTvPort() uint32 {
	if x != nil && x.ServerTvPort != nil {
		return *x.ServerTvPort
	}
	return 0
}

func (x *CMsgGameServerInfo) GetAssignedServerTvPort() uint32 {
	if x != nil && x.AssignedServerTvPort != nil {
		return *x.AssignedServerTvPort
	}
	return 0
}

func (x *CMsgGameServerInfo) GetLegacyServerSteamdatagramAddress() []byte {
	if x != nil {
		return x.LegacyServerSteamdatagramAddress
	}
	return nil
}

func (x *CMsgGameServerInfo) GetServerKey() string {
	if x != nil && x.ServerKey != nil {
		return *x.ServerKey
	}
	return ""
}

func (x *CMsgGameServerInfo) GetServerHibernation() bool {
	if x != nil && x.ServerHibernation != nil {
		return *x.ServerHibernation
	}
	return false
}

func (x *CMsgGameServerInfo) GetServerType() CMsgGameServerInfo_ServerType {
	if x != nil && x.ServerType != nil {
		return *x.ServerType
	}
	return Default_CMsgGameServerInfo_ServerType
}

func (x *CMsgGameServerInfo) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerLoadavg() float32 {
	if x != nil && x.ServerLoadavg != nil {
		return *x.ServerLoadavg
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerTvBroadcastTime() float32 {
	if x != nil && x.ServerTvBroadcastTime != nil {
		return *x.ServerTvBroadcastTime
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerGameTime() float32 {
	if x != nil && x.ServerGameTime != nil {
		return *x.ServerGameTime
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerRelayConnectedSteamId() uint64 {
	if x != nil && x.ServerRelayConnectedSteamId != nil {
		return *x.ServerRelayConnectedSteamId
	}
	return 0
}

func (x *CMsgGameServerInfo) GetRelaySlotsMax() uint32 {
	if x != nil && x.RelaySlotsMax != nil {
		return *x.RelaySlotsMax
	}
	return 0
}

func (x *CMsgGameServerInfo) GetRelaysConnected() int32 {
	if x != nil && x.RelaysConnected != nil {
		return *x.RelaysConnected
	}
	return 0
}

func (x *CMsgGameServerInfo) GetRelayClientsConnected() int32 {
	if x != nil && x.RelayClientsConnected != nil {
		return *x.RelayClientsConnected
	}
	return 0
}

func (x *CMsgGameServerInfo) GetRelayedGameServerSteamId() uint64 {
	if x != nil && x.RelayedGameServerSteamId != nil {
		return *x.RelayedGameServerSteamId
	}
	return 0
}

func (x *CMsgGameServerInfo) GetParentRelayCount() uint32 {
	if x != nil && x.ParentRelayCount != nil {
		return *x.ParentRelayCount
	}
	return 0
}

func (x *CMsgGameServerInfo) GetTvSecretCode() uint64 {
	if x != nil && x.TvSecretCode != nil {
		return *x.TvSecretCode
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerCluster() uint32 {
	if x != nil && x.ServerCluster != nil {
		return *x.ServerCluster
	}
	return 0
}

func (x *CMsgGameServerInfo) GetAllowCustomGames() CMsgGameServerInfo_CustomGames {
	if x != nil && x.AllowCustomGames != nil {
		return *x.AllowCustomGames
	}
	return Default_CMsgGameServerInfo_AllowCustomGames
}

func (x *CMsgGameServerInfo) GetBuildVersion() uint32 {
	if x != nil && x.BuildVersion != nil {
		return *x.BuildVersion
	}
	return 0
}

func (x *CMsgGameServerInfo) GetSrcdsInstance() uint32 {
	if x != nil && x.SrcdsInstance != nil {
		return *x.SrcdsInstance
	}
	return 0
}

func (x *CMsgGameServerInfo) GetDevForceServerType() bool {
	if x != nil && x.DevForceServerType != nil {
		return *x.DevForceServerType
	}
	return false
}

func (x *CMsgGameServerInfo) GetIsRecordingMatchTrainingData() bool {
	if x != nil && x.IsRecordingMatchTrainingData != nil {
		return *x.IsRecordingMatchTrainingData
	}
	return false
}

type CMsgLeaverDetected struct {
	state                 protoimpl.MessageState       `protogen:"open.v1"`
	SteamId               *uint64                      `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	LeaverStatus          *DOTALeaverStatusT           `protobuf:"varint,2,opt,name=leaver_status,json=leaverStatus,enum=protocol.DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverState           *CMsgLeaverState             `protobuf:"bytes,4,opt,name=leaver_state,json=leaverState" json:"leaver_state,omitempty"`
	ServerCluster         *uint32                      `protobuf:"varint,5,opt,name=server_cluster,json=serverCluster" json:"server_cluster,omitempty"`
	DisconnectReason      *ENetworkDisconnectionReason `protobuf:"varint,6,opt,name=disconnect_reason,json=disconnectReason,enum=protocol.ENetworkDisconnectionReason,def=0" json:"disconnect_reason,omitempty"`
	PoorNetworkConditions *CMsgPoorNetworkConditions   `protobuf:"bytes,7,opt,name=poor_network_conditions,json=poorNetworkConditions" json:"poor_network_conditions,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for CMsgLeaverDetected fields.
const (
	Default_CMsgLeaverDetected_LeaverStatus     = DOTALeaverStatusT_DOTA_LEAVER_NONE
	Default_CMsgLeaverDetected_DisconnectReason = ENetworkDisconnectionReason_NETWORK_DISCONNECT_INVALID
)

func (x *CMsgLeaverDetected) Reset() {
	*x = CMsgLeaverDetected{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLeaverDetected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLeaverDetected) ProtoMessage() {}

func (x *CMsgLeaverDetected) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLeaverDetected.ProtoReflect.Descriptor instead.
func (*CMsgLeaverDetected) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgLeaverDetected) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgLeaverDetected) GetLeaverStatus() DOTALeaverStatusT {
	if x != nil && x.LeaverStatus != nil {
		return *x.LeaverStatus
	}
	return Default_CMsgLeaverDetected_LeaverStatus
}

func (x *CMsgLeaverDetected) GetLeaverState() *CMsgLeaverState {
	if x != nil {
		return x.LeaverState
	}
	return nil
}

func (x *CMsgLeaverDetected) GetServerCluster() uint32 {
	if x != nil && x.ServerCluster != nil {
		return *x.ServerCluster
	}
	return 0
}

func (x *CMsgLeaverDetected) GetDisconnectReason() ENetworkDisconnectionReason {
	if x != nil && x.DisconnectReason != nil {
		return *x.DisconnectReason
	}
	return Default_CMsgLeaverDetected_DisconnectReason
}

func (x *CMsgLeaverDetected) GetPoorNetworkConditions() *CMsgPoorNetworkConditions {
	if x != nil {
		return x.PoorNetworkConditions
	}
	return nil
}

type CMsgLeaverDetectedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *uint32                `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgLeaverDetectedResponse) Reset() {
	*x = CMsgLeaverDetectedResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLeaverDetectedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLeaverDetectedResponse) ProtoMessage() {}

func (x *CMsgLeaverDetectedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLeaverDetectedResponse.ProtoReflect.Descriptor instead.
func (*CMsgLeaverDetectedResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgLeaverDetectedResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgDOTAFantasyFinalPlayerStats struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Stats         []*CMsgDOTAFantasyPlayerStats `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAFantasyFinalPlayerStats) Reset() {
	*x = CMsgDOTAFantasyFinalPlayerStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAFantasyFinalPlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyFinalPlayerStats) ProtoMessage() {}

func (x *CMsgDOTAFantasyFinalPlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyFinalPlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyFinalPlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgDOTAFantasyFinalPlayerStats) GetStats() []*CMsgDOTAFantasyPlayerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgDOTAFantasyLivePlayerStats struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Stats         []*CMsgDOTAFantasyPlayerStats `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAFantasyLivePlayerStats) Reset() {
	*x = CMsgDOTAFantasyLivePlayerStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAFantasyLivePlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLivePlayerStats) ProtoMessage() {}

func (x *CMsgDOTAFantasyLivePlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLivePlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLivePlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgDOTAFantasyLivePlayerStats) GetStats() []*CMsgDOTAFantasyPlayerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgServerToGCRealtimeStats struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Delayed       *CMsgDOTARealtimeGameStatsTerse `protobuf:"bytes,1,opt,name=delayed" json:"delayed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCRealtimeStats) Reset() {
	*x = CMsgServerToGCRealtimeStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCRealtimeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRealtimeStats) ProtoMessage() {}

func (x *CMsgServerToGCRealtimeStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRealtimeStats.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRealtimeStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgServerToGCRealtimeStats) GetDelayed() *CMsgDOTARealtimeGameStatsTerse {
	if x != nil {
		return x.Delayed
	}
	return nil
}

type CMsgGCToServerRealtimeStatsStartStop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Delayed       *bool                  `protobuf:"varint,1,opt,name=delayed" json:"delayed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerRealtimeStatsStartStop) Reset() {
	*x = CMsgGCToServerRealtimeStatsStartStop{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerRealtimeStatsStartStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerRealtimeStatsStartStop) ProtoMessage() {}

func (x *CMsgGCToServerRealtimeStatsStartStop) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerRealtimeStatsStartStop.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerRealtimeStatsStartStop) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgGCToServerRealtimeStatsStartStop) GetDelayed() bool {
	if x != nil && x.Delayed != nil {
		return *x.Delayed
	}
	return false
}

type CMsgGCToServerUpdateSteamBroadcasting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Active        *bool                  `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerUpdateSteamBroadcasting) Reset() {
	*x = CMsgGCToServerUpdateSteamBroadcasting{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerUpdateSteamBroadcasting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerUpdateSteamBroadcasting) ProtoMessage() {}

func (x *CMsgGCToServerUpdateSteamBroadcasting) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerUpdateSteamBroadcasting.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerUpdateSteamBroadcasting) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgGCToServerUpdateSteamBroadcasting) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

type CMsgSignOutGameplayStats struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Teams         []*CMsgSignOutGameplayStats_CTeam `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutGameplayStats) Reset() {
	*x = CMsgSignOutGameplayStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutGameplayStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGameplayStats) ProtoMessage() {}

func (x *CMsgSignOutGameplayStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGameplayStats.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGameplayStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgSignOutGameplayStats) GetTeams() []*CMsgSignOutGameplayStats_CTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

type CMsgGameMatchSignOut struct {
	state                         protoimpl.MessageState                            `protogen:"open.v1"`
	MatchId                       *uint64                                           `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Duration                      *uint32                                           `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	GoodGuysWin                   *bool                                             `protobuf:"varint,3,opt,name=good_guys_win,json=goodGuysWin" json:"good_guys_win,omitempty"`
	Date                          *uint32                                           `protobuf:"fixed32,4,opt,name=date" json:"date,omitempty"`
	Teams                         []*CMsgGameMatchSignOut_CTeam                     `protobuf:"bytes,6,rep,name=teams" json:"teams,omitempty"`
	TowerStatus                   []uint32                                          `protobuf:"varint,8,rep,name=tower_status,json=towerStatus" json:"tower_status,omitempty"`
	BarracksStatus                []uint32                                          `protobuf:"varint,9,rep,name=barracks_status,json=barracksStatus" json:"barracks_status,omitempty"`
	Cluster                       *uint32                                           `protobuf:"varint,10,opt,name=cluster" json:"cluster,omitempty"`
	ServerAddr                    *string                                           `protobuf:"bytes,11,opt,name=server_addr,json=serverAddr" json:"server_addr,omitempty"`
	FirstBloodTime                *uint32                                           `protobuf:"varint,12,opt,name=first_blood_time,json=firstBloodTime" json:"first_blood_time,omitempty"`
	EventScore                    *uint32                                           `protobuf:"varint,14,opt,name=event_score,json=eventScore" json:"event_score,omitempty"`
	FantasyStats                  []*CMsgDOTAFantasyPlayerStats                     `protobuf:"bytes,41,rep,name=fantasy_stats,json=fantasyStats" json:"fantasy_stats,omitempty"`
	PlayerStrangeCountAdjustments []*CMsgEconPlayerStrangeCountAdjustment           `protobuf:"bytes,17,rep,name=player_strange_count_adjustments,json=playerStrangeCountAdjustments" json:"player_strange_count_adjustments,omitempty"`
	AutomaticSurrender            *bool                                             `protobuf:"varint,18,opt,name=automatic_surrender,json=automaticSurrender" json:"automatic_surrender,omitempty"`
	ServerVersion                 *uint32                                           `protobuf:"varint,19,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	PoorNetworkConditions         *CMsgPoorNetworkConditions                        `protobuf:"bytes,35,opt,name=poor_network_conditions,json=poorNetworkConditions" json:"poor_network_conditions,omitempty"`
	AdditionalMsgs                []*CMsgGameMatchSignOut_CAdditionalSignoutMsg     `protobuf:"bytes,20,rep,name=additional_msgs,json=additionalMsgs" json:"additional_msgs,omitempty"`
	SocialFeedEvents              []*CMsgGameMatchSignOut_CSocialFeedMatchEvent     `protobuf:"bytes,36,rep,name=social_feed_events,json=socialFeedEvents" json:"social_feed_events,omitempty"`
	AverageNetworthDelta          *int32                                            `protobuf:"zigzag32,22,opt,name=average_networth_delta,json=averageNetworthDelta" json:"average_networth_delta,omitempty"`
	CustomGameData                *CMsgGameMatchSignOut_CCustomGameData             `protobuf:"bytes,37,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	MatchFlags                    *uint32                                           `protobuf:"varint,38,opt,name=match_flags,json=matchFlags" json:"match_flags,omitempty"`
	TeamScores                    []uint32                                          `protobuf:"varint,39,rep,name=team_scores,json=teamScores" json:"team_scores,omitempty"`
	PreGameDuration               *uint32                                           `protobuf:"varint,40,opt,name=pre_game_duration,json=preGameDuration" json:"pre_game_duration,omitempty"`
	EventGameLeaderboardEntries   []*CMsgGameMatchSignOut_EventGameLeaderboardEntry `protobuf:"bytes,42,rep,name=event_game_leaderboard_entries,json=eventGameLeaderboardEntries" json:"event_game_leaderboard_entries,omitempty"`
	WardPlacements                []*CMsgGameMatchSignOut_WardPlacement             `protobuf:"bytes,43,rep,name=ward_placements,json=wardPlacements" json:"ward_placements,omitempty"`
	GameplayStats                 *CMsgSignOutGameplayStats                         `protobuf:"bytes,44,opt,name=gameplay_stats,json=gameplayStats" json:"gameplay_stats,omitempty"`
	ExtraMessages                 []*CExtraMsgBlock                                 `protobuf:"bytes,54,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	TrainingDataRecorded          *bool                                             `protobuf:"varint,55,opt,name=training_data_recorded,json=trainingDataRecorded" json:"training_data_recorded,omitempty"`
	WinningTeam                   *DOTA_GC_TEAM                                     `protobuf:"varint,56,opt,name=winning_team,json=winningTeam,enum=protocol.DOTA_GC_TEAM,def=0" json:"winning_team,omitempty"`
	NormalizedWinProbabilityDiff  *float32                                          `protobuf:"fixed32,57,opt,name=normalized_win_probability_diff,json=normalizedWinProbabilityDiff" json:"normalized_win_probability_diff,omitempty"`
	MatchTrackedStats             []*CMsgTrackedStat                                `protobuf:"bytes,58,rep,name=match_tracked_stats,json=matchTrackedStats" json:"match_tracked_stats,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

// Default values for CMsgGameMatchSignOut fields.
const (
	Default_CMsgGameMatchSignOut_WinningTeam = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
)

func (x *CMsgGameMatchSignOut) Reset() {
	*x = CMsgGameMatchSignOut{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut) ProtoMessage() {}

func (x *CMsgGameMatchSignOut) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgGameMatchSignOut) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetGoodGuysWin() bool {
	if x != nil && x.GoodGuysWin != nil {
		return *x.GoodGuysWin
	}
	return false
}

func (x *CMsgGameMatchSignOut) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetTeams() []*CMsgGameMatchSignOut_CTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetTowerStatus() []uint32 {
	if x != nil {
		return x.TowerStatus
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetBarracksStatus() []uint32 {
	if x != nil {
		return x.BarracksStatus
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetCluster() uint32 {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetServerAddr() string {
	if x != nil && x.ServerAddr != nil {
		return *x.ServerAddr
	}
	return ""
}

func (x *CMsgGameMatchSignOut) GetFirstBloodTime() uint32 {
	if x != nil && x.FirstBloodTime != nil {
		return *x.FirstBloodTime
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetEventScore() uint32 {
	if x != nil && x.EventScore != nil {
		return *x.EventScore
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetFantasyStats() []*CMsgDOTAFantasyPlayerStats {
	if x != nil {
		return x.FantasyStats
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetPlayerStrangeCountAdjustments() []*CMsgEconPlayerStrangeCountAdjustment {
	if x != nil {
		return x.PlayerStrangeCountAdjustments
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetAutomaticSurrender() bool {
	if x != nil && x.AutomaticSurrender != nil {
		return *x.AutomaticSurrender
	}
	return false
}

func (x *CMsgGameMatchSignOut) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetPoorNetworkConditions() *CMsgPoorNetworkConditions {
	if x != nil {
		return x.PoorNetworkConditions
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetAdditionalMsgs() []*CMsgGameMatchSignOut_CAdditionalSignoutMsg {
	if x != nil {
		return x.AdditionalMsgs
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetSocialFeedEvents() []*CMsgGameMatchSignOut_CSocialFeedMatchEvent {
	if x != nil {
		return x.SocialFeedEvents
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetAverageNetworthDelta() int32 {
	if x != nil && x.AverageNetworthDelta != nil {
		return *x.AverageNetworthDelta
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetCustomGameData() *CMsgGameMatchSignOut_CCustomGameData {
	if x != nil {
		return x.CustomGameData
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetMatchFlags() uint32 {
	if x != nil && x.MatchFlags != nil {
		return *x.MatchFlags
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetTeamScores() []uint32 {
	if x != nil {
		return x.TeamScores
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetPreGameDuration() uint32 {
	if x != nil && x.PreGameDuration != nil {
		return *x.PreGameDuration
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetEventGameLeaderboardEntries() []*CMsgGameMatchSignOut_EventGameLeaderboardEntry {
	if x != nil {
		return x.EventGameLeaderboardEntries
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetWardPlacements() []*CMsgGameMatchSignOut_WardPlacement {
	if x != nil {
		return x.WardPlacements
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetGameplayStats() *CMsgSignOutGameplayStats {
	if x != nil {
		return x.GameplayStats
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetExtraMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetTrainingDataRecorded() bool {
	if x != nil && x.TrainingDataRecorded != nil {
		return *x.TrainingDataRecorded
	}
	return false
}

func (x *CMsgGameMatchSignOut) GetWinningTeam() DOTA_GC_TEAM {
	if x != nil && x.WinningTeam != nil {
		return *x.WinningTeam
	}
	return Default_CMsgGameMatchSignOut_WinningTeam
}

func (x *CMsgGameMatchSignOut) GetNormalizedWinProbabilityDiff() float32 {
	if x != nil && x.NormalizedWinProbabilityDiff != nil {
		return *x.NormalizedWinProbabilityDiff
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetMatchTrackedStats() []*CMsgTrackedStat {
	if x != nil {
		return x.MatchTrackedStats
	}
	return nil
}

type CMsgSignOutDraftInfo struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	RadiantCaptainAccountId *uint32                  `protobuf:"varint,1,opt,name=radiant_captain_account_id,json=radiantCaptainAccountId" json:"radiant_captain_account_id,omitempty"`
	DireCaptainAccountId    *uint32                  `protobuf:"varint,2,opt,name=dire_captain_account_id,json=direCaptainAccountId" json:"dire_captain_account_id,omitempty"`
	PicksBans               []*CMatchHeroSelectEvent `protobuf:"bytes,3,rep,name=picks_bans,json=picksBans" json:"picks_bans,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CMsgSignOutDraftInfo) Reset() {
	*x = CMsgSignOutDraftInfo{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutDraftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutDraftInfo) ProtoMessage() {}

func (x *CMsgSignOutDraftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutDraftInfo.ProtoReflect.Descriptor instead.
func (*CMsgSignOutDraftInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSignOutDraftInfo) GetRadiantCaptainAccountId() uint32 {
	if x != nil && x.RadiantCaptainAccountId != nil {
		return *x.RadiantCaptainAccountId
	}
	return 0
}

func (x *CMsgSignOutDraftInfo) GetDireCaptainAccountId() uint32 {
	if x != nil && x.DireCaptainAccountId != nil {
		return *x.DireCaptainAccountId
	}
	return 0
}

func (x *CMsgSignOutDraftInfo) GetPicksBans() []*CMatchHeroSelectEvent {
	if x != nil {
		return x.PicksBans
	}
	return nil
}

type CMsgSignOutBotInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AllowCheats          *bool                  `protobuf:"varint,1,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	BotDifficultyRadiant *DOTABotDifficulty     `protobuf:"varint,2,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=protocol.DOTABotDifficulty,def=0" json:"bot_difficulty_radiant,omitempty"`
	CreatedLobby         *bool                  `protobuf:"varint,3,opt,name=created_lobby,json=createdLobby" json:"created_lobby,omitempty"`
	BotDifficultyDire    *DOTABotDifficulty     `protobuf:"varint,5,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=protocol.DOTABotDifficulty,def=0" json:"bot_difficulty_dire,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for CMsgSignOutBotInfo fields.
const (
	Default_CMsgSignOutBotInfo_BotDifficultyRadiant = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
	Default_CMsgSignOutBotInfo_BotDifficultyDire    = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
)

func (x *CMsgSignOutBotInfo) Reset() {
	*x = CMsgSignOutBotInfo{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutBotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutBotInfo) ProtoMessage() {}

func (x *CMsgSignOutBotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutBotInfo.ProtoReflect.Descriptor instead.
func (*CMsgSignOutBotInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgSignOutBotInfo) GetAllowCheats() bool {
	if x != nil && x.AllowCheats != nil {
		return *x.AllowCheats
	}
	return false
}

func (x *CMsgSignOutBotInfo) GetBotDifficultyRadiant() DOTABotDifficulty {
	if x != nil && x.BotDifficultyRadiant != nil {
		return *x.BotDifficultyRadiant
	}
	return Default_CMsgSignOutBotInfo_BotDifficultyRadiant
}

func (x *CMsgSignOutBotInfo) GetCreatedLobby() bool {
	if x != nil && x.CreatedLobby != nil {
		return *x.CreatedLobby
	}
	return false
}

func (x *CMsgSignOutBotInfo) GetBotDifficultyDire() DOTABotDifficulty {
	if x != nil && x.BotDifficultyDire != nil {
		return *x.BotDifficultyDire
	}
	return Default_CMsgSignOutBotInfo_BotDifficultyDire
}

type CMsgSignOutTextMuteInfo struct {
	state            protoimpl.MessageState                     `protogen:"open.v1"`
	TextMuteMessages []*CMsgSignOutTextMuteInfo_TextMuteMessage `protobuf:"bytes,1,rep,name=text_mute_messages,json=textMuteMessages" json:"text_mute_messages,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgSignOutTextMuteInfo) Reset() {
	*x = CMsgSignOutTextMuteInfo{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutTextMuteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutTextMuteInfo) ProtoMessage() {}

func (x *CMsgSignOutTextMuteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutTextMuteInfo.ProtoReflect.Descriptor instead.
func (*CMsgSignOutTextMuteInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgSignOutTextMuteInfo) GetTextMuteMessages() []*CMsgSignOutTextMuteInfo_TextMuteMessage {
	if x != nil {
		return x.TextMuteMessages
	}
	return nil
}

type CMsgSignOutPlayerStats struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AccountId           *int32                 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchId             *uint64                `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Rank                *uint32                `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	HeroId              *int32                 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Rampages            *uint32                `protobuf:"varint,5,opt,name=rampages" json:"rampages,omitempty"`
	TripleKills         *uint32                `protobuf:"varint,6,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	FirstBloodClaimed   *uint32                `protobuf:"varint,7,opt,name=first_blood_claimed,json=firstBloodClaimed" json:"first_blood_claimed,omitempty"`
	FirstBloodGiven     *uint32                `protobuf:"varint,8,opt,name=first_blood_given,json=firstBloodGiven" json:"first_blood_given,omitempty"`
	CouriersKilled      *uint32                `protobuf:"varint,9,opt,name=couriers_killed,json=couriersKilled" json:"couriers_killed,omitempty"`
	AegisesSnatched     *uint32                `protobuf:"varint,10,opt,name=aegises_snatched,json=aegisesSnatched" json:"aegises_snatched,omitempty"`
	CheesesEaten        *uint32                `protobuf:"varint,11,opt,name=cheeses_eaten,json=cheesesEaten" json:"cheeses_eaten,omitempty"`
	CreepsStacked       *uint32                `protobuf:"varint,12,opt,name=creeps_stacked,json=creepsStacked" json:"creeps_stacked,omitempty"`
	FightScore          *float32               `protobuf:"fixed32,13,opt,name=fight_score,json=fightScore" json:"fight_score,omitempty"`
	FarmScore           *float32               `protobuf:"fixed32,14,opt,name=farm_score,json=farmScore" json:"farm_score,omitempty"`
	SupportScore        *float32               `protobuf:"fixed32,15,opt,name=support_score,json=supportScore" json:"support_score,omitempty"`
	PushScore           *float32               `protobuf:"fixed32,16,opt,name=push_score,json=pushScore" json:"push_score,omitempty"`
	Kills               *uint32                `protobuf:"varint,17,opt,name=kills" json:"kills,omitempty"`
	Deaths              *uint32                `protobuf:"varint,18,opt,name=deaths" json:"deaths,omitempty"`
	Assists             *uint32                `protobuf:"varint,19,opt,name=assists" json:"assists,omitempty"`
	LastHits            *uint32                `protobuf:"varint,20,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies              *uint32                `protobuf:"varint,21,opt,name=denies" json:"denies,omitempty"`
	Gpm                 *float32               `protobuf:"fixed32,22,opt,name=gpm" json:"gpm,omitempty"`
	Xppm                *float32               `protobuf:"fixed32,23,opt,name=xppm" json:"xppm,omitempty"`
	NetWorth            *float32               `protobuf:"fixed32,24,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Damage              *float32               `protobuf:"fixed32,25,opt,name=damage" json:"damage,omitempty"`
	Heals               *float32               `protobuf:"fixed32,26,opt,name=heals" json:"heals,omitempty"`
	RapiersPurchased    *uint32                `protobuf:"varint,27,opt,name=rapiers_purchased,json=rapiersPurchased" json:"rapiers_purchased,omitempty"`
	ObserverWardsPlaced *uint32                `protobuf:"varint,28,opt,name=observer_wards_placed,json=observerWardsPlaced" json:"observer_wards_placed,omitempty"`
	WardsDestroyed      *uint32                `protobuf:"varint,29,opt,name=wards_destroyed,json=wardsDestroyed" json:"wards_destroyed,omitempty"`
	LobbyType           *uint32                `protobuf:"varint,30,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgSignOutPlayerStats) Reset() {
	*x = CMsgSignOutPlayerStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutPlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutPlayerStats) ProtoMessage() {}

func (x *CMsgSignOutPlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutPlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgSignOutPlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgSignOutPlayerStats) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetRampages() uint32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetTripleKills() uint32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetFirstBloodClaimed() uint32 {
	if x != nil && x.FirstBloodClaimed != nil {
		return *x.FirstBloodClaimed
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetFirstBloodGiven() uint32 {
	if x != nil && x.FirstBloodGiven != nil {
		return *x.FirstBloodGiven
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetCouriersKilled() uint32 {
	if x != nil && x.CouriersKilled != nil {
		return *x.CouriersKilled
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetAegisesSnatched() uint32 {
	if x != nil && x.AegisesSnatched != nil {
		return *x.AegisesSnatched
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetCheesesEaten() uint32 {
	if x != nil && x.CheesesEaten != nil {
		return *x.CheesesEaten
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetCreepsStacked() uint32 {
	if x != nil && x.CreepsStacked != nil {
		return *x.CreepsStacked
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetFightScore() float32 {
	if x != nil && x.FightScore != nil {
		return *x.FightScore
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetFarmScore() float32 {
	if x != nil && x.FarmScore != nil {
		return *x.FarmScore
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetSupportScore() float32 {
	if x != nil && x.SupportScore != nil {
		return *x.SupportScore
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetPushScore() float32 {
	if x != nil && x.PushScore != nil {
		return *x.PushScore
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetGpm() float32 {
	if x != nil && x.Gpm != nil {
		return *x.Gpm
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetXppm() float32 {
	if x != nil && x.Xppm != nil {
		return *x.Xppm
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetNetWorth() float32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetDamage() float32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetHeals() float32 {
	if x != nil && x.Heals != nil {
		return *x.Heals
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetRapiersPurchased() uint32 {
	if x != nil && x.RapiersPurchased != nil {
		return *x.RapiersPurchased
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetObserverWardsPlaced() uint32 {
	if x != nil && x.ObserverWardsPlaced != nil {
		return *x.ObserverWardsPlaced
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetWardsDestroyed() uint32 {
	if x != nil && x.WardsDestroyed != nil {
		return *x.WardsDestroyed
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

type CMsgSignOutCommunicationSummary struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Players       []*CMsgSignOutCommunicationSummary_PlayerCommunication `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutCommunicationSummary) Reset() {
	*x = CMsgSignOutCommunicationSummary{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutCommunicationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunicationSummary) ProtoMessage() {}

func (x *CMsgSignOutCommunicationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunicationSummary.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunicationSummary) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgSignOutCommunicationSummary) GetPlayers() []*CMsgSignOutCommunicationSummary_PlayerCommunication {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameMatchSignoutResponse struct {
	state              protoimpl.MessageState                         `protogen:"open.v1"`
	MatchId            *uint64                                        `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ReplaySalt         *uint32                                        `protobuf:"fixed32,2,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	Leagueid           *uint32                                        `protobuf:"varint,5,opt,name=leagueid" json:"leagueid,omitempty"`
	MetadataPrivateKey *uint32                                        `protobuf:"fixed32,7,opt,name=metadata_private_key,json=metadataPrivateKey" json:"metadata_private_key,omitempty"`
	MatchDetails       *CMsgDOTAMatch                                 `protobuf:"bytes,8,opt,name=match_details,json=matchDetails" json:"match_details,omitempty"`
	PlayersMetadata    []*CMsgGameMatchSignoutResponse_PlayerMetadata `protobuf:"bytes,9,rep,name=players_metadata,json=playersMetadata" json:"players_metadata,omitempty"`
	MvpData            *CMvpData                                      `protobuf:"bytes,10,opt,name=mvp_data,json=mvpData" json:"mvp_data,omitempty"`
	OwPrivateKey       *uint64                                        `protobuf:"fixed64,11,opt,name=ow_private_key,json=owPrivateKey" json:"ow_private_key,omitempty"`
	OwSalt             *uint32                                        `protobuf:"fixed32,12,opt,name=ow_salt,json=owSalt" json:"ow_salt,omitempty"`
	OwReplayId         *uint64                                        `protobuf:"varint,13,opt,name=ow_replay_id,json=owReplayId" json:"ow_replay_id,omitempty"`
	OverworldRewards   *CMsgOverworldMatchRewards                     `protobuf:"bytes,14,opt,name=overworld_rewards,json=overworldRewards" json:"overworld_rewards,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgGameMatchSignoutResponse) Reset() {
	*x = CMsgGameMatchSignoutResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignoutResponse) ProtoMessage() {}

func (x *CMsgGameMatchSignoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignoutResponse.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignoutResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgGameMatchSignoutResponse) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetMetadataPrivateKey() uint32 {
	if x != nil && x.MetadataPrivateKey != nil {
		return *x.MetadataPrivateKey
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetMatchDetails() *CMsgDOTAMatch {
	if x != nil {
		return x.MatchDetails
	}
	return nil
}

func (x *CMsgGameMatchSignoutResponse) GetPlayersMetadata() []*CMsgGameMatchSignoutResponse_PlayerMetadata {
	if x != nil {
		return x.PlayersMetadata
	}
	return nil
}

func (x *CMsgGameMatchSignoutResponse) GetMvpData() *CMvpData {
	if x != nil {
		return x.MvpData
	}
	return nil
}

func (x *CMsgGameMatchSignoutResponse) GetOwPrivateKey() uint64 {
	if x != nil && x.OwPrivateKey != nil {
		return *x.OwPrivateKey
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetOwSalt() uint32 {
	if x != nil && x.OwSalt != nil {
		return *x.OwSalt
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetOwReplayId() uint64 {
	if x != nil && x.OwReplayId != nil {
		return *x.OwReplayId
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetOverworldRewards() *CMsgOverworldMatchRewards {
	if x != nil {
		return x.OverworldRewards
	}
	return nil
}

type CMsgGameMatchSignOutPermissionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerVersion *uint32                `protobuf:"varint,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	LocalAttempt  *uint32                `protobuf:"varint,2,opt,name=local_attempt,json=localAttempt" json:"local_attempt,omitempty"`
	TotalAttempt  *uint32                `protobuf:"varint,3,opt,name=total_attempt,json=totalAttempt" json:"total_attempt,omitempty"`
	SecondsWaited *uint32                `protobuf:"varint,4,opt,name=seconds_waited,json=secondsWaited" json:"seconds_waited,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameMatchSignOutPermissionRequest) Reset() {
	*x = CMsgGameMatchSignOutPermissionRequest{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOutPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOutPermissionRequest) ProtoMessage() {}

func (x *CMsgGameMatchSignOutPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOutPermissionRequest.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOutPermissionRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgGameMatchSignOutPermissionRequest) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGameMatchSignOutPermissionRequest) GetLocalAttempt() uint32 {
	if x != nil && x.LocalAttempt != nil {
		return *x.LocalAttempt
	}
	return 0
}

func (x *CMsgGameMatchSignOutPermissionRequest) GetTotalAttempt() uint32 {
	if x != nil && x.TotalAttempt != nil {
		return *x.TotalAttempt
	}
	return 0
}

func (x *CMsgGameMatchSignOutPermissionRequest) GetSecondsWaited() uint32 {
	if x != nil && x.SecondsWaited != nil {
		return *x.SecondsWaited
	}
	return 0
}

type CMsgGameMatchSignOutPermissionResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PermissionGranted *bool                  `protobuf:"varint,1,opt,name=permission_granted,json=permissionGranted,def=0" json:"permission_granted,omitempty"`
	AbandonSignout    *bool                  `protobuf:"varint,2,opt,name=abandon_signout,json=abandonSignout,def=0" json:"abandon_signout,omitempty"`
	RetryDelaySeconds *uint32                `protobuf:"varint,3,opt,name=retry_delay_seconds,json=retryDelaySeconds,def=0" json:"retry_delay_seconds,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CMsgGameMatchSignOutPermissionResponse fields.
const (
	Default_CMsgGameMatchSignOutPermissionResponse_PermissionGranted = bool(false)
	Default_CMsgGameMatchSignOutPermissionResponse_AbandonSignout    = bool(false)
	Default_CMsgGameMatchSignOutPermissionResponse_RetryDelaySeconds = uint32(0)
)

func (x *CMsgGameMatchSignOutPermissionResponse) Reset() {
	*x = CMsgGameMatchSignOutPermissionResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOutPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOutPermissionResponse) ProtoMessage() {}

func (x *CMsgGameMatchSignOutPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOutPermissionResponse.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOutPermissionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgGameMatchSignOutPermissionResponse) GetPermissionGranted() bool {
	if x != nil && x.PermissionGranted != nil {
		return *x.PermissionGranted
	}
	return Default_CMsgGameMatchSignOutPermissionResponse_PermissionGranted
}

func (x *CMsgGameMatchSignOutPermissionResponse) GetAbandonSignout() bool {
	if x != nil && x.AbandonSignout != nil {
		return *x.AbandonSignout
	}
	return Default_CMsgGameMatchSignOutPermissionResponse_AbandonSignout
}

func (x *CMsgGameMatchSignOutPermissionResponse) GetRetryDelaySeconds() uint32 {
	if x != nil && x.RetryDelaySeconds != nil {
		return *x.RetryDelaySeconds
	}
	return Default_CMsgGameMatchSignOutPermissionResponse_RetryDelaySeconds
}

type CMsgGameMatchSignOutEventGameData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	GameName      *string                `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	MapName       *string                `protobuf:"bytes,3,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	EventGameData []byte                 `protobuf:"bytes,4,opt,name=event_game_data,json=eventGameData" json:"event_game_data,omitempty"`
	StartTime     *uint32                `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGameMatchSignOutEventGameData fields.
const (
	Default_CMsgGameMatchSignOutEventGameData_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgGameMatchSignOutEventGameData) Reset() {
	*x = CMsgGameMatchSignOutEventGameData{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOutEventGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOutEventGameData) ProtoMessage() {}

func (x *CMsgGameMatchSignOutEventGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOutEventGameData.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOutEventGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgGameMatchSignOutEventGameData) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgGameMatchSignOutEventGameData_EventId
}

func (x *CMsgGameMatchSignOutEventGameData) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *CMsgGameMatchSignOutEventGameData) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

func (x *CMsgGameMatchSignOutEventGameData) GetEventGameData() []byte {
	if x != nil {
		return x.EventGameData
	}
	return nil
}

func (x *CMsgGameMatchSignOutEventGameData) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

type CMsgGameMatchSignOutPerfData struct {
	state                                 protoimpl.MessageState `protogen:"open.v1"`
	AverageFrameTime                      []float32              `protobuf:"fixed32,1,rep,name=average_frame_time,json=averageFrameTime" json:"average_frame_time,omitempty"`
	MaxFrameTime                          []float32              `protobuf:"fixed32,2,rep,name=max_frame_time,json=maxFrameTime" json:"max_frame_time,omitempty"`
	ServerAverageFrameTime                *float32               `protobuf:"fixed32,3,opt,name=server_average_frame_time,json=serverAverageFrameTime" json:"server_average_frame_time,omitempty"`
	ServerMaxFrameTime                    *float32               `protobuf:"fixed32,4,opt,name=server_max_frame_time,json=serverMaxFrameTime" json:"server_max_frame_time,omitempty"`
	AverageComputeTime                    []float32              `protobuf:"fixed32,5,rep,name=average_compute_time,json=averageComputeTime" json:"average_compute_time,omitempty"`
	MaxComputeTime                        []float32              `protobuf:"fixed32,6,rep,name=max_compute_time,json=maxComputeTime" json:"max_compute_time,omitempty"`
	AverageClientTickTime                 []float32              `protobuf:"fixed32,7,rep,name=average_client_tick_time,json=averageClientTickTime" json:"average_client_tick_time,omitempty"`
	MaxClientTickTime                     []float32              `protobuf:"fixed32,8,rep,name=max_client_tick_time,json=maxClientTickTime" json:"max_client_tick_time,omitempty"`
	AverageClientSimulateTime             []float32              `protobuf:"fixed32,9,rep,name=average_client_simulate_time,json=averageClientSimulateTime" json:"average_client_simulate_time,omitempty"`
	MaxClientSimulateTime                 []float32              `protobuf:"fixed32,10,rep,name=max_client_simulate_time,json=maxClientSimulateTime" json:"max_client_simulate_time,omitempty"`
	AverageOutputTime                     []float32              `protobuf:"fixed32,11,rep,name=average_output_time,json=averageOutputTime" json:"average_output_time,omitempty"`
	MaxOutputTime                         []float32              `protobuf:"fixed32,12,rep,name=max_output_time,json=maxOutputTime" json:"max_output_time,omitempty"`
	AverageWaitForRenderingToCompleteTime []float32              `protobuf:"fixed32,13,rep,name=average_wait_for_rendering_to_complete_time,json=averageWaitForRenderingToCompleteTime" json:"average_wait_for_rendering_to_complete_time,omitempty"`
	MaxWaitForRenderingToCompleteTime     []float32              `protobuf:"fixed32,14,rep,name=max_wait_for_rendering_to_complete_time,json=maxWaitForRenderingToCompleteTime" json:"max_wait_for_rendering_to_complete_time,omitempty"`
	AverageSwapTime                       []float32              `protobuf:"fixed32,15,rep,name=average_swap_time,json=averageSwapTime" json:"average_swap_time,omitempty"`
	MaxSwapTime                           []float32              `protobuf:"fixed32,16,rep,name=max_swap_time,json=maxSwapTime" json:"max_swap_time,omitempty"`
	AverageFrameUpdateTime                []float32              `protobuf:"fixed32,17,rep,name=average_frame_update_time,json=averageFrameUpdateTime" json:"average_frame_update_time,omitempty"`
	MaxFrameUpdateTime                    []float32              `protobuf:"fixed32,18,rep,name=max_frame_update_time,json=maxFrameUpdateTime" json:"max_frame_update_time,omitempty"`
	AverageIdleTime                       []float32              `protobuf:"fixed32,19,rep,name=average_idle_time,json=averageIdleTime" json:"average_idle_time,omitempty"`
	MaxIdleTime                           []float32              `protobuf:"fixed32,20,rep,name=max_idle_time,json=maxIdleTime" json:"max_idle_time,omitempty"`
	AverageInputProcessingTime            []float32              `protobuf:"fixed32,21,rep,name=average_input_processing_time,json=averageInputProcessingTime" json:"average_input_processing_time,omitempty"`
	MaxInputProcessingTime                []float32              `protobuf:"fixed32,22,rep,name=max_input_processing_time,json=maxInputProcessingTime" json:"max_input_processing_time,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *CMsgGameMatchSignOutPerfData) Reset() {
	*x = CMsgGameMatchSignOutPerfData{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOutPerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOutPerfData) ProtoMessage() {}

func (x *CMsgGameMatchSignOutPerfData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOutPerfData.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOutPerfData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageFrameTime() []float32 {
	if x != nil {
		return x.AverageFrameTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxFrameTime() []float32 {
	if x != nil {
		return x.MaxFrameTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetServerAverageFrameTime() float32 {
	if x != nil && x.ServerAverageFrameTime != nil {
		return *x.ServerAverageFrameTime
	}
	return 0
}

func (x *CMsgGameMatchSignOutPerfData) GetServerMaxFrameTime() float32 {
	if x != nil && x.ServerMaxFrameTime != nil {
		return *x.ServerMaxFrameTime
	}
	return 0
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageComputeTime() []float32 {
	if x != nil {
		return x.AverageComputeTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxComputeTime() []float32 {
	if x != nil {
		return x.MaxComputeTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageClientTickTime() []float32 {
	if x != nil {
		return x.AverageClientTickTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxClientTickTime() []float32 {
	if x != nil {
		return x.MaxClientTickTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageClientSimulateTime() []float32 {
	if x != nil {
		return x.AverageClientSimulateTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxClientSimulateTime() []float32 {
	if x != nil {
		return x.MaxClientSimulateTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageOutputTime() []float32 {
	if x != nil {
		return x.AverageOutputTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxOutputTime() []float32 {
	if x != nil {
		return x.MaxOutputTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageWaitForRenderingToCompleteTime() []float32 {
	if x != nil {
		return x.AverageWaitForRenderingToCompleteTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxWaitForRenderingToCompleteTime() []float32 {
	if x != nil {
		return x.MaxWaitForRenderingToCompleteTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageSwapTime() []float32 {
	if x != nil {
		return x.AverageSwapTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxSwapTime() []float32 {
	if x != nil {
		return x.MaxSwapTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageFrameUpdateTime() []float32 {
	if x != nil {
		return x.AverageFrameUpdateTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxFrameUpdateTime() []float32 {
	if x != nil {
		return x.MaxFrameUpdateTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageIdleTime() []float32 {
	if x != nil {
		return x.AverageIdleTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxIdleTime() []float32 {
	if x != nil {
		return x.MaxIdleTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetAverageInputProcessingTime() []float32 {
	if x != nil {
		return x.AverageInputProcessingTime
	}
	return nil
}

func (x *CMsgGameMatchSignOutPerfData) GetMaxInputProcessingTime() []float32 {
	if x != nil {
		return x.MaxInputProcessingTime
	}
	return nil
}

type CMsgGameMatchSignOutBanData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroBans      []int32                `protobuf:"varint,1,rep,name=hero_bans,json=heroBans" json:"hero_bans,omitempty"`
	HeroBanVotes  []int32                `protobuf:"varint,2,rep,name=hero_ban_votes,json=heroBanVotes" json:"hero_ban_votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameMatchSignOutBanData) Reset() {
	*x = CMsgGameMatchSignOutBanData{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOutBanData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOutBanData) ProtoMessage() {}

func (x *CMsgGameMatchSignOutBanData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOutBanData.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOutBanData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgGameMatchSignOutBanData) GetHeroBans() []int32 {
	if x != nil {
		return x.HeroBans
	}
	return nil
}

func (x *CMsgGameMatchSignOutBanData) GetHeroBanVotes() []int32 {
	if x != nil {
		return x.HeroBanVotes
	}
	return nil
}

type CMsgDOTALiveScoreboardUpdate struct {
	state              protoimpl.MessageState             `protogen:"open.v1"`
	TournamentId       *uint32                            `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentGameId   *uint32                            `protobuf:"varint,2,opt,name=tournament_game_id,json=tournamentGameId" json:"tournament_game_id,omitempty"`
	Duration           *float32                           `protobuf:"fixed32,3,opt,name=duration" json:"duration,omitempty"`
	HltvDelay          *int32                             `protobuf:"varint,4,opt,name=hltv_delay,json=hltvDelay" json:"hltv_delay,omitempty"`
	TeamGood           *CMsgDOTALiveScoreboardUpdate_Team `protobuf:"bytes,5,opt,name=team_good,json=teamGood" json:"team_good,omitempty"`
	TeamBad            *CMsgDOTALiveScoreboardUpdate_Team `protobuf:"bytes,6,opt,name=team_bad,json=teamBad" json:"team_bad,omitempty"`
	RoshanRespawnTimer *uint32                            `protobuf:"varint,7,opt,name=roshan_respawn_timer,json=roshanRespawnTimer" json:"roshan_respawn_timer,omitempty"`
	LeagueId           *uint32                            `protobuf:"varint,8,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	MatchId            *uint64                            `protobuf:"varint,9,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgDOTALiveScoreboardUpdate) Reset() {
	*x = CMsgDOTALiveScoreboardUpdate{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTALiveScoreboardUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALiveScoreboardUpdate) ProtoMessage() {}

func (x *CMsgDOTALiveScoreboardUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate.ProtoReflect.Descriptor instead.
func (*CMsgDOTALiveScoreboardUpdate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgDOTALiveScoreboardUpdate) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetTournamentGameId() uint32 {
	if x != nil && x.TournamentGameId != nil {
		return *x.TournamentGameId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetHltvDelay() int32 {
	if x != nil && x.HltvDelay != nil {
		return *x.HltvDelay
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetTeamGood() *CMsgDOTALiveScoreboardUpdate_Team {
	if x != nil {
		return x.TeamGood
	}
	return nil
}

func (x *CMsgDOTALiveScoreboardUpdate) GetTeamBad() *CMsgDOTALiveScoreboardUpdate_Team {
	if x != nil {
		return x.TeamBad
	}
	return nil
}

func (x *CMsgDOTALiveScoreboardUpdate) GetRoshanRespawnTimer() uint32 {
	if x != nil && x.RoshanRespawnTimer != nil {
		return *x.RoshanRespawnTimer
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgServerToGCRequestBatchPlayerResources struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountIds    []uint32               `protobuf:"varint,1,rep,packed,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	RankTypes     []uint32               `protobuf:"varint,4,rep,packed,name=rank_types,json=rankTypes" json:"rank_types,omitempty"`
	LobbyType     *int32                 `protobuf:"varint,5,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCRequestBatchPlayerResources) Reset() {
	*x = CMsgServerToGCRequestBatchPlayerResources{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCRequestBatchPlayerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRequestBatchPlayerResources) ProtoMessage() {}

func (x *CMsgServerToGCRequestBatchPlayerResources) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRequestBatchPlayerResources.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRequestBatchPlayerResources) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgServerToGCRequestBatchPlayerResources) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgServerToGCRequestBatchPlayerResources) GetRankTypes() []uint32 {
	if x != nil {
		return x.RankTypes
	}
	return nil
}

func (x *CMsgServerToGCRequestBatchPlayerResources) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

type CMsgServerToGCRequestBatchPlayerResourcesResponse struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Results       []*CMsgServerToGCRequestBatchPlayerResourcesResponse_Result `protobuf:"bytes,6,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse) Reset() {
	*x = CMsgServerToGCRequestBatchPlayerResourcesResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRequestBatchPlayerResourcesResponse) ProtoMessage() {}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRequestBatchPlayerResourcesResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRequestBatchPlayerResourcesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse) GetResults() []*CMsgServerToGCRequestBatchPlayerResourcesResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type CMsgDOTAPlayerFailedToConnect struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FailedLoaders    []uint64               `protobuf:"fixed64,1,rep,name=failed_loaders,json=failedLoaders" json:"failed_loaders,omitempty"`
	AbandonedLoaders []uint64               `protobuf:"fixed64,2,rep,name=abandoned_loaders,json=abandonedLoaders" json:"abandoned_loaders,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgDOTAPlayerFailedToConnect) Reset() {
	*x = CMsgDOTAPlayerFailedToConnect{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAPlayerFailedToConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerFailedToConnect) ProtoMessage() {}

func (x *CMsgDOTAPlayerFailedToConnect) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerFailedToConnect.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerFailedToConnect) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgDOTAPlayerFailedToConnect) GetFailedLoaders() []uint64 {
	if x != nil {
		return x.FailedLoaders
	}
	return nil
}

func (x *CMsgDOTAPlayerFailedToConnect) GetAbandonedLoaders() []uint64 {
	if x != nil {
		return x.AbandonedLoaders
	}
	return nil
}

type CMsgGCToRelayConnect struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SourceTvPublicAddr  *uint32                `protobuf:"varint,1,opt,name=source_tv_public_addr,json=sourceTvPublicAddr" json:"source_tv_public_addr,omitempty"`
	SourceTvPrivateAddr *uint32                `protobuf:"varint,2,opt,name=source_tv_private_addr,json=sourceTvPrivateAddr" json:"source_tv_private_addr,omitempty"`
	SourceTvPort        *uint32                `protobuf:"varint,3,opt,name=source_tv_port,json=sourceTvPort" json:"source_tv_port,omitempty"`
	GameServerSteamId   *uint64                `protobuf:"varint,4,opt,name=game_server_steam_id,json=gameServerSteamId" json:"game_server_steam_id,omitempty"`
	ParentCount         *uint32                `protobuf:"varint,5,opt,name=parent_count,json=parentCount" json:"parent_count,omitempty"`
	TvUniqueSecretCode  *uint64                `protobuf:"fixed64,6,opt,name=tv_unique_secret_code,json=tvUniqueSecretCode" json:"tv_unique_secret_code,omitempty"`
	SourceTvSteamid     *uint64                `protobuf:"fixed64,7,opt,name=source_tv_steamid,json=sourceTvSteamid" json:"source_tv_steamid,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGCToRelayConnect) Reset() {
	*x = CMsgGCToRelayConnect{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToRelayConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToRelayConnect) ProtoMessage() {}

func (x *CMsgGCToRelayConnect) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToRelayConnect.ProtoReflect.Descriptor instead.
func (*CMsgGCToRelayConnect) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgGCToRelayConnect) GetSourceTvPublicAddr() uint32 {
	if x != nil && x.SourceTvPublicAddr != nil {
		return *x.SourceTvPublicAddr
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetSourceTvPrivateAddr() uint32 {
	if x != nil && x.SourceTvPrivateAddr != nil {
		return *x.SourceTvPrivateAddr
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetSourceTvPort() uint32 {
	if x != nil && x.SourceTvPort != nil {
		return *x.SourceTvPort
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetGameServerSteamId() uint64 {
	if x != nil && x.GameServerSteamId != nil {
		return *x.GameServerSteamId
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetParentCount() uint32 {
	if x != nil && x.ParentCount != nil {
		return *x.ParentCount
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetTvUniqueSecretCode() uint64 {
	if x != nil && x.TvUniqueSecretCode != nil {
		return *x.TvUniqueSecretCode
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetSourceTvSteamid() uint64 {
	if x != nil && x.SourceTvSteamid != nil {
		return *x.SourceTvSteamid
	}
	return 0
}

type CMsgGCGCToLANServerRelayConnect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelaySteamid  *uint64                `protobuf:"fixed64,1,opt,name=relay_steamid,json=relaySteamid" json:"relay_steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCGCToLANServerRelayConnect) Reset() {
	*x = CMsgGCGCToLANServerRelayConnect{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCGCToLANServerRelayConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGCToLANServerRelayConnect) ProtoMessage() {}

func (x *CMsgGCGCToLANServerRelayConnect) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGCToLANServerRelayConnect.ProtoReflect.Descriptor instead.
func (*CMsgGCGCToLANServerRelayConnect) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgGCGCToLANServerRelayConnect) GetRelaySteamid() uint64 {
	if x != nil && x.RelaySteamid != nil {
		return *x.RelaySteamid
	}
	return 0
}

type CMsgGCBanStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCBanStatusRequest) Reset() {
	*x = CMsgGCBanStatusRequest{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCBanStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCBanStatusRequest) ProtoMessage() {}

func (x *CMsgGCBanStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCBanStatusRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCBanStatusRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgGCBanStatusRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGCBanStatusResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Result          *uint32                `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	LowPriority     *bool                  `protobuf:"varint,2,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	TextChatBanned  *bool                  `protobuf:"varint,3,opt,name=text_chat_banned,json=textChatBanned" json:"text_chat_banned,omitempty"`
	VoiceChatBanned *bool                  `protobuf:"varint,4,opt,name=voice_chat_banned,json=voiceChatBanned" json:"voice_chat_banned,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGCBanStatusResponse) Reset() {
	*x = CMsgGCBanStatusResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCBanStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCBanStatusResponse) ProtoMessage() {}

func (x *CMsgGCBanStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCBanStatusResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCBanStatusResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgGCBanStatusResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgGCBanStatusResponse) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CMsgGCBanStatusResponse) GetTextChatBanned() bool {
	if x != nil && x.TextChatBanned != nil {
		return *x.TextChatBanned
	}
	return false
}

func (x *CMsgGCBanStatusResponse) GetVoiceChatBanned() bool {
	if x != nil && x.VoiceChatBanned != nil {
		return *x.VoiceChatBanned
	}
	return false
}

type CMsgTournamentItemEvent struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	KillerAccountId *uint32                 `protobuf:"fixed32,1,opt,name=killer_account_id,json=killerAccountId" json:"killer_account_id,omitempty"`
	VictimAccountId *uint32                 `protobuf:"fixed32,2,opt,name=victim_account_id,json=victimAccountId" json:"victim_account_id,omitempty"`
	EventType       *DOTA_TournamentEvents  `protobuf:"varint,3,opt,name=event_type,json=eventType,enum=protocol.DOTA_TournamentEvents,def=0" json:"event_type,omitempty"`
	TvDelay         *int32                  `protobuf:"varint,4,opt,name=tv_delay,json=tvDelay" json:"tv_delay,omitempty"`
	DotaTime        *int32                  `protobuf:"varint,5,opt,name=dota_time,json=dotaTime" json:"dota_time,omitempty"`
	ReplayTime      *float32                `protobuf:"fixed32,6,opt,name=replay_time,json=replayTime" json:"replay_time,omitempty"`
	LootList        *string                 `protobuf:"bytes,7,opt,name=loot_list,json=lootList" json:"loot_list,omitempty"`
	EventTeam       *uint32                 `protobuf:"varint,8,opt,name=event_team,json=eventTeam" json:"event_team,omitempty"`
	MultiKillCount  *uint32                 `protobuf:"varint,9,opt,name=multi_kill_count,json=multiKillCount" json:"multi_kill_count,omitempty"`
	WinnerScore     *uint32                 `protobuf:"varint,10,opt,name=winner_score,json=winnerScore" json:"winner_score,omitempty"`
	LoserScore      *uint32                 `protobuf:"varint,11,opt,name=loser_score,json=loserScore" json:"loser_score,omitempty"`
	HeroStatues     []*CProtoItemHeroStatue `protobuf:"bytes,12,rep,name=hero_statues,json=heroStatues" json:"hero_statues,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgTournamentItemEvent fields.
const (
	Default_CMsgTournamentItemEvent_EventType = DOTA_TournamentEvents_TE_FIRST_BLOOD
)

func (x *CMsgTournamentItemEvent) Reset() {
	*x = CMsgTournamentItemEvent{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTournamentItemEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTournamentItemEvent) ProtoMessage() {}

func (x *CMsgTournamentItemEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTournamentItemEvent.ProtoReflect.Descriptor instead.
func (*CMsgTournamentItemEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgTournamentItemEvent) GetKillerAccountId() uint32 {
	if x != nil && x.KillerAccountId != nil {
		return *x.KillerAccountId
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetVictimAccountId() uint32 {
	if x != nil && x.VictimAccountId != nil {
		return *x.VictimAccountId
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetEventType() DOTA_TournamentEvents {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return Default_CMsgTournamentItemEvent_EventType
}

func (x *CMsgTournamentItemEvent) GetTvDelay() int32 {
	if x != nil && x.TvDelay != nil {
		return *x.TvDelay
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetDotaTime() int32 {
	if x != nil && x.DotaTime != nil {
		return *x.DotaTime
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetReplayTime() float32 {
	if x != nil && x.ReplayTime != nil {
		return *x.ReplayTime
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetLootList() string {
	if x != nil && x.LootList != nil {
		return *x.LootList
	}
	return ""
}

func (x *CMsgTournamentItemEvent) GetEventTeam() uint32 {
	if x != nil && x.EventTeam != nil {
		return *x.EventTeam
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetMultiKillCount() uint32 {
	if x != nil && x.MultiKillCount != nil {
		return *x.MultiKillCount
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetWinnerScore() uint32 {
	if x != nil && x.WinnerScore != nil {
		return *x.WinnerScore
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetLoserScore() uint32 {
	if x != nil && x.LoserScore != nil {
		return *x.LoserScore
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetHeroStatues() []*CProtoItemHeroStatue {
	if x != nil {
		return x.HeroStatues
	}
	return nil
}

type CMsgTournamentItemEventResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EventType      *DOTA_TournamentEvents `protobuf:"varint,1,opt,name=event_type,json=eventType,enum=protocol.DOTA_TournamentEvents,def=0" json:"event_type,omitempty"`
	ViewersGranted *uint32                `protobuf:"varint,6,opt,name=viewers_granted,json=viewersGranted" json:"viewers_granted,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgTournamentItemEventResponse fields.
const (
	Default_CMsgTournamentItemEventResponse_EventType = DOTA_TournamentEvents_TE_FIRST_BLOOD
)

func (x *CMsgTournamentItemEventResponse) Reset() {
	*x = CMsgTournamentItemEventResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTournamentItemEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTournamentItemEventResponse) ProtoMessage() {}

func (x *CMsgTournamentItemEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTournamentItemEventResponse.ProtoReflect.Descriptor instead.
func (*CMsgTournamentItemEventResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgTournamentItemEventResponse) GetEventType() DOTA_TournamentEvents {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return Default_CMsgTournamentItemEventResponse_EventType
}

func (x *CMsgTournamentItemEventResponse) GetViewersGranted() uint32 {
	if x != nil && x.ViewersGranted != nil {
		return *x.ViewersGranted
	}
	return 0
}

type CMsgTeamFanfare struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTeamFanfare) Reset() {
	*x = CMsgTeamFanfare{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTeamFanfare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamFanfare) ProtoMessage() {}

func (x *CMsgTeamFanfare) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamFanfare.ProtoReflect.Descriptor instead.
func (*CMsgTeamFanfare) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgTeamFanfare) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgResponseTeamFanfare struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FanfareGoodguys *uint32                `protobuf:"varint,1,opt,name=fanfare_goodguys,json=fanfareGoodguys" json:"fanfare_goodguys,omitempty"`
	FanfareBadguys  *uint32                `protobuf:"varint,2,opt,name=fanfare_badguys,json=fanfareBadguys" json:"fanfare_badguys,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgResponseTeamFanfare) Reset() {
	*x = CMsgResponseTeamFanfare{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgResponseTeamFanfare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgResponseTeamFanfare) ProtoMessage() {}

func (x *CMsgResponseTeamFanfare) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgResponseTeamFanfare.ProtoReflect.Descriptor instead.
func (*CMsgResponseTeamFanfare) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgResponseTeamFanfare) GetFanfareGoodguys() uint32 {
	if x != nil && x.FanfareGoodguys != nil {
		return *x.FanfareGoodguys
	}
	return 0
}

func (x *CMsgResponseTeamFanfare) GetFanfareBadguys() uint32 {
	if x != nil && x.FanfareBadguys != nil {
		return *x.FanfareBadguys
	}
	return 0
}

type CMsgDOTAAwardEventPoints struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	AwardPoints   []*CMsgDOTAAwardEventPoints_AwardPoints `protobuf:"bytes,1,rep,name=award_points,json=awardPoints" json:"award_points,omitempty"`
	MatchId       *uint64                                 `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	EventId       *EEvent                                 `protobuf:"varint,4,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	Timestamp     *uint32                                 `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	AuditAction   *uint32                                 `protobuf:"varint,6,opt,name=audit_action,json=auditAction" json:"audit_action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAAwardEventPoints fields.
const (
	Default_CMsgDOTAAwardEventPoints_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgDOTAAwardEventPoints) Reset() {
	*x = CMsgDOTAAwardEventPoints{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAAwardEventPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAAwardEventPoints) ProtoMessage() {}

func (x *CMsgDOTAAwardEventPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAAwardEventPoints.ProtoReflect.Descriptor instead.
func (*CMsgDOTAAwardEventPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgDOTAAwardEventPoints) GetAwardPoints() []*CMsgDOTAAwardEventPoints_AwardPoints {
	if x != nil {
		return x.AwardPoints
	}
	return nil
}

func (x *CMsgDOTAAwardEventPoints) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgDOTAAwardEventPoints_EventId
}

func (x *CMsgDOTAAwardEventPoints) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints) GetAuditAction() uint32 {
	if x != nil && x.AuditAction != nil {
		return *x.AuditAction
	}
	return 0
}

type CMsgGCToServerPingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     *uint64                `protobuf:"fixed64,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	RequestTime   *uint64                `protobuf:"varint,2,opt,name=request_time,json=requestTime" json:"request_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerPingRequest) Reset() {
	*x = CMsgGCToServerPingRequest{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerPingRequest) ProtoMessage() {}

func (x *CMsgGCToServerPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerPingRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerPingRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgGCToServerPingRequest) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCToServerPingRequest) GetRequestTime() uint64 {
	if x != nil && x.RequestTime != nil {
		return *x.RequestTime
	}
	return 0
}

type CMsgGCToServerPingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     *uint64                `protobuf:"fixed64,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	RequestTime   *uint64                `protobuf:"varint,2,opt,name=request_time,json=requestTime" json:"request_time,omitempty"`
	Cluster       *uint32                `protobuf:"varint,3,opt,name=cluster" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerPingResponse) Reset() {
	*x = CMsgGCToServerPingResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerPingResponse) ProtoMessage() {}

func (x *CMsgGCToServerPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerPingResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerPingResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgGCToServerPingResponse) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCToServerPingResponse) GetRequestTime() uint64 {
	if x != nil && x.RequestTime != nil {
		return *x.RequestTime
	}
	return 0
}

func (x *CMsgGCToServerPingResponse) GetCluster() uint32 {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return 0
}

type CMsgServerToGCMatchConnectionStats struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	MatchId       *uint64                                      `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	RegionId      *uint32                                      `protobuf:"varint,2,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	LeagueId      *uint32                                      `protobuf:"varint,3,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Players       []*CMsgServerToGCMatchConnectionStats_Player `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	ClusterId     *uint32                                      `protobuf:"varint,5,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchConnectionStats) Reset() {
	*x = CMsgServerToGCMatchConnectionStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchConnectionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchConnectionStats) ProtoMessage() {}

func (x *CMsgServerToGCMatchConnectionStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchConnectionStats.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchConnectionStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgServerToGCMatchConnectionStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats) GetRegionId() uint32 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats) GetPlayers() []*CMsgServerToGCMatchConnectionStats_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgServerToGCMatchConnectionStats) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

type CMsgServerGCUpdateSpectatorCount struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SpectatorCount *uint32                `protobuf:"varint,1,opt,name=spectator_count,json=spectatorCount" json:"spectator_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgServerGCUpdateSpectatorCount) Reset() {
	*x = CMsgServerGCUpdateSpectatorCount{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerGCUpdateSpectatorCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerGCUpdateSpectatorCount) ProtoMessage() {}

func (x *CMsgServerGCUpdateSpectatorCount) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerGCUpdateSpectatorCount.ProtoReflect.Descriptor instead.
func (*CMsgServerGCUpdateSpectatorCount) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgServerGCUpdateSpectatorCount) GetSpectatorCount() uint32 {
	if x != nil && x.SpectatorCount != nil {
		return *x.SpectatorCount
	}
	return 0
}

type CSerializedCombatLog struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Version       *uint32                          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Dictionary    *CSerializedCombatLog_Dictionary `protobuf:"bytes,2,opt,name=dictionary" json:"dictionary,omitempty"`
	Entries       []*CMsgDOTACombatLogEntry        `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSerializedCombatLog) Reset() {
	*x = CSerializedCombatLog{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSerializedCombatLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSerializedCombatLog) ProtoMessage() {}

func (x *CSerializedCombatLog) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSerializedCombatLog.ProtoReflect.Descriptor instead.
func (*CSerializedCombatLog) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{41}
}

func (x *CSerializedCombatLog) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CSerializedCombatLog) GetDictionary() *CSerializedCombatLog_Dictionary {
	if x != nil {
		return x.Dictionary
	}
	return nil
}

func (x *CSerializedCombatLog) GetEntries() []*CMsgDOTACombatLogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgServerToGCVictoryPredictions struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Records       []*CMsgServerToGCVictoryPredictions_Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCVictoryPredictions) Reset() {
	*x = CMsgServerToGCVictoryPredictions{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCVictoryPredictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCVictoryPredictions) ProtoMessage() {}

func (x *CMsgServerToGCVictoryPredictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCVictoryPredictions.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCVictoryPredictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgServerToGCVictoryPredictions) GetRecords() []*CMsgServerToGCVictoryPredictions_Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type CMsgServerToGCRequestStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCRequestStatus) Reset() {
	*x = CMsgServerToGCRequestStatus{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCRequestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRequestStatus) ProtoMessage() {}

func (x *CMsgServerToGCRequestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRequestStatus.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRequestStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{43}
}

type CMsgServerToGCRequestStatus_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *uint32                `protobuf:"varint,1,opt,name=response" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCRequestStatus_Response) Reset() {
	*x = CMsgServerToGCRequestStatus_Response{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCRequestStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRequestStatus_Response) ProtoMessage() {}

func (x *CMsgServerToGCRequestStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRequestStatus_Response.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRequestStatus_Response) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgServerToGCRequestStatus_Response) GetResponse() uint32 {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return 0
}

type CMsgGCToServerEvaluateToxicChat struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId   *uint32                `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ReporterAccountId *uint32                `protobuf:"varint,2,opt,name=reporter_account_id,json=reporterAccountId" json:"reporter_account_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgGCToServerEvaluateToxicChat) Reset() {
	*x = CMsgGCToServerEvaluateToxicChat{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerEvaluateToxicChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerEvaluateToxicChat) ProtoMessage() {}

func (x *CMsgGCToServerEvaluateToxicChat) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerEvaluateToxicChat.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerEvaluateToxicChat) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgGCToServerEvaluateToxicChat) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgGCToServerEvaluateToxicChat) GetReporterAccountId() uint32 {
	if x != nil && x.ReporterAccountId != nil {
		return *x.ReporterAccountId
	}
	return 0
}

type CMsgServerToGCEvaluateToxicChat struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId   *uint32                `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ReporterAccountId *uint32                `protobuf:"varint,2,opt,name=reporter_account_id,json=reporterAccountId" json:"reporter_account_id,omitempty"`
	MatchId           *uint64                `protobuf:"fixed64,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Timestamp         []uint32               `protobuf:"varint,4,rep,name=timestamp" json:"timestamp,omitempty"`
	Line              []string               `protobuf:"bytes,5,rep,name=line" json:"line,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgServerToGCEvaluateToxicChat) Reset() {
	*x = CMsgServerToGCEvaluateToxicChat{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCEvaluateToxicChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCEvaluateToxicChat) ProtoMessage() {}

func (x *CMsgServerToGCEvaluateToxicChat) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCEvaluateToxicChat.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCEvaluateToxicChat) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgServerToGCEvaluateToxicChat) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgServerToGCEvaluateToxicChat) GetReporterAccountId() uint32 {
	if x != nil && x.ReporterAccountId != nil {
		return *x.ReporterAccountId
	}
	return 0
}

func (x *CMsgServerToGCEvaluateToxicChat) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCEvaluateToxicChat) GetTimestamp() []uint32 {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CMsgServerToGCEvaluateToxicChat) GetLine() []string {
	if x != nil {
		return x.Line
	}
	return nil
}

type CMsgServerToGCEvaluateToxicChatResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId   *uint32                `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ReporterAccountId *uint32                `protobuf:"varint,2,opt,name=reporter_account_id,json=reporterAccountId" json:"reporter_account_id,omitempty"`
	BanReason         *uint32                `protobuf:"varint,3,opt,name=ban_reason,json=banReason" json:"ban_reason,omitempty"`
	BanDuration       *uint32                `protobuf:"varint,4,opt,name=ban_duration,json=banDuration" json:"ban_duration,omitempty"`
	ToxicityScore     *float32               `protobuf:"fixed32,5,opt,name=toxicity_score,json=toxicityScore" json:"toxicity_score,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgServerToGCEvaluateToxicChatResponse) Reset() {
	*x = CMsgServerToGCEvaluateToxicChatResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCEvaluateToxicChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCEvaluateToxicChatResponse) ProtoMessage() {}

func (x *CMsgServerToGCEvaluateToxicChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCEvaluateToxicChatResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCEvaluateToxicChatResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgServerToGCEvaluateToxicChatResponse) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgServerToGCEvaluateToxicChatResponse) GetReporterAccountId() uint32 {
	if x != nil && x.ReporterAccountId != nil {
		return *x.ReporterAccountId
	}
	return 0
}

func (x *CMsgServerToGCEvaluateToxicChatResponse) GetBanReason() uint32 {
	if x != nil && x.BanReason != nil {
		return *x.BanReason
	}
	return 0
}

func (x *CMsgServerToGCEvaluateToxicChatResponse) GetBanDuration() uint32 {
	if x != nil && x.BanDuration != nil {
		return *x.BanDuration
	}
	return 0
}

func (x *CMsgServerToGCEvaluateToxicChatResponse) GetToxicityScore() float32 {
	if x != nil && x.ToxicityScore != nil {
		return *x.ToxicityScore
	}
	return 0
}

type CMsgSignOutAssassinMiniGameInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	WinningPlayers       []uint64               `protobuf:"fixed64,1,rep,name=winning_players,json=winningPlayers" json:"winning_players,omitempty"`
	LosingPlayers        []uint64               `protobuf:"fixed64,2,rep,name=losing_players,json=losingPlayers" json:"losing_players,omitempty"`
	ArcanaOwners         []uint64               `protobuf:"fixed64,3,rep,name=arcana_owners,json=arcanaOwners" json:"arcana_owners,omitempty"`
	AssassinWon          *bool                  `protobuf:"varint,4,opt,name=assassin_won,json=assassinWon" json:"assassin_won,omitempty"`
	TargetHeroId         *int32                 `protobuf:"varint,5,opt,name=target_hero_id,json=targetHeroId" json:"target_hero_id,omitempty"`
	ContractCompleted    *bool                  `protobuf:"varint,6,opt,name=contract_completed,json=contractCompleted" json:"contract_completed,omitempty"`
	ContractCompleteTime *float32               `protobuf:"fixed32,7,opt,name=contract_complete_time,json=contractCompleteTime" json:"contract_complete_time,omitempty"`
	PaIsRadiant          *bool                  `protobuf:"varint,8,opt,name=pa_is_radiant,json=paIsRadiant" json:"pa_is_radiant,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgSignOutAssassinMiniGameInfo) Reset() {
	*x = CMsgSignOutAssassinMiniGameInfo{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutAssassinMiniGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutAssassinMiniGameInfo) ProtoMessage() {}

func (x *CMsgSignOutAssassinMiniGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutAssassinMiniGameInfo.ProtoReflect.Descriptor instead.
func (*CMsgSignOutAssassinMiniGameInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetWinningPlayers() []uint64 {
	if x != nil {
		return x.WinningPlayers
	}
	return nil
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetLosingPlayers() []uint64 {
	if x != nil {
		return x.LosingPlayers
	}
	return nil
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetArcanaOwners() []uint64 {
	if x != nil {
		return x.ArcanaOwners
	}
	return nil
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetAssassinWon() bool {
	if x != nil && x.AssassinWon != nil {
		return *x.AssassinWon
	}
	return false
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetTargetHeroId() int32 {
	if x != nil && x.TargetHeroId != nil {
		return *x.TargetHeroId
	}
	return 0
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetContractCompleted() bool {
	if x != nil && x.ContractCompleted != nil {
		return *x.ContractCompleted
	}
	return false
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetContractCompleteTime() float32 {
	if x != nil && x.ContractCompleteTime != nil {
		return *x.ContractCompleteTime
	}
	return 0
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetPaIsRadiant() bool {
	if x != nil && x.PaIsRadiant != nil {
		return *x.PaIsRadiant
	}
	return false
}

type CMsgServerToGCKillSummaries struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	IngameeventId *uint32                                    `protobuf:"varint,1,opt,name=ingameevent_id,json=ingameeventId" json:"ingameevent_id,omitempty"`
	Summaries     []*CMsgServerToGCKillSummaries_KillSummary `protobuf:"bytes,2,rep,name=summaries" json:"summaries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCKillSummaries) Reset() {
	*x = CMsgServerToGCKillSummaries{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCKillSummaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCKillSummaries) ProtoMessage() {}

func (x *CMsgServerToGCKillSummaries) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCKillSummaries.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCKillSummaries) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgServerToGCKillSummaries) GetIngameeventId() uint32 {
	if x != nil && x.IngameeventId != nil {
		return *x.IngameeventId
	}
	return 0
}

func (x *CMsgServerToGCKillSummaries) GetSummaries() []*CMsgServerToGCKillSummaries_KillSummary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type CMsgServerToGCLockCharmTrading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ItemId        *uint64                `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCLockCharmTrading) Reset() {
	*x = CMsgServerToGCLockCharmTrading{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCLockCharmTrading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCLockCharmTrading) ProtoMessage() {}

func (x *CMsgServerToGCLockCharmTrading) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCLockCharmTrading.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCLockCharmTrading) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgServerToGCLockCharmTrading) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCLockCharmTrading) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgSignOutUpdatePlayerChallenge struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	AccountId     *uint32                                       `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Completed     []*CMsgSignOutUpdatePlayerChallenge_Challenge `protobuf:"bytes,2,rep,name=completed" json:"completed,omitempty"`
	Rerolled      []*CMsgSignOutUpdatePlayerChallenge_Challenge `protobuf:"bytes,3,rep,name=rerolled" json:"rerolled,omitempty"`
	MatchId       *uint64                                       `protobuf:"varint,4,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	HeroId        *int32                                        `protobuf:"varint,5,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutUpdatePlayerChallenge) Reset() {
	*x = CMsgSignOutUpdatePlayerChallenge{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutUpdatePlayerChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutUpdatePlayerChallenge) ProtoMessage() {}

func (x *CMsgSignOutUpdatePlayerChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutUpdatePlayerChallenge.ProtoReflect.Descriptor instead.
func (*CMsgSignOutUpdatePlayerChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetCompleted() []*CMsgSignOutUpdatePlayerChallenge_Challenge {
	if x != nil {
		return x.Completed
	}
	return nil
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetRerolled() []*CMsgSignOutUpdatePlayerChallenge_Challenge {
	if x != nil {
		return x.Rerolled
	}
	return nil
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgServerToGCRerollPlayerChallenge struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	AccountId     *uint32                              `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RerollMsg     *CMsgClientToGCRerollPlayerChallenge `protobuf:"bytes,2,opt,name=reroll_msg,json=rerollMsg" json:"reroll_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCRerollPlayerChallenge) Reset() {
	*x = CMsgServerToGCRerollPlayerChallenge{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCRerollPlayerChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRerollPlayerChallenge) ProtoMessage() {}

func (x *CMsgServerToGCRerollPlayerChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRerollPlayerChallenge.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRerollPlayerChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgServerToGCRerollPlayerChallenge) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCRerollPlayerChallenge) GetRerollMsg() *CMsgClientToGCRerollPlayerChallenge {
	if x != nil {
		return x.RerollMsg
	}
	return nil
}

type CMsgSpendWager struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Players       []*CMsgSpendWager_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	EventId       *EEvent                  `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	Timestamp     *uint32                  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	MatchId       *uint64                  `protobuf:"varint,4,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ServerSteamId *uint64                  `protobuf:"varint,5,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSpendWager fields.
const (
	Default_CMsgSpendWager_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSpendWager) Reset() {
	*x = CMsgSpendWager{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSpendWager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpendWager) ProtoMessage() {}

func (x *CMsgSpendWager) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpendWager.ProtoReflect.Descriptor instead.
func (*CMsgSpendWager) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgSpendWager) GetPlayers() []*CMsgSpendWager_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgSpendWager) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSpendWager_EventId
}

func (x *CMsgSpendWager) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgSpendWager) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSpendWager) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

type CMsgSignOutXPCoins struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Players       []*CMsgSignOutXPCoins_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	EventId       *EEvent                      `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	MatchId       *uint64                      `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Timestamp     *uint32                      `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSignOutXPCoins fields.
const (
	Default_CMsgSignOutXPCoins_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutXPCoins) Reset() {
	*x = CMsgSignOutXPCoins{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutXPCoins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutXPCoins) ProtoMessage() {}

func (x *CMsgSignOutXPCoins) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutXPCoins.ProtoReflect.Descriptor instead.
func (*CMsgSignOutXPCoins) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgSignOutXPCoins) GetPlayers() []*CMsgSignOutXPCoins_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgSignOutXPCoins) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutXPCoins_EventId
}

func (x *CMsgSignOutXPCoins) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutXPCoins) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgSignOutBounties struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Bounties      []*CMsgSignOutBounties_Bounty `protobuf:"bytes,1,rep,name=bounties" json:"bounties,omitempty"`
	EventId       *EEvent                       `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	MatchId       *uint64                       `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Timestamp     *uint32                       `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSignOutBounties fields.
const (
	Default_CMsgSignOutBounties_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutBounties) Reset() {
	*x = CMsgSignOutBounties{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutBounties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutBounties) ProtoMessage() {}

func (x *CMsgSignOutBounties) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutBounties.ProtoReflect.Descriptor instead.
func (*CMsgSignOutBounties) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgSignOutBounties) GetBounties() []*CMsgSignOutBounties_Bounty {
	if x != nil {
		return x.Bounties
	}
	return nil
}

func (x *CMsgSignOutBounties) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutBounties_EventId
}

func (x *CMsgSignOutBounties) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutBounties) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgSignOutCommunityGoalProgress struct {
	state           protoimpl.MessageState                                 `protogen:"open.v1"`
	EventId         *EEvent                                                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	EventIncrements []*CMsgSignOutCommunityGoalProgress_EventGoalIncrement `protobuf:"bytes,2,rep,name=event_increments,json=eventIncrements" json:"event_increments,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgSignOutCommunityGoalProgress fields.
const (
	Default_CMsgSignOutCommunityGoalProgress_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutCommunityGoalProgress) Reset() {
	*x = CMsgSignOutCommunityGoalProgress{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutCommunityGoalProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunityGoalProgress) ProtoMessage() {}

func (x *CMsgSignOutCommunityGoalProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunityGoalProgress.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunityGoalProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgSignOutCommunityGoalProgress) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutCommunityGoalProgress_EventId
}

func (x *CMsgSignOutCommunityGoalProgress) GetEventIncrements() []*CMsgSignOutCommunityGoalProgress_EventGoalIncrement {
	if x != nil {
		return x.EventIncrements
	}
	return nil
}

type CMsgServerToGCCloseCompendiumInGamePredictionVoting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	HltvDelay     *uint32                `protobuf:"varint,2,opt,name=hltv_delay,json=hltvDelay" json:"hltv_delay,omitempty"`
	LeagueId      *uint32                `protobuf:"varint,3,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) Reset() {
	*x = CMsgServerToGCCloseCompendiumInGamePredictionVoting{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCloseCompendiumInGamePredictionVoting) ProtoMessage() {}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCloseCompendiumInGamePredictionVoting.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCloseCompendiumInGamePredictionVoting) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) GetHltvDelay() uint32 {
	if x != nil && x.HltvDelay != nil {
		return *x.HltvDelay
	}
	return 0
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *bool                  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) Reset() {
	*x = CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) ProtoMessage() {}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type CMsgServerToGCCompendiumInGamePredictionResults struct {
	state         protoimpl.MessageState                                              `protogen:"open.v1"`
	MatchId       *uint64                                                             `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Results       []*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	LeagueId      *uint32                                                             `protobuf:"varint,3,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LeagueNodeId  *uint32                                                             `protobuf:"varint,4,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) Reset() {
	*x = CMsgServerToGCCompendiumInGamePredictionResults{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCompendiumInGamePredictionResults) ProtoMessage() {}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCompendiumInGamePredictionResults.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCompendiumInGamePredictionResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) GetResults() []*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) GetLeagueNodeId() uint32 {
	if x != nil && x.LeagueNodeId != nil {
		return *x.LeagueNodeId
	}
	return 0
}

type CMsgServerToGCCompendiumChosenInGamePredictions struct {
	state             protoimpl.MessageState                                        `protogen:"open.v1"`
	MatchId           *uint64                                                       `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	PredictionsChosen []*CMsgServerToGCCompendiumChosenInGamePredictions_Prediction `protobuf:"bytes,2,rep,name=predictions_chosen,json=predictionsChosen" json:"predictions_chosen,omitempty"`
	LeagueId          *uint32                                                       `protobuf:"varint,3,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions) Reset() {
	*x = CMsgServerToGCCompendiumChosenInGamePredictions{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCompendiumChosenInGamePredictions) ProtoMessage() {}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCompendiumChosenInGamePredictions.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCompendiumChosenInGamePredictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions) GetPredictionsChosen() []*CMsgServerToGCCompendiumChosenInGamePredictions_Prediction {
	if x != nil {
		return x.PredictionsChosen
	}
	return nil
}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type CMsgGCToGCCompendiumInGamePredictionResults struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Results       *CMsgServerToGCCompendiumInGamePredictionResults `protobuf:"bytes,1,opt,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToGCCompendiumInGamePredictionResults) Reset() {
	*x = CMsgGCToGCCompendiumInGamePredictionResults{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToGCCompendiumInGamePredictionResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCCompendiumInGamePredictionResults) ProtoMessage() {}

func (x *CMsgGCToGCCompendiumInGamePredictionResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCCompendiumInGamePredictionResults.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCCompendiumInGamePredictionResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgGCToGCCompendiumInGamePredictionResults) GetResults() *CMsgServerToGCCompendiumInGamePredictionResults {
	if x != nil {
		return x.Results
	}
	return nil
}

type CMsgServerToGCMatchPlayerItemPurchaseHistory struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	MatchId       *uint64                                                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Mmr           *uint32                                                `protobuf:"varint,2,opt,name=mmr" json:"mmr,omitempty"`
	Players       []*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) Reset() {
	*x = CMsgServerToGCMatchPlayerItemPurchaseHistory{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchPlayerItemPurchaseHistory) ProtoMessage() {}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchPlayerItemPurchaseHistory.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchPlayerItemPurchaseHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) GetPlayers() []*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgServerToGCMatchPlayerNeutralItemEquipHistory struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	MatchId       *uint64                                                    `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Players       []*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory) Reset() {
	*x = CMsgServerToGCMatchPlayerNeutralItemEquipHistory{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchPlayerNeutralItemEquipHistory) ProtoMessage() {}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchPlayerNeutralItemEquipHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory) GetPlayers() []*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgServerToGCMatchStateHistory struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	MatchId       *uint64                                       `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	RadiantWon    *bool                                         `protobuf:"varint,2,opt,name=radiant_won,json=radiantWon" json:"radiant_won,omitempty"`
	Mmr           *uint32                                       `protobuf:"varint,3,opt,name=mmr" json:"mmr,omitempty"`
	MatchStates   []*CMsgServerToGCMatchStateHistory_MatchState `protobuf:"bytes,4,rep,name=match_states,json=matchStates" json:"match_states,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchStateHistory) Reset() {
	*x = CMsgServerToGCMatchStateHistory{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchStateHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchStateHistory) ProtoMessage() {}

func (x *CMsgServerToGCMatchStateHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchStateHistory.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchStateHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgServerToGCMatchStateHistory) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory) GetRadiantWon() bool {
	if x != nil && x.RadiantWon != nil {
		return *x.RadiantWon
	}
	return false
}

func (x *CMsgServerToGCMatchStateHistory) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory) GetMatchStates() []*CMsgServerToGCMatchStateHistory_MatchState {
	if x != nil {
		return x.MatchStates
	}
	return nil
}

type CMsgMatchStateSteamMLEntry struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	MatchState    *CMsgServerToGCMatchStateHistory_MatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState" json:"match_state,omitempty"`
	Mmr           *uint32                                     `protobuf:"varint,2,opt,name=mmr" json:"mmr,omitempty"`
	RadiantWon    *bool                                       `protobuf:"varint,3,opt,name=radiant_won,json=radiantWon" json:"radiant_won,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgMatchStateSteamMLEntry) Reset() {
	*x = CMsgMatchStateSteamMLEntry{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgMatchStateSteamMLEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchStateSteamMLEntry) ProtoMessage() {}

func (x *CMsgMatchStateSteamMLEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchStateSteamMLEntry.ProtoReflect.Descriptor instead.
func (*CMsgMatchStateSteamMLEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgMatchStateSteamMLEntry) GetMatchState() *CMsgServerToGCMatchStateHistory_MatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

func (x *CMsgMatchStateSteamMLEntry) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgMatchStateSteamMLEntry) GetRadiantWon() bool {
	if x != nil && x.RadiantWon != nil {
		return *x.RadiantWon
	}
	return false
}

type CMsgLaneSelectionSteamMLEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroIds       []int32                `protobuf:"varint,1,rep,name=hero_ids,json=heroIds" json:"hero_ids,omitempty"`
	Lanes         []uint32               `protobuf:"varint,2,rep,name=lanes" json:"lanes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgLaneSelectionSteamMLEntry) Reset() {
	*x = CMsgLaneSelectionSteamMLEntry{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLaneSelectionSteamMLEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLaneSelectionSteamMLEntry) ProtoMessage() {}

func (x *CMsgLaneSelectionSteamMLEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLaneSelectionSteamMLEntry.ProtoReflect.Descriptor instead.
func (*CMsgLaneSelectionSteamMLEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgLaneSelectionSteamMLEntry) GetHeroIds() []int32 {
	if x != nil {
		return x.HeroIds
	}
	return nil
}

func (x *CMsgLaneSelectionSteamMLEntry) GetLanes() []uint32 {
	if x != nil {
		return x.Lanes
	}
	return nil
}

type CMsgAbilitySelectionSteamMLEntry struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Mmr             *uint32                `protobuf:"varint,1,opt,name=mmr" json:"mmr,omitempty"`
	HeroId          *int32                 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	EnemyHeroIds    []int32                `protobuf:"varint,3,rep,name=enemy_hero_ids,json=enemyHeroIds" json:"enemy_hero_ids,omitempty"`
	Lane            *uint32                `protobuf:"varint,4,opt,name=lane" json:"lane,omitempty"`
	Abilities       []int32                `protobuf:"varint,5,rep,name=abilities" json:"abilities,omitempty"`
	SelectedAbility *int32                 `protobuf:"varint,6,opt,name=selected_ability,json=selectedAbility,def=-1" json:"selected_ability,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgAbilitySelectionSteamMLEntry fields.
const (
	Default_CMsgAbilitySelectionSteamMLEntry_SelectedAbility = int32(-1)
)

func (x *CMsgAbilitySelectionSteamMLEntry) Reset() {
	*x = CMsgAbilitySelectionSteamMLEntry{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgAbilitySelectionSteamMLEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAbilitySelectionSteamMLEntry) ProtoMessage() {}

func (x *CMsgAbilitySelectionSteamMLEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAbilitySelectionSteamMLEntry.ProtoReflect.Descriptor instead.
func (*CMsgAbilitySelectionSteamMLEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgAbilitySelectionSteamMLEntry) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgAbilitySelectionSteamMLEntry) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgAbilitySelectionSteamMLEntry) GetEnemyHeroIds() []int32 {
	if x != nil {
		return x.EnemyHeroIds
	}
	return nil
}

func (x *CMsgAbilitySelectionSteamMLEntry) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgAbilitySelectionSteamMLEntry) GetAbilities() []int32 {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *CMsgAbilitySelectionSteamMLEntry) GetSelectedAbility() int32 {
	if x != nil && x.SelectedAbility != nil {
		return *x.SelectedAbility
	}
	return Default_CMsgAbilitySelectionSteamMLEntry_SelectedAbility
}

type CMsgItemPurchasePregameSteamMLEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mmr           *uint32                `protobuf:"varint,1,opt,name=mmr" json:"mmr,omitempty"`
	Lane          *uint32                `protobuf:"varint,2,opt,name=lane" json:"lane,omitempty"`
	Balance       *float32               `protobuf:"fixed32,3,opt,name=balance" json:"balance,omitempty"`
	HeroId        *int32                 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	AlliedHeroIds []int32                `protobuf:"varint,5,rep,name=allied_hero_ids,json=alliedHeroIds" json:"allied_hero_ids,omitempty"`
	EnemyHeroIds  []int32                `protobuf:"varint,6,rep,name=enemy_hero_ids,json=enemyHeroIds" json:"enemy_hero_ids,omitempty"`
	Items         []int32                `protobuf:"varint,7,rep,name=items" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgItemPurchasePregameSteamMLEntry) Reset() {
	*x = CMsgItemPurchasePregameSteamMLEntry{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgItemPurchasePregameSteamMLEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgItemPurchasePregameSteamMLEntry) ProtoMessage() {}

func (x *CMsgItemPurchasePregameSteamMLEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgItemPurchasePregameSteamMLEntry.ProtoReflect.Descriptor instead.
func (*CMsgItemPurchasePregameSteamMLEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgItemPurchasePregameSteamMLEntry) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgItemPurchasePregameSteamMLEntry) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgItemPurchasePregameSteamMLEntry) GetBalance() float32 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *CMsgItemPurchasePregameSteamMLEntry) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgItemPurchasePregameSteamMLEntry) GetAlliedHeroIds() []int32 {
	if x != nil {
		return x.AlliedHeroIds
	}
	return nil
}

func (x *CMsgItemPurchasePregameSteamMLEntry) GetEnemyHeroIds() []int32 {
	if x != nil {
		return x.EnemyHeroIds
	}
	return nil
}

func (x *CMsgItemPurchasePregameSteamMLEntry) GetItems() []int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

type CMsgItemPurchaseSteamMLEntry struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Mmr                *uint32                `protobuf:"varint,1,opt,name=mmr" json:"mmr,omitempty"`
	Lane               *uint32                `protobuf:"varint,2,opt,name=lane" json:"lane,omitempty"`
	HeroId             *int32                 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	AlliedHeroIds      []int32                `protobuf:"varint,4,rep,name=allied_hero_ids,json=alliedHeroIds" json:"allied_hero_ids,omitempty"`
	EnemyHeroIds       []int32                `protobuf:"varint,5,rep,name=enemy_hero_ids,json=enemyHeroIds" json:"enemy_hero_ids,omitempty"`
	Items              []int32                `protobuf:"varint,6,rep,name=items" json:"items,omitempty"`
	ItemsToBePurchased []int32                `protobuf:"varint,7,rep,name=items_to_be_purchased,json=itemsToBePurchased" json:"items_to_be_purchased,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgItemPurchaseSteamMLEntry) Reset() {
	*x = CMsgItemPurchaseSteamMLEntry{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgItemPurchaseSteamMLEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgItemPurchaseSteamMLEntry) ProtoMessage() {}

func (x *CMsgItemPurchaseSteamMLEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgItemPurchaseSteamMLEntry.ProtoReflect.Descriptor instead.
func (*CMsgItemPurchaseSteamMLEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgItemPurchaseSteamMLEntry) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgItemPurchaseSteamMLEntry) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgItemPurchaseSteamMLEntry) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgItemPurchaseSteamMLEntry) GetAlliedHeroIds() []int32 {
	if x != nil {
		return x.AlliedHeroIds
	}
	return nil
}

func (x *CMsgItemPurchaseSteamMLEntry) GetEnemyHeroIds() []int32 {
	if x != nil {
		return x.EnemyHeroIds
	}
	return nil
}

func (x *CMsgItemPurchaseSteamMLEntry) GetItems() []int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgItemPurchaseSteamMLEntry) GetItemsToBePurchased() []int32 {
	if x != nil {
		return x.ItemsToBePurchased
	}
	return nil
}

type CMsgItemPurchaseSequenceSteamMLEntry struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Mmr               *uint32                `protobuf:"varint,1,opt,name=mmr" json:"mmr,omitempty"`
	Lane              *uint32                `protobuf:"varint,2,opt,name=lane" json:"lane,omitempty"`
	HeroId            *int32                 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	AlliedHeroIds     []int32                `protobuf:"varint,4,rep,name=allied_hero_ids,json=alliedHeroIds" json:"allied_hero_ids,omitempty"`
	EnemyHeroIds      []int32                `protobuf:"varint,5,rep,name=enemy_hero_ids,json=enemyHeroIds" json:"enemy_hero_ids,omitempty"`
	Items             []int32                `protobuf:"varint,6,rep,name=items" json:"items,omitempty"`
	ItemToBePurchased *int32                 `protobuf:"varint,7,opt,name=item_to_be_purchased,json=itemToBePurchased,def=-1" json:"item_to_be_purchased,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CMsgItemPurchaseSequenceSteamMLEntry fields.
const (
	Default_CMsgItemPurchaseSequenceSteamMLEntry_ItemToBePurchased = int32(-1)
)

func (x *CMsgItemPurchaseSequenceSteamMLEntry) Reset() {
	*x = CMsgItemPurchaseSequenceSteamMLEntry{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgItemPurchaseSequenceSteamMLEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgItemPurchaseSequenceSteamMLEntry) ProtoMessage() {}

func (x *CMsgItemPurchaseSequenceSteamMLEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgItemPurchaseSequenceSteamMLEntry.ProtoReflect.Descriptor instead.
func (*CMsgItemPurchaseSequenceSteamMLEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgItemPurchaseSequenceSteamMLEntry) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgItemPurchaseSequenceSteamMLEntry) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgItemPurchaseSequenceSteamMLEntry) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgItemPurchaseSequenceSteamMLEntry) GetAlliedHeroIds() []int32 {
	if x != nil {
		return x.AlliedHeroIds
	}
	return nil
}

func (x *CMsgItemPurchaseSequenceSteamMLEntry) GetEnemyHeroIds() []int32 {
	if x != nil {
		return x.EnemyHeroIds
	}
	return nil
}

func (x *CMsgItemPurchaseSequenceSteamMLEntry) GetItems() []int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgItemPurchaseSequenceSteamMLEntry) GetItemToBePurchased() int32 {
	if x != nil && x.ItemToBePurchased != nil {
		return *x.ItemToBePurchased
	}
	return Default_CMsgItemPurchaseSequenceSteamMLEntry_ItemToBePurchased
}

type CMsgServerToGCCavernCrawlIsHeroActive struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	EventId             *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AccountId           *uint32                `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PreferredMapVariant *uint32                `protobuf:"varint,3,opt,name=preferred_map_variant,json=preferredMapVariant,def=255" json:"preferred_map_variant,omitempty"`
	HeroId              *int32                 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	TurboMode           *bool                  `protobuf:"varint,5,opt,name=turbo_mode,json=turboMode" json:"turbo_mode,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for CMsgServerToGCCavernCrawlIsHeroActive fields.
const (
	Default_CMsgServerToGCCavernCrawlIsHeroActive_PreferredMapVariant = uint32(255)
)

func (x *CMsgServerToGCCavernCrawlIsHeroActive) Reset() {
	*x = CMsgServerToGCCavernCrawlIsHeroActive{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCavernCrawlIsHeroActive) ProtoMessage() {}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCavernCrawlIsHeroActive.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCavernCrawlIsHeroActive) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetPreferredMapVariant() uint32 {
	if x != nil && x.PreferredMapVariant != nil {
		return *x.PreferredMapVariant
	}
	return Default_CMsgServerToGCCavernCrawlIsHeroActive_PreferredMapVariant
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetTurboMode() bool {
	if x != nil && x.TurboMode != nil {
		return *x.TurboMode
	}
	return false
}

type CMsgServerToGCPlayerChallengeHistory struct {
	state            protoimpl.MessageState                                  `protogen:"open.v1"`
	MatchId          *uint64                                                 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AverageRank      *uint32                                                 `protobuf:"varint,2,opt,name=average_rank,json=averageRank" json:"average_rank,omitempty"`
	ChallengeRecords []*CMsgServerToGCPlayerChallengeHistory_PlayerChallenge `protobuf:"bytes,3,rep,name=challenge_records,json=challengeRecords" json:"challenge_records,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgServerToGCPlayerChallengeHistory) Reset() {
	*x = CMsgServerToGCPlayerChallengeHistory{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCPlayerChallengeHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCPlayerChallengeHistory) ProtoMessage() {}

func (x *CMsgServerToGCPlayerChallengeHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCPlayerChallengeHistory.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCPlayerChallengeHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgServerToGCPlayerChallengeHistory) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCPlayerChallengeHistory) GetAverageRank() uint32 {
	if x != nil && x.AverageRank != nil {
		return *x.AverageRank
	}
	return 0
}

func (x *CMsgServerToGCPlayerChallengeHistory) GetChallengeRecords() []*CMsgServerToGCPlayerChallengeHistory_PlayerChallenge {
	if x != nil {
		return x.ChallengeRecords
	}
	return nil
}

type CMsgServerToGCCavernCrawlIsHeroActiveResponse struct {
	state                      protoimpl.MessageState                                      `protogen:"open.v1"`
	Result                     *bool                                                       `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	MapVariant                 *uint32                                                     `protobuf:"varint,5,opt,name=map_variant,json=mapVariant,def=255" json:"map_variant,omitempty"`
	PotentialWinnings          *uint32                                                     `protobuf:"varint,2,opt,name=potential_winnings,json=potentialWinnings" json:"potential_winnings,omitempty"`
	MapResults                 []*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults `protobuf:"bytes,3,rep,name=map_results,json=mapResults" json:"map_results,omitempty"`
	PotentialPlusShardWinnings *uint32                                                     `protobuf:"varint,4,opt,name=potential_plus_shard_winnings,json=potentialPlusShardWinnings" json:"potential_plus_shard_winnings,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for CMsgServerToGCCavernCrawlIsHeroActiveResponse fields.
const (
	Default_CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapVariant = uint32(255)
)

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) Reset() {
	*x = CMsgServerToGCCavernCrawlIsHeroActiveResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCavernCrawlIsHeroActiveResponse) ProtoMessage() {}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCavernCrawlIsHeroActiveResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCavernCrawlIsHeroActiveResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) GetMapVariant() uint32 {
	if x != nil && x.MapVariant != nil {
		return *x.MapVariant
	}
	return Default_CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapVariant
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) GetPotentialWinnings() uint32 {
	if x != nil && x.PotentialWinnings != nil {
		return *x.PotentialWinnings
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) GetMapResults() []*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults {
	if x != nil {
		return x.MapResults
	}
	return nil
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) GetPotentialPlusShardWinnings() uint32 {
	if x != nil && x.PotentialPlusShardWinnings != nil {
		return *x.PotentialPlusShardWinnings
	}
	return 0
}

type CMsgNeutralItemStats struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	NeutralItems  []*CMsgNeutralItemStats_NeutralItem `protobuf:"bytes,1,rep,name=neutral_items,json=neutralItems" json:"neutral_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgNeutralItemStats) Reset() {
	*x = CMsgNeutralItemStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgNeutralItemStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNeutralItemStats) ProtoMessage() {}

func (x *CMsgNeutralItemStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNeutralItemStats.ProtoReflect.Descriptor instead.
func (*CMsgNeutralItemStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgNeutralItemStats) GetNeutralItems() []*CMsgNeutralItemStats_NeutralItem {
	if x != nil {
		return x.NeutralItems
	}
	return nil
}

type CMsgGCToServerLobbyHeroBanRates struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	BanData       []*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry `protobuf:"bytes,1,rep,name=ban_data,json=banData" json:"ban_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerLobbyHeroBanRates) Reset() {
	*x = CMsgGCToServerLobbyHeroBanRates{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerLobbyHeroBanRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerLobbyHeroBanRates) ProtoMessage() {}

func (x *CMsgGCToServerLobbyHeroBanRates) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerLobbyHeroBanRates.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerLobbyHeroBanRates) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgGCToServerLobbyHeroBanRates) GetBanData() []*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry {
	if x != nil {
		return x.BanData
	}
	return nil
}

type CMsgSignOutGuildContractProgress struct {
	state           protoimpl.MessageState                             `protogen:"open.v1"`
	PlayerContracts []*CMsgSignOutGuildContractProgress_PlayerContract `protobuf:"bytes,1,rep,name=player_contracts,json=playerContracts" json:"player_contracts,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgSignOutGuildContractProgress) Reset() {
	*x = CMsgSignOutGuildContractProgress{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutGuildContractProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildContractProgress) ProtoMessage() {}

func (x *CMsgSignOutGuildContractProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildContractProgress.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildContractProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgSignOutGuildContractProgress) GetPlayerContracts() []*CMsgSignOutGuildContractProgress_PlayerContract {
	if x != nil {
		return x.PlayerContracts
	}
	return nil
}

type CMsgSignOutGuildChallengeProgress struct {
	state                     protoimpl.MessageState                                 `protogen:"open.v1"`
	GuildChallengesProgresses []*CMsgSignOutGuildChallengeProgress_ChallengeProgress `protobuf:"bytes,1,rep,name=guild_challenges_progresses,json=guildChallengesProgresses" json:"guild_challenges_progresses,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CMsgSignOutGuildChallengeProgress) Reset() {
	*x = CMsgSignOutGuildChallengeProgress{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutGuildChallengeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildChallengeProgress) ProtoMessage() {}

func (x *CMsgSignOutGuildChallengeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildChallengeProgress.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildChallengeProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgSignOutGuildChallengeProgress) GetGuildChallengesProgresses() []*CMsgSignOutGuildChallengeProgress_ChallengeProgress {
	if x != nil {
		return x.GuildChallengesProgresses
	}
	return nil
}

type CMsgSignOutMVPStats struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	MatchId       *uint64                       `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GameMode      *uint32                       `protobuf:"varint,2,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	WinningTeam   *uint32                       `protobuf:"varint,3,opt,name=winning_team,json=winningTeam" json:"winning_team,omitempty"`
	GameTime      *float32                      `protobuf:"fixed32,4,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Players       []*CMsgSignOutMVPStats_Player `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutMVPStats) Reset() {
	*x = CMsgSignOutMVPStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutMVPStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutMVPStats) ProtoMessage() {}

func (x *CMsgSignOutMVPStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutMVPStats.ProtoReflect.Descriptor instead.
func (*CMsgSignOutMVPStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgSignOutMVPStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutMVPStats) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgSignOutMVPStats) GetWinningTeam() uint32 {
	if x != nil && x.WinningTeam != nil {
		return *x.WinningTeam
	}
	return 0
}

func (x *CMsgSignOutMVPStats) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgSignOutMVPStats) GetPlayers() []*CMsgSignOutMVPStats_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGCToServerRecordTrainingData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enable        *bool                  `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerRecordTrainingData) Reset() {
	*x = CMsgGCToServerRecordTrainingData{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerRecordTrainingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerRecordTrainingData) ProtoMessage() {}

func (x *CMsgGCToServerRecordTrainingData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerRecordTrainingData.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerRecordTrainingData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgGCToServerRecordTrainingData) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

type CMsgServerToGCGetGuildContracts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountIds    []uint32               `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCGetGuildContracts) Reset() {
	*x = CMsgServerToGCGetGuildContracts{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCGetGuildContracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetGuildContracts) ProtoMessage() {}

func (x *CMsgServerToGCGetGuildContracts) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetGuildContracts.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetGuildContracts) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{80}
}

func (x *CMsgServerToGCGetGuildContracts) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgServerToGCGetGuildContractsResponse struct {
	state           protoimpl.MessageState                            `protogen:"open.v1"`
	PlayerContracts []*CMsgServerToGCGetGuildContractsResponse_Player `protobuf:"bytes,1,rep,name=player_contracts,json=playerContracts" json:"player_contracts,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgServerToGCGetGuildContractsResponse) Reset() {
	*x = CMsgServerToGCGetGuildContractsResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCGetGuildContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetGuildContractsResponse) ProtoMessage() {}

func (x *CMsgServerToGCGetGuildContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetGuildContractsResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetGuildContractsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{81}
}

func (x *CMsgServerToGCGetGuildContractsResponse) GetPlayerContracts() []*CMsgServerToGCGetGuildContractsResponse_Player {
	if x != nil {
		return x.PlayerContracts
	}
	return nil
}

type CMsgMatchDiretideCandy struct {
	state           protoimpl.MessageState                `protogen:"open.v1"`
	PlayerCandyData []*CMsgMatchDiretideCandy_PlayerCandy `protobuf:"bytes,1,rep,name=player_candy_data,json=playerCandyData" json:"player_candy_data,omitempty"`
	EventId         *EEvent                               `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgMatchDiretideCandy fields.
const (
	Default_CMsgMatchDiretideCandy_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgMatchDiretideCandy) Reset() {
	*x = CMsgMatchDiretideCandy{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgMatchDiretideCandy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchDiretideCandy) ProtoMessage() {}

func (x *CMsgMatchDiretideCandy) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchDiretideCandy.ProtoReflect.Descriptor instead.
func (*CMsgMatchDiretideCandy) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{82}
}

func (x *CMsgMatchDiretideCandy) GetPlayerCandyData() []*CMsgMatchDiretideCandy_PlayerCandy {
	if x != nil {
		return x.PlayerCandyData
	}
	return nil
}

func (x *CMsgMatchDiretideCandy) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgMatchDiretideCandy_EventId
}

type CMsgGCToServerCheerData struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	CheerTypes    []*CMsgGCToServerCheerData_CheerTypeCount `protobuf:"bytes,1,rep,name=cheer_types,json=cheerTypes" json:"cheer_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerCheerData) Reset() {
	*x = CMsgGCToServerCheerData{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerCheerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerCheerData) ProtoMessage() {}

func (x *CMsgGCToServerCheerData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerCheerData.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerCheerData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{83}
}

func (x *CMsgGCToServerCheerData) GetCheerTypes() []*CMsgGCToServerCheerData_CheerTypeCount {
	if x != nil {
		return x.CheerTypes
	}
	return nil
}

type CMsgCheerConfig struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CheersEnabled              *bool                  `protobuf:"varint,1,opt,name=cheers_enabled,json=cheersEnabled" json:"cheers_enabled,omitempty"`
	IsValidLeagueId            *bool                  `protobuf:"varint,2,opt,name=is_valid_league_id,json=isValidLeagueId" json:"is_valid_league_id,omitempty"`
	WindowDuration             *float32               `protobuf:"fixed32,3,opt,name=window_duration,json=windowDuration" json:"window_duration,omitempty"`
	WindowBucketCount          *uint32                `protobuf:"varint,4,opt,name=window_bucket_count,json=windowBucketCount" json:"window_bucket_count,omitempty"`
	CrowdLevelPushTime         *float32               `protobuf:"fixed32,6,opt,name=crowd_level_push_time,json=crowdLevelPushTime" json:"crowd_level_push_time,omitempty"`
	CrowdLevelLow              *uint32                `protobuf:"varint,10,opt,name=crowd_level_low,json=crowdLevelLow" json:"crowd_level_low,omitempty"`
	CrowdLevelMedium           *uint32                `protobuf:"varint,11,opt,name=crowd_level_medium,json=crowdLevelMedium" json:"crowd_level_medium,omitempty"`
	CrowdLevelHigh             *uint32                `protobuf:"varint,12,opt,name=crowd_level_high,json=crowdLevelHigh" json:"crowd_level_high,omitempty"`
	CheerScaleStart            *float32               `protobuf:"fixed32,13,opt,name=cheer_scale_start,json=cheerScaleStart" json:"cheer_scale_start,omitempty"`
	CheerScaleSpeed            *float32               `protobuf:"fixed32,14,opt,name=cheer_scale_speed,json=cheerScaleSpeed" json:"cheer_scale_speed,omitempty"`
	CheerScalePushMark         *uint32                `protobuf:"varint,15,opt,name=cheer_scale_push_mark,json=cheerScalePushMark" json:"cheer_scale_push_mark,omitempty"`
	CheerScalePullMark         *uint32                `protobuf:"varint,16,opt,name=cheer_scale_pull_mark,json=cheerScalePullMark" json:"cheer_scale_pull_mark,omitempty"`
	CheerScalePctOfMaxCpsClamp *float32               `protobuf:"fixed32,17,opt,name=cheer_scale_pct_of_max_cps_clamp,json=cheerScalePctOfMaxCpsClamp" json:"cheer_scale_pct_of_max_cps_clamp,omitempty"`
	CheerScaleDampenerValue    *float32               `protobuf:"fixed32,21,opt,name=cheer_scale_dampener_value,json=cheerScaleDampenerValue" json:"cheer_scale_dampener_value,omitempty"`
	CheerScaleDampenerLerpTime *uint32                `protobuf:"varint,22,opt,name=cheer_scale_dampener_lerp_time,json=cheerScaleDampenerLerpTime" json:"cheer_scale_dampener_lerp_time,omitempty"`
	CheerFactorBronze          *float32               `protobuf:"fixed32,18,opt,name=cheer_factor_bronze,json=cheerFactorBronze" json:"cheer_factor_bronze,omitempty"`
	CheerFactorSilver          *float32               `protobuf:"fixed32,19,opt,name=cheer_factor_silver,json=cheerFactorSilver" json:"cheer_factor_silver,omitempty"`
	CheerFactorGold            *float32               `protobuf:"fixed32,20,opt,name=cheer_factor_gold,json=cheerFactorGold" json:"cheer_factor_gold,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CMsgCheerConfig) Reset() {
	*x = CMsgCheerConfig{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgCheerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCheerConfig) ProtoMessage() {}

func (x *CMsgCheerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCheerConfig.ProtoReflect.Descriptor instead.
func (*CMsgCheerConfig) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{84}
}

func (x *CMsgCheerConfig) GetCheersEnabled() bool {
	if x != nil && x.CheersEnabled != nil {
		return *x.CheersEnabled
	}
	return false
}

func (x *CMsgCheerConfig) GetIsValidLeagueId() bool {
	if x != nil && x.IsValidLeagueId != nil {
		return *x.IsValidLeagueId
	}
	return false
}

func (x *CMsgCheerConfig) GetWindowDuration() float32 {
	if x != nil && x.WindowDuration != nil {
		return *x.WindowDuration
	}
	return 0
}

func (x *CMsgCheerConfig) GetWindowBucketCount() uint32 {
	if x != nil && x.WindowBucketCount != nil {
		return *x.WindowBucketCount
	}
	return 0
}

func (x *CMsgCheerConfig) GetCrowdLevelPushTime() float32 {
	if x != nil && x.CrowdLevelPushTime != nil {
		return *x.CrowdLevelPushTime
	}
	return 0
}

func (x *CMsgCheerConfig) GetCrowdLevelLow() uint32 {
	if x != nil && x.CrowdLevelLow != nil {
		return *x.CrowdLevelLow
	}
	return 0
}

func (x *CMsgCheerConfig) GetCrowdLevelMedium() uint32 {
	if x != nil && x.CrowdLevelMedium != nil {
		return *x.CrowdLevelMedium
	}
	return 0
}

func (x *CMsgCheerConfig) GetCrowdLevelHigh() uint32 {
	if x != nil && x.CrowdLevelHigh != nil {
		return *x.CrowdLevelHigh
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerScaleStart() float32 {
	if x != nil && x.CheerScaleStart != nil {
		return *x.CheerScaleStart
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerScaleSpeed() float32 {
	if x != nil && x.CheerScaleSpeed != nil {
		return *x.CheerScaleSpeed
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerScalePushMark() uint32 {
	if x != nil && x.CheerScalePushMark != nil {
		return *x.CheerScalePushMark
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerScalePullMark() uint32 {
	if x != nil && x.CheerScalePullMark != nil {
		return *x.CheerScalePullMark
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerScalePctOfMaxCpsClamp() float32 {
	if x != nil && x.CheerScalePctOfMaxCpsClamp != nil {
		return *x.CheerScalePctOfMaxCpsClamp
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerScaleDampenerValue() float32 {
	if x != nil && x.CheerScaleDampenerValue != nil {
		return *x.CheerScaleDampenerValue
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerScaleDampenerLerpTime() uint32 {
	if x != nil && x.CheerScaleDampenerLerpTime != nil {
		return *x.CheerScaleDampenerLerpTime
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerFactorBronze() float32 {
	if x != nil && x.CheerFactorBronze != nil {
		return *x.CheerFactorBronze
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerFactorSilver() float32 {
	if x != nil && x.CheerFactorSilver != nil {
		return *x.CheerFactorSilver
	}
	return 0
}

func (x *CMsgCheerConfig) GetCheerFactorGold() float32 {
	if x != nil && x.CheerFactorGold != nil {
		return *x.CheerFactorGold
	}
	return 0
}

type CMsgGCToServerCheerConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CheerConfig   *CMsgCheerConfig       `protobuf:"bytes,1,opt,name=cheer_config,json=cheerConfig" json:"cheer_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerCheerConfig) Reset() {
	*x = CMsgGCToServerCheerConfig{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerCheerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerCheerConfig) ProtoMessage() {}

func (x *CMsgGCToServerCheerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerCheerConfig.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerCheerConfig) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgGCToServerCheerConfig) GetCheerConfig() *CMsgCheerConfig {
	if x != nil {
		return x.CheerConfig
	}
	return nil
}

type CMsgServerToGCGetCheerConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeagueId      *uint32                `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCGetCheerConfig) Reset() {
	*x = CMsgServerToGCGetCheerConfig{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCGetCheerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetCheerConfig) ProtoMessage() {}

func (x *CMsgServerToGCGetCheerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetCheerConfig.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetCheerConfig) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgServerToGCGetCheerConfig) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type CMsgServerToGCGetCheerConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CheerConfig   *CMsgCheerConfig       `protobuf:"bytes,2,opt,name=cheer_config,json=cheerConfig" json:"cheer_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCGetCheerConfigResponse) Reset() {
	*x = CMsgServerToGCGetCheerConfigResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCGetCheerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetCheerConfigResponse) ProtoMessage() {}

func (x *CMsgServerToGCGetCheerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetCheerConfigResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetCheerConfigResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgServerToGCGetCheerConfigResponse) GetCheerConfig() *CMsgCheerConfig {
	if x != nil {
		return x.CheerConfig
	}
	return nil
}

type CMsgGCToServerCheerScalesOverride struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scales        []float32              `protobuf:"fixed32,1,rep,name=scales" json:"scales,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerCheerScalesOverride) Reset() {
	*x = CMsgGCToServerCheerScalesOverride{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerCheerScalesOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerCheerScalesOverride) ProtoMessage() {}

func (x *CMsgGCToServerCheerScalesOverride) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerCheerScalesOverride.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerCheerScalesOverride) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgGCToServerCheerScalesOverride) GetScales() []float32 {
	if x != nil {
		return x.Scales
	}
	return nil
}

type CMsgGCToServerGetCheerState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerGetCheerState) Reset() {
	*x = CMsgGCToServerGetCheerState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerGetCheerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerGetCheerState) ProtoMessage() {}

func (x *CMsgGCToServerGetCheerState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerGetCheerState.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerGetCheerState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{89}
}

type CMsgCheerTypeState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CheerCounts   []uint32               `protobuf:"varint,1,rep,name=cheer_counts,json=cheerCounts" json:"cheer_counts,omitempty"`
	MaxPerSecond  *float32               `protobuf:"fixed32,2,opt,name=max_per_second,json=maxPerSecond" json:"max_per_second,omitempty"`
	CheerScale    *float32               `protobuf:"fixed32,3,opt,name=cheer_scale,json=cheerScale" json:"cheer_scale,omitempty"`
	OverrideScale *float32               `protobuf:"fixed32,4,opt,name=override_scale,json=overrideScale" json:"override_scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgCheerTypeState) Reset() {
	*x = CMsgCheerTypeState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgCheerTypeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCheerTypeState) ProtoMessage() {}

func (x *CMsgCheerTypeState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCheerTypeState.ProtoReflect.Descriptor instead.
func (*CMsgCheerTypeState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgCheerTypeState) GetCheerCounts() []uint32 {
	if x != nil {
		return x.CheerCounts
	}
	return nil
}

func (x *CMsgCheerTypeState) GetMaxPerSecond() float32 {
	if x != nil && x.MaxPerSecond != nil {
		return *x.MaxPerSecond
	}
	return 0
}

func (x *CMsgCheerTypeState) GetCheerScale() float32 {
	if x != nil && x.CheerScale != nil {
		return *x.CheerScale
	}
	return 0
}

func (x *CMsgCheerTypeState) GetOverrideScale() float32 {
	if x != nil && x.OverrideScale != nil {
		return *x.OverrideScale
	}
	return 0
}

type CMsgCheerState struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CheerTypes        []*CMsgCheerTypeState  `protobuf:"bytes,1,rep,name=cheer_types,json=cheerTypes" json:"cheer_types,omitempty"`
	RadiantCrowdLevel *uint32                `protobuf:"varint,2,opt,name=radiant_crowd_level,json=radiantCrowdLevel" json:"radiant_crowd_level,omitempty"`
	DireCrowdLevel    *uint32                `protobuf:"varint,3,opt,name=dire_crowd_level,json=direCrowdLevel" json:"dire_crowd_level,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgCheerState) Reset() {
	*x = CMsgCheerState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgCheerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCheerState) ProtoMessage() {}

func (x *CMsgCheerState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCheerState.ProtoReflect.Descriptor instead.
func (*CMsgCheerState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgCheerState) GetCheerTypes() []*CMsgCheerTypeState {
	if x != nil {
		return x.CheerTypes
	}
	return nil
}

func (x *CMsgCheerState) GetRadiantCrowdLevel() uint32 {
	if x != nil && x.RadiantCrowdLevel != nil {
		return *x.RadiantCrowdLevel
	}
	return 0
}

func (x *CMsgCheerState) GetDireCrowdLevel() uint32 {
	if x != nil && x.DireCrowdLevel != nil {
		return *x.DireCrowdLevel
	}
	return 0
}

type CMsgServerToGCReportCheerState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CheerConfig   *CMsgCheerConfig       `protobuf:"bytes,1,opt,name=cheer_config,json=cheerConfig" json:"cheer_config,omitempty"`
	CheerState    *CMsgCheerState        `protobuf:"bytes,2,opt,name=cheer_state,json=cheerState" json:"cheer_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCReportCheerState) Reset() {
	*x = CMsgServerToGCReportCheerState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCReportCheerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCReportCheerState) ProtoMessage() {}

func (x *CMsgServerToGCReportCheerState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCReportCheerState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCReportCheerState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgServerToGCReportCheerState) GetCheerConfig() *CMsgCheerConfig {
	if x != nil {
		return x.CheerConfig
	}
	return nil
}

func (x *CMsgServerToGCReportCheerState) GetCheerState() *CMsgCheerState {
	if x != nil {
		return x.CheerState
	}
	return nil
}

type CMsgServerToGCGetStickerHeroes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountIds    []uint32               `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCGetStickerHeroes) Reset() {
	*x = CMsgServerToGCGetStickerHeroes{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCGetStickerHeroes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetStickerHeroes) ProtoMessage() {}

func (x *CMsgServerToGCGetStickerHeroes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetStickerHeroes.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetStickerHeroes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgServerToGCGetStickerHeroes) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgServerToGCGetStickerHeroesResponse struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Players       []*CMsgServerToGCGetStickerHeroesResponse_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCGetStickerHeroesResponse) Reset() {
	*x = CMsgServerToGCGetStickerHeroesResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCGetStickerHeroesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetStickerHeroesResponse) ProtoMessage() {}

func (x *CMsgServerToGCGetStickerHeroesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetStickerHeroesResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetStickerHeroesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgServerToGCGetStickerHeroesResponse) GetPlayers() []*CMsgServerToGCGetStickerHeroesResponse_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgSteamLearnMatchInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AverageMmr    *uint32                `protobuf:"varint,1,opt,name=average_mmr,json=averageMmr" json:"average_mmr,omitempty"`
	RadiantWon    *bool                  `protobuf:"varint,2,opt,name=radiant_won,json=radiantWon" json:"radiant_won,omitempty"`
	Duration      *uint32                `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	GameMode      *uint32                `protobuf:"varint,4,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LobbyType     *uint32                `protobuf:"varint,5,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamLearnMatchInfo) Reset() {
	*x = CMsgSteamLearnMatchInfo{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMatchInfo) ProtoMessage() {}

func (x *CMsgSteamLearnMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMatchInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgSteamLearnMatchInfo) GetAverageMmr() uint32 {
	if x != nil && x.AverageMmr != nil {
		return *x.AverageMmr
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfo) GetRadiantWon() bool {
	if x != nil && x.RadiantWon != nil {
		return *x.RadiantWon
	}
	return false
}

func (x *CMsgSteamLearnMatchInfo) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfo) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfo) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

type CMsgSteamLearnMatchInfoPlayer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AverageMmr    *uint32                `protobuf:"varint,1,opt,name=average_mmr,json=averageMmr" json:"average_mmr,omitempty"`
	TeamWon       *bool                  `protobuf:"varint,2,opt,name=team_won,json=teamWon" json:"team_won,omitempty"`
	Duration      *uint32                `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	GameMode      *uint32                `protobuf:"varint,4,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LobbyType     *uint32                `protobuf:"varint,5,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	PlayerMmr     *uint32                `protobuf:"varint,6,opt,name=player_mmr,json=playerMmr" json:"player_mmr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamLearnMatchInfoPlayer) Reset() {
	*x = CMsgSteamLearnMatchInfoPlayer{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMatchInfoPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMatchInfoPlayer) ProtoMessage() {}

func (x *CMsgSteamLearnMatchInfoPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMatchInfoPlayer.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMatchInfoPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgSteamLearnMatchInfoPlayer) GetAverageMmr() uint32 {
	if x != nil && x.AverageMmr != nil {
		return *x.AverageMmr
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfoPlayer) GetTeamWon() bool {
	if x != nil && x.TeamWon != nil {
		return *x.TeamWon
	}
	return false
}

func (x *CMsgSteamLearnMatchInfoPlayer) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfoPlayer) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfoPlayer) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfoPlayer) GetPlayerMmr() uint32 {
	if x != nil && x.PlayerMmr != nil {
		return *x.PlayerMmr
	}
	return 0
}

type CMsgSteamLearnMatchInfoTeam struct {
	state          protoimpl.MessageState                `protogen:"open.v1"`
	RadiantPlayers []*CMsgSteamLearnMatchInfoTeam_Player `protobuf:"bytes,1,rep,name=radiant_players,json=radiantPlayers" json:"radiant_players,omitempty"`
	DirePlayers    []*CMsgSteamLearnMatchInfoTeam_Player `protobuf:"bytes,2,rep,name=dire_players,json=direPlayers" json:"dire_players,omitempty"`
	RadiantTeamWon *bool                                 `protobuf:"varint,3,opt,name=radiant_team_won,json=radiantTeamWon" json:"radiant_team_won,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgSteamLearnMatchInfoTeam) Reset() {
	*x = CMsgSteamLearnMatchInfoTeam{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMatchInfoTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMatchInfoTeam) ProtoMessage() {}

func (x *CMsgSteamLearnMatchInfoTeam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMatchInfoTeam.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMatchInfoTeam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{97}
}

func (x *CMsgSteamLearnMatchInfoTeam) GetRadiantPlayers() []*CMsgSteamLearnMatchInfoTeam_Player {
	if x != nil {
		return x.RadiantPlayers
	}
	return nil
}

func (x *CMsgSteamLearnMatchInfoTeam) GetDirePlayers() []*CMsgSteamLearnMatchInfoTeam_Player {
	if x != nil {
		return x.DirePlayers
	}
	return nil
}

func (x *CMsgSteamLearnMatchInfoTeam) GetRadiantTeamWon() bool {
	if x != nil && x.RadiantTeamWon != nil {
		return *x.RadiantTeamWon
	}
	return false
}

type CMsgSteamLearnMatchHeroesV3 struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RadiantHeroIds    []int32                `protobuf:"varint,1,rep,name=radiant_hero_ids,json=radiantHeroIds" json:"radiant_hero_ids,omitempty"`
	DireHeroIds       []int32                `protobuf:"varint,2,rep,name=dire_hero_ids,json=direHeroIds" json:"dire_hero_ids,omitempty"`
	RadiantLanes      []uint32               `protobuf:"varint,3,rep,name=radiant_lanes,json=radiantLanes" json:"radiant_lanes,omitempty"`
	DireLanes         []uint32               `protobuf:"varint,4,rep,name=dire_lanes,json=direLanes" json:"dire_lanes,omitempty"`
	RadiantHeroFacets []uint32               `protobuf:"varint,5,rep,name=radiant_hero_facets,json=radiantHeroFacets" json:"radiant_hero_facets,omitempty"`
	DireHeroFacets    []uint32               `protobuf:"varint,6,rep,name=dire_hero_facets,json=direHeroFacets" json:"dire_hero_facets,omitempty"`
	RadiantPositions  []uint32               `protobuf:"varint,7,rep,name=radiant_positions,json=radiantPositions" json:"radiant_positions,omitempty"`
	DirePositions     []uint32               `protobuf:"varint,8,rep,name=dire_positions,json=direPositions" json:"dire_positions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgSteamLearnMatchHeroesV3) Reset() {
	*x = CMsgSteamLearnMatchHeroesV3{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMatchHeroesV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMatchHeroesV3) ProtoMessage() {}

func (x *CMsgSteamLearnMatchHeroesV3) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMatchHeroesV3.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMatchHeroesV3) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgSteamLearnMatchHeroesV3) GetRadiantHeroIds() []int32 {
	if x != nil {
		return x.RadiantHeroIds
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroesV3) GetDireHeroIds() []int32 {
	if x != nil {
		return x.DireHeroIds
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroesV3) GetRadiantLanes() []uint32 {
	if x != nil {
		return x.RadiantLanes
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroesV3) GetDireLanes() []uint32 {
	if x != nil {
		return x.DireLanes
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroesV3) GetRadiantHeroFacets() []uint32 {
	if x != nil {
		return x.RadiantHeroFacets
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroesV3) GetDireHeroFacets() []uint32 {
	if x != nil {
		return x.DireHeroFacets
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroesV3) GetRadiantPositions() []uint32 {
	if x != nil {
		return x.RadiantPositions
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroesV3) GetDirePositions() []uint32 {
	if x != nil {
		return x.DirePositions
	}
	return nil
}

type CMsgSteamLearnMatchHeroV3 struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	HeroId           *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Lane             *uint32                `protobuf:"varint,2,opt,name=lane" json:"lane,omitempty"`
	Position         *uint32                `protobuf:"varint,8,opt,name=position" json:"position,omitempty"`
	AlliedHeroIds    []int32                `protobuf:"varint,3,rep,name=allied_hero_ids,json=alliedHeroIds" json:"allied_hero_ids,omitempty"`
	EnemyHeroIds     []int32                `protobuf:"varint,4,rep,name=enemy_hero_ids,json=enemyHeroIds" json:"enemy_hero_ids,omitempty"`
	HeroFacet        *uint32                `protobuf:"varint,5,opt,name=hero_facet,json=heroFacet" json:"hero_facet,omitempty"`
	AlliedHeroFacets []uint32               `protobuf:"varint,6,rep,name=allied_hero_facets,json=alliedHeroFacets" json:"allied_hero_facets,omitempty"`
	EnemyHerofacets  []uint32               `protobuf:"varint,7,rep,name=enemy_herofacets,json=enemyHerofacets" json:"enemy_herofacets,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgSteamLearnMatchHeroV3) Reset() {
	*x = CMsgSteamLearnMatchHeroV3{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMatchHeroV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMatchHeroV3) ProtoMessage() {}

func (x *CMsgSteamLearnMatchHeroV3) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMatchHeroV3.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMatchHeroV3) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgSteamLearnMatchHeroV3) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgSteamLearnMatchHeroV3) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgSteamLearnMatchHeroV3) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *CMsgSteamLearnMatchHeroV3) GetAlliedHeroIds() []int32 {
	if x != nil {
		return x.AlliedHeroIds
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroV3) GetEnemyHeroIds() []int32 {
	if x != nil {
		return x.EnemyHeroIds
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroV3) GetHeroFacet() uint32 {
	if x != nil && x.HeroFacet != nil {
		return *x.HeroFacet
	}
	return 0
}

func (x *CMsgSteamLearnMatchHeroV3) GetAlliedHeroFacets() []uint32 {
	if x != nil {
		return x.AlliedHeroFacets
	}
	return nil
}

func (x *CMsgSteamLearnMatchHeroV3) GetEnemyHerofacets() []uint32 {
	if x != nil {
		return x.EnemyHerofacets
	}
	return nil
}

type CMsgSteamLearnPlayerTimedStats struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	StatBuckets   []*CMsgSteamLearnPlayerTimedStats_StatBucket `protobuf:"bytes,1,rep,name=stat_buckets,json=statBuckets" json:"stat_buckets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamLearnPlayerTimedStats) Reset() {
	*x = CMsgSteamLearnPlayerTimedStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnPlayerTimedStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnPlayerTimedStats) ProtoMessage() {}

func (x *CMsgSteamLearnPlayerTimedStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnPlayerTimedStats.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnPlayerTimedStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{100}
}

func (x *CMsgSteamLearnPlayerTimedStats) GetStatBuckets() []*CMsgSteamLearnPlayerTimedStats_StatBucket {
	if x != nil {
		return x.StatBuckets
	}
	return nil
}

type CMsgSteamLearnMatchStateV5 struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	GameTime      *float32                              `protobuf:"fixed32,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	RadiantState  *CMsgSteamLearnMatchStateV5_TeamState `protobuf:"bytes,2,opt,name=radiant_state,json=radiantState" json:"radiant_state,omitempty"`
	DireState     *CMsgSteamLearnMatchStateV5_TeamState `protobuf:"bytes,3,opt,name=dire_state,json=direState" json:"dire_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamLearnMatchStateV5) Reset() {
	*x = CMsgSteamLearnMatchStateV5{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMatchStateV5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMatchStateV5) ProtoMessage() {}

func (x *CMsgSteamLearnMatchStateV5) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMatchStateV5.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMatchStateV5) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgSteamLearnMatchStateV5) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5) GetRadiantState() *CMsgSteamLearnMatchStateV5_TeamState {
	if x != nil {
		return x.RadiantState
	}
	return nil
}

func (x *CMsgSteamLearnMatchStateV5) GetDireState() *CMsgSteamLearnMatchStateV5_TeamState {
	if x != nil {
		return x.DireState
	}
	return nil
}

type CMsgSteamLearnItemPurchase struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ItemId          *int32                 `protobuf:"varint,1,opt,name=item_id,json=itemId,def=-1" json:"item_id,omitempty"`
	InventoryItems  []int32                `protobuf:"varint,2,rep,name=inventory_items,json=inventoryItems" json:"inventory_items,omitempty"`
	PurchaseHistory []int32                `protobuf:"varint,3,rep,name=purchase_history,json=purchaseHistory" json:"purchase_history,omitempty"`
	Gold            *uint32                `protobuf:"varint,4,opt,name=gold" json:"gold,omitempty"`
	NetWorth        *uint32                `protobuf:"varint,5,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	IsRadiantTeam   *uint32                `protobuf:"varint,6,opt,name=is_radiant_team,json=isRadiantTeam" json:"is_radiant_team,omitempty"`
	GameTime        *float32               `protobuf:"fixed32,7,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	IsUsingDotaPlus *bool                  `protobuf:"varint,8,opt,name=is_using_dota_plus,json=isUsingDotaPlus" json:"is_using_dota_plus,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgSteamLearnItemPurchase fields.
const (
	Default_CMsgSteamLearnItemPurchase_ItemId = int32(-1)
)

func (x *CMsgSteamLearnItemPurchase) Reset() {
	*x = CMsgSteamLearnItemPurchase{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnItemPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnItemPurchase) ProtoMessage() {}

func (x *CMsgSteamLearnItemPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnItemPurchase.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnItemPurchase) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{102}
}

func (x *CMsgSteamLearnItemPurchase) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return Default_CMsgSteamLearnItemPurchase_ItemId
}

func (x *CMsgSteamLearnItemPurchase) GetInventoryItems() []int32 {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

func (x *CMsgSteamLearnItemPurchase) GetPurchaseHistory() []int32 {
	if x != nil {
		return x.PurchaseHistory
	}
	return nil
}

func (x *CMsgSteamLearnItemPurchase) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgSteamLearnItemPurchase) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgSteamLearnItemPurchase) GetIsRadiantTeam() uint32 {
	if x != nil && x.IsRadiantTeam != nil {
		return *x.IsRadiantTeam
	}
	return 0
}

func (x *CMsgSteamLearnItemPurchase) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgSteamLearnItemPurchase) GetIsUsingDotaPlus() bool {
	if x != nil && x.IsUsingDotaPlus != nil {
		return *x.IsUsingDotaPlus
	}
	return false
}

type CMsgSteamLearnPreGameItemPurchases struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ItemIds         []int32                `protobuf:"varint,1,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
	IsRadiantTeam   *uint32                `protobuf:"varint,2,opt,name=is_radiant_team,json=isRadiantTeam" json:"is_radiant_team,omitempty"`
	IsUsingDotaPlus *bool                  `protobuf:"varint,3,opt,name=is_using_dota_plus,json=isUsingDotaPlus" json:"is_using_dota_plus,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgSteamLearnPreGameItemPurchases) Reset() {
	*x = CMsgSteamLearnPreGameItemPurchases{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnPreGameItemPurchases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnPreGameItemPurchases) ProtoMessage() {}

func (x *CMsgSteamLearnPreGameItemPurchases) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnPreGameItemPurchases.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnPreGameItemPurchases) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{103}
}

func (x *CMsgSteamLearnPreGameItemPurchases) GetItemIds() []int32 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

func (x *CMsgSteamLearnPreGameItemPurchases) GetIsRadiantTeam() uint32 {
	if x != nil && x.IsRadiantTeam != nil {
		return *x.IsRadiantTeam
	}
	return 0
}

func (x *CMsgSteamLearnPreGameItemPurchases) GetIsUsingDotaPlus() bool {
	if x != nil && x.IsUsingDotaPlus != nil {
		return *x.IsUsingDotaPlus
	}
	return false
}

type CMsgSteamLearnNeutralItemPurchase struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ItemId          *int32                 `protobuf:"varint,1,opt,name=item_id,json=itemId,def=-1" json:"item_id,omitempty"`
	Tier            *uint32                `protobuf:"varint,2,opt,name=tier" json:"tier,omitempty"`
	IsRadiantTeam   *uint32                `protobuf:"varint,3,opt,name=is_radiant_team,json=isRadiantTeam" json:"is_radiant_team,omitempty"`
	IsUsingDotaPlus *bool                  `protobuf:"varint,4,opt,name=is_using_dota_plus,json=isUsingDotaPlus" json:"is_using_dota_plus,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgSteamLearnNeutralItemPurchase fields.
const (
	Default_CMsgSteamLearnNeutralItemPurchase_ItemId = int32(-1)
)

func (x *CMsgSteamLearnNeutralItemPurchase) Reset() {
	*x = CMsgSteamLearnNeutralItemPurchase{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnNeutralItemPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnNeutralItemPurchase) ProtoMessage() {}

func (x *CMsgSteamLearnNeutralItemPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnNeutralItemPurchase.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnNeutralItemPurchase) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{104}
}

func (x *CMsgSteamLearnNeutralItemPurchase) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return Default_CMsgSteamLearnNeutralItemPurchase_ItemId
}

func (x *CMsgSteamLearnNeutralItemPurchase) GetTier() uint32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

func (x *CMsgSteamLearnNeutralItemPurchase) GetIsRadiantTeam() uint32 {
	if x != nil && x.IsRadiantTeam != nil {
		return *x.IsRadiantTeam
	}
	return 0
}

func (x *CMsgSteamLearnNeutralItemPurchase) GetIsUsingDotaPlus() bool {
	if x != nil && x.IsUsingDotaPlus != nil {
		return *x.IsUsingDotaPlus
	}
	return false
}

type CMsgSteamLearnNeutralItemPurchaseV2 struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Tier              *uint32                `protobuf:"varint,1,opt,name=tier" json:"tier,omitempty"`
	TrinketId         *int32                 `protobuf:"varint,2,opt,name=trinket_id,json=trinketId,def=-1" json:"trinket_id,omitempty"`
	EnhancementId     *int32                 `protobuf:"varint,3,opt,name=enhancement_id,json=enhancementId,def=-1" json:"enhancement_id,omitempty"`
	PreviousTrinketId *int32                 `protobuf:"varint,4,opt,name=previous_trinket_id,json=previousTrinketId,def=-1" json:"previous_trinket_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CMsgSteamLearnNeutralItemPurchaseV2 fields.
const (
	Default_CMsgSteamLearnNeutralItemPurchaseV2_TrinketId         = int32(-1)
	Default_CMsgSteamLearnNeutralItemPurchaseV2_EnhancementId     = int32(-1)
	Default_CMsgSteamLearnNeutralItemPurchaseV2_PreviousTrinketId = int32(-1)
)

func (x *CMsgSteamLearnNeutralItemPurchaseV2) Reset() {
	*x = CMsgSteamLearnNeutralItemPurchaseV2{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnNeutralItemPurchaseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnNeutralItemPurchaseV2) ProtoMessage() {}

func (x *CMsgSteamLearnNeutralItemPurchaseV2) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnNeutralItemPurchaseV2.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnNeutralItemPurchaseV2) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgSteamLearnNeutralItemPurchaseV2) GetTier() uint32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

func (x *CMsgSteamLearnNeutralItemPurchaseV2) GetTrinketId() int32 {
	if x != nil && x.TrinketId != nil {
		return *x.TrinketId
	}
	return Default_CMsgSteamLearnNeutralItemPurchaseV2_TrinketId
}

func (x *CMsgSteamLearnNeutralItemPurchaseV2) GetEnhancementId() int32 {
	if x != nil && x.EnhancementId != nil {
		return *x.EnhancementId
	}
	return Default_CMsgSteamLearnNeutralItemPurchaseV2_EnhancementId
}

func (x *CMsgSteamLearnNeutralItemPurchaseV2) GetPreviousTrinketId() int32 {
	if x != nil && x.PreviousTrinketId != nil {
		return *x.PreviousTrinketId
	}
	return Default_CMsgSteamLearnNeutralItemPurchaseV2_PreviousTrinketId
}

type CMsgSteamLearnNeutralItemPurchaseV4 struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Tier               *uint32                `protobuf:"varint,1,opt,name=tier" json:"tier,omitempty"`
	TrinketOptions     []int32                `protobuf:"varint,2,rep,name=trinket_options,json=trinketOptions" json:"trinket_options,omitempty"`
	EnhancementOptions []int32                `protobuf:"varint,3,rep,name=enhancement_options,json=enhancementOptions" json:"enhancement_options,omitempty"`
	TrinketId          *int32                 `protobuf:"varint,4,opt,name=trinket_id,json=trinketId,def=-1" json:"trinket_id,omitempty"`
	EnhancementId      *int32                 `protobuf:"varint,5,opt,name=enhancement_id,json=enhancementId,def=-1" json:"enhancement_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgSteamLearnNeutralItemPurchaseV4 fields.
const (
	Default_CMsgSteamLearnNeutralItemPurchaseV4_TrinketId     = int32(-1)
	Default_CMsgSteamLearnNeutralItemPurchaseV4_EnhancementId = int32(-1)
)

func (x *CMsgSteamLearnNeutralItemPurchaseV4) Reset() {
	*x = CMsgSteamLearnNeutralItemPurchaseV4{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnNeutralItemPurchaseV4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnNeutralItemPurchaseV4) ProtoMessage() {}

func (x *CMsgSteamLearnNeutralItemPurchaseV4) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnNeutralItemPurchaseV4.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnNeutralItemPurchaseV4) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgSteamLearnNeutralItemPurchaseV4) GetTier() uint32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

func (x *CMsgSteamLearnNeutralItemPurchaseV4) GetTrinketOptions() []int32 {
	if x != nil {
		return x.TrinketOptions
	}
	return nil
}

func (x *CMsgSteamLearnNeutralItemPurchaseV4) GetEnhancementOptions() []int32 {
	if x != nil {
		return x.EnhancementOptions
	}
	return nil
}

func (x *CMsgSteamLearnNeutralItemPurchaseV4) GetTrinketId() int32 {
	if x != nil && x.TrinketId != nil {
		return *x.TrinketId
	}
	return Default_CMsgSteamLearnNeutralItemPurchaseV4_TrinketId
}

func (x *CMsgSteamLearnNeutralItemPurchaseV4) GetEnhancementId() int32 {
	if x != nil && x.EnhancementId != nil {
		return *x.EnhancementId
	}
	return Default_CMsgSteamLearnNeutralItemPurchaseV4_EnhancementId
}

type CMsgSteamLearnAbilitySkill struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AbilityId        *int32                 `protobuf:"varint,1,opt,name=ability_id,json=abilityId,def=-1" json:"ability_id,omitempty"`
	SkilledAbilities []int32                `protobuf:"varint,2,rep,name=skilled_abilities,json=skilledAbilities" json:"skilled_abilities,omitempty"`
	GameTime         *float32               `protobuf:"fixed32,3,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	IsUsingDotaPlus  *bool                  `protobuf:"varint,4,opt,name=is_using_dota_plus,json=isUsingDotaPlus" json:"is_using_dota_plus,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CMsgSteamLearnAbilitySkill fields.
const (
	Default_CMsgSteamLearnAbilitySkill_AbilityId = int32(-1)
)

func (x *CMsgSteamLearnAbilitySkill) Reset() {
	*x = CMsgSteamLearnAbilitySkill{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnAbilitySkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnAbilitySkill) ProtoMessage() {}

func (x *CMsgSteamLearnAbilitySkill) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnAbilitySkill.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnAbilitySkill) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgSteamLearnAbilitySkill) GetAbilityId() int32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return Default_CMsgSteamLearnAbilitySkill_AbilityId
}

func (x *CMsgSteamLearnAbilitySkill) GetSkilledAbilities() []int32 {
	if x != nil {
		return x.SkilledAbilities
	}
	return nil
}

func (x *CMsgSteamLearnAbilitySkill) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgSteamLearnAbilitySkill) GetIsUsingDotaPlus() bool {
	if x != nil && x.IsUsingDotaPlus != nil {
		return *x.IsUsingDotaPlus
	}
	return false
}

type CMsgSteamLearnEarlyGameItemPurchasesV2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemIds       []int32                `protobuf:"varint,1,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
	OtherItemIds  []int32                `protobuf:"varint,2,rep,name=other_item_ids,json=otherItemIds" json:"other_item_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamLearnEarlyGameItemPurchasesV2) Reset() {
	*x = CMsgSteamLearnEarlyGameItemPurchasesV2{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnEarlyGameItemPurchasesV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnEarlyGameItemPurchasesV2) ProtoMessage() {}

func (x *CMsgSteamLearnEarlyGameItemPurchasesV2) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnEarlyGameItemPurchasesV2.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnEarlyGameItemPurchasesV2) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{108}
}

func (x *CMsgSteamLearnEarlyGameItemPurchasesV2) GetItemIds() []int32 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

func (x *CMsgSteamLearnEarlyGameItemPurchasesV2) GetOtherItemIds() []int32 {
	if x != nil {
		return x.OtherItemIds
	}
	return nil
}

type CMsgSteamLearnLateGameItemPurchasesV2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemIds       []int32                `protobuf:"varint,1,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
	OtherItemIds  []int32                `protobuf:"varint,2,rep,name=other_item_ids,json=otherItemIds" json:"other_item_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamLearnLateGameItemPurchasesV2) Reset() {
	*x = CMsgSteamLearnLateGameItemPurchasesV2{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnLateGameItemPurchasesV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnLateGameItemPurchasesV2) ProtoMessage() {}

func (x *CMsgSteamLearnLateGameItemPurchasesV2) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnLateGameItemPurchasesV2.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnLateGameItemPurchasesV2) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{109}
}

func (x *CMsgSteamLearnLateGameItemPurchasesV2) GetItemIds() []int32 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

func (x *CMsgSteamLearnLateGameItemPurchasesV2) GetOtherItemIds() []int32 {
	if x != nil {
		return x.OtherItemIds
	}
	return nil
}

type CMsgSteamLearnMainGameItemPurchases struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemIds       []int32                `protobuf:"varint,1,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamLearnMainGameItemPurchases) Reset() {
	*x = CMsgSteamLearnMainGameItemPurchases{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMainGameItemPurchases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMainGameItemPurchases) ProtoMessage() {}

func (x *CMsgSteamLearnMainGameItemPurchases) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMainGameItemPurchases.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMainGameItemPurchases) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgSteamLearnMainGameItemPurchases) GetItemIds() []int32 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

type CMsgSteamLearnWardPlacement struct {
	state            protoimpl.MessageState                  `protogen:"open.v1"`
	WardLoc          *CMsgSteamLearnWardPlacement_Location   `protobuf:"bytes,1,opt,name=ward_loc,json=wardLoc" json:"ward_loc,omitempty"`
	ExistingWardLocs []*CMsgSteamLearnWardPlacement_Location `protobuf:"bytes,2,rep,name=existing_ward_locs,json=existingWardLocs" json:"existing_ward_locs,omitempty"`
	Team             *uint32                                 `protobuf:"varint,3,opt,name=team" json:"team,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgSteamLearnWardPlacement) Reset() {
	*x = CMsgSteamLearnWardPlacement{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnWardPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnWardPlacement) ProtoMessage() {}

func (x *CMsgSteamLearnWardPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnWardPlacement.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnWardPlacement) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgSteamLearnWardPlacement) GetWardLoc() *CMsgSteamLearnWardPlacement_Location {
	if x != nil {
		return x.WardLoc
	}
	return nil
}

func (x *CMsgSteamLearnWardPlacement) GetExistingWardLocs() []*CMsgSteamLearnWardPlacement_Location {
	if x != nil {
		return x.ExistingWardLocs
	}
	return nil
}

func (x *CMsgSteamLearnWardPlacement) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

type CMsgSteamLearnPlayerMatchState struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NetWorth          *uint32                `protobuf:"varint,1,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Level             *uint32                `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Deaths            *uint32                `protobuf:"varint,3,opt,name=deaths" json:"deaths,omitempty"`
	RespawnTime       *uint32                `protobuf:"varint,4,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	HasBuyback        *bool                  `protobuf:"varint,5,opt,name=has_buyback,json=hasBuyback" json:"has_buyback,omitempty"`
	HasAegis          *bool                  `protobuf:"varint,6,opt,name=has_aegis,json=hasAegis" json:"has_aegis,omitempty"`
	HasRapier         *bool                  `protobuf:"varint,7,opt,name=has_rapier,json=hasRapier" json:"has_rapier,omitempty"`
	TeamNetWorth      *uint32                `protobuf:"varint,8,opt,name=team_net_worth,json=teamNetWorth" json:"team_net_worth,omitempty"`
	EnemyTeamNetWorth *uint32                `protobuf:"varint,9,opt,name=enemy_team_net_worth,json=enemyTeamNetWorth" json:"enemy_team_net_worth,omitempty"`
	TeamKills         *uint32                `protobuf:"varint,10,opt,name=team_kills,json=teamKills" json:"team_kills,omitempty"`
	EnemyTeamKills    *uint32                `protobuf:"varint,11,opt,name=enemy_team_kills,json=enemyTeamKills" json:"enemy_team_kills,omitempty"`
	GameTime          *float32               `protobuf:"fixed32,12,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgSteamLearnPlayerMatchState) Reset() {
	*x = CMsgSteamLearnPlayerMatchState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnPlayerMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnPlayerMatchState) ProtoMessage() {}

func (x *CMsgSteamLearnPlayerMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnPlayerMatchState.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnPlayerMatchState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{112}
}

func (x *CMsgSteamLearnPlayerMatchState) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgSteamLearnPlayerMatchState) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgSteamLearnPlayerMatchState) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgSteamLearnPlayerMatchState) GetRespawnTime() uint32 {
	if x != nil && x.RespawnTime != nil {
		return *x.RespawnTime
	}
	return 0
}

func (x *CMsgSteamLearnPlayerMatchState) GetHasBuyback() bool {
	if x != nil && x.HasBuyback != nil {
		return *x.HasBuyback
	}
	return false
}

func (x *CMsgSteamLearnPlayerMatchState) GetHasAegis() bool {
	if x != nil && x.HasAegis != nil {
		return *x.HasAegis
	}
	return false
}

func (x *CMsgSteamLearnPlayerMatchState) GetHasRapier() bool {
	if x != nil && x.HasRapier != nil {
		return *x.HasRapier
	}
	return false
}

func (x *CMsgSteamLearnPlayerMatchState) GetTeamNetWorth() uint32 {
	if x != nil && x.TeamNetWorth != nil {
		return *x.TeamNetWorth
	}
	return 0
}

func (x *CMsgSteamLearnPlayerMatchState) GetEnemyTeamNetWorth() uint32 {
	if x != nil && x.EnemyTeamNetWorth != nil {
		return *x.EnemyTeamNetWorth
	}
	return 0
}

func (x *CMsgSteamLearnPlayerMatchState) GetTeamKills() uint32 {
	if x != nil && x.TeamKills != nil {
		return *x.TeamKills
	}
	return 0
}

func (x *CMsgSteamLearnPlayerMatchState) GetEnemyTeamKills() uint32 {
	if x != nil && x.EnemyTeamKills != nil {
		return *x.EnemyTeamKills
	}
	return 0
}

func (x *CMsgSteamLearnPlayerMatchState) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

type CMsgSignOutMuertaMinigame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventGameData []byte                 `protobuf:"bytes,1,opt,name=event_game_data,json=eventGameData" json:"event_game_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutMuertaMinigame) Reset() {
	*x = CMsgSignOutMuertaMinigame{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutMuertaMinigame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutMuertaMinigame) ProtoMessage() {}

func (x *CMsgSignOutMuertaMinigame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutMuertaMinigame.ProtoReflect.Descriptor instead.
func (*CMsgSignOutMuertaMinigame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{113}
}

func (x *CMsgSignOutMuertaMinigame) GetEventGameData() []byte {
	if x != nil {
		return x.EventGameData
	}
	return nil
}

type CMsgSignOutMapStats struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Players       []*CMsgSignOutMapStats_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	GlobalStats   *CMsgMapStatsSnapshot         `protobuf:"bytes,2,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutMapStats) Reset() {
	*x = CMsgSignOutMapStats{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutMapStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutMapStats) ProtoMessage() {}

func (x *CMsgSignOutMapStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutMapStats.ProtoReflect.Descriptor instead.
func (*CMsgSignOutMapStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{114}
}

func (x *CMsgSignOutMapStats) GetPlayers() []*CMsgSignOutMapStats_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgSignOutMapStats) GetGlobalStats() *CMsgMapStatsSnapshot {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

type CMsgServerToGCNewBloomGift struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Defindex         *uint32                `protobuf:"varint,1,opt,name=defindex" json:"defindex,omitempty"`
	GifterAccountId  *uint32                `protobuf:"varint,2,opt,name=gifter_account_id,json=gifterAccountId" json:"gifter_account_id,omitempty"`
	TargetAccountIds []uint32               `protobuf:"varint,3,rep,name=target_account_ids,json=targetAccountIds" json:"target_account_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgServerToGCNewBloomGift) Reset() {
	*x = CMsgServerToGCNewBloomGift{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCNewBloomGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCNewBloomGift) ProtoMessage() {}

func (x *CMsgServerToGCNewBloomGift) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCNewBloomGift.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCNewBloomGift) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{115}
}

func (x *CMsgServerToGCNewBloomGift) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CMsgServerToGCNewBloomGift) GetGifterAccountId() uint32 {
	if x != nil && x.GifterAccountId != nil {
		return *x.GifterAccountId
	}
	return 0
}

func (x *CMsgServerToGCNewBloomGift) GetTargetAccountIds() []uint32 {
	if x != nil {
		return x.TargetAccountIds
	}
	return nil
}

type CMsgServerToGCNewBloomGiftResponse struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Result             *ENewBloomGiftingResponse `protobuf:"varint,1,opt,name=result,enum=protocol.ENewBloomGiftingResponse,def=1" json:"result,omitempty"`
	ReceivedAccountIds []uint32                  `protobuf:"varint,2,rep,name=received_account_ids,json=receivedAccountIds" json:"received_account_ids,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgServerToGCNewBloomGiftResponse fields.
const (
	Default_CMsgServerToGCNewBloomGiftResponse_Result = ENewBloomGiftingResponse_kENewBloomGifting_UnknownFailure
)

func (x *CMsgServerToGCNewBloomGiftResponse) Reset() {
	*x = CMsgServerToGCNewBloomGiftResponse{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCNewBloomGiftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCNewBloomGiftResponse) ProtoMessage() {}

func (x *CMsgServerToGCNewBloomGiftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCNewBloomGiftResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCNewBloomGiftResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{116}
}

func (x *CMsgServerToGCNewBloomGiftResponse) GetResult() ENewBloomGiftingResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgServerToGCNewBloomGiftResponse_Result
}

func (x *CMsgServerToGCNewBloomGiftResponse) GetReceivedAccountIds() []uint32 {
	if x != nil {
		return x.ReceivedAccountIds
	}
	return nil
}

type CMsgSignOutOverworld struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Players       []*CMsgSignOutOverworld_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	EventId       *EEvent                        `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSignOutOverworld fields.
const (
	Default_CMsgSignOutOverworld_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutOverworld) Reset() {
	*x = CMsgSignOutOverworld{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutOverworld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutOverworld) ProtoMessage() {}

func (x *CMsgSignOutOverworld) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutOverworld.ProtoReflect.Descriptor instead.
func (*CMsgSignOutOverworld) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{117}
}

func (x *CMsgSignOutOverworld) GetPlayers() []*CMsgSignOutOverworld_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgSignOutOverworld) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutOverworld_EventId
}

type CMsgSignOutCraftworks struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Players       []*CMsgSignOutCraftworks_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	EventId       *EEvent                         `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSignOutCraftworks fields.
const (
	Default_CMsgSignOutCraftworks_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutCraftworks) Reset() {
	*x = CMsgSignOutCraftworks{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutCraftworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCraftworks) ProtoMessage() {}

func (x *CMsgSignOutCraftworks) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCraftworks.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCraftworks) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{118}
}

func (x *CMsgSignOutCraftworks) GetPlayers() []*CMsgSignOutCraftworks_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgSignOutCraftworks) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutCraftworks_EventId
}

type CMsgPoorNetworkConditions_Player struct {
	state            protoimpl.MessageState       `protogen:"open.v1"`
	AccountId        *uint32                      `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DisconnectReason *ENetworkDisconnectionReason `protobuf:"varint,2,opt,name=disconnect_reason,json=disconnectReason,enum=protocol.ENetworkDisconnectionReason,def=0" json:"disconnect_reason,omitempty"`
	NumBadIntervals  *uint32                      `protobuf:"varint,3,opt,name=num_bad_intervals,json=numBadIntervals" json:"num_bad_intervals,omitempty"`
	PeakLossPct      *uint32                      `protobuf:"varint,4,opt,name=peak_loss_pct,json=peakLossPct" json:"peak_loss_pct,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CMsgPoorNetworkConditions_Player fields.
const (
	Default_CMsgPoorNetworkConditions_Player_DisconnectReason = ENetworkDisconnectionReason_NETWORK_DISCONNECT_INVALID
)

func (x *CMsgPoorNetworkConditions_Player) Reset() {
	*x = CMsgPoorNetworkConditions_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPoorNetworkConditions_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPoorNetworkConditions_Player) ProtoMessage() {}

func (x *CMsgPoorNetworkConditions_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPoorNetworkConditions_Player.ProtoReflect.Descriptor instead.
func (*CMsgPoorNetworkConditions_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgPoorNetworkConditions_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgPoorNetworkConditions_Player) GetDisconnectReason() ENetworkDisconnectionReason {
	if x != nil && x.DisconnectReason != nil {
		return *x.DisconnectReason
	}
	return Default_CMsgPoorNetworkConditions_Player_DisconnectReason
}

func (x *CMsgPoorNetworkConditions_Player) GetNumBadIntervals() uint32 {
	if x != nil && x.NumBadIntervals != nil {
		return *x.NumBadIntervals
	}
	return 0
}

func (x *CMsgPoorNetworkConditions_Player) GetPeakLossPct() uint32 {
	if x != nil && x.PeakLossPct != nil {
		return *x.PeakLossPct
	}
	return 0
}

type CMsgConnectedPlayers_Player struct {
	state            protoimpl.MessageState       `protogen:"open.v1"`
	SteamId          *uint64                      `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	HeroId           *int32                       `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	LeaverState      *CMsgLeaverState             `protobuf:"bytes,3,opt,name=leaver_state,json=leaverState" json:"leaver_state,omitempty"`
	DisconnectReason *ENetworkDisconnectionReason `protobuf:"varint,4,opt,name=disconnect_reason,json=disconnectReason,enum=protocol.ENetworkDisconnectionReason,def=0" json:"disconnect_reason,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CMsgConnectedPlayers_Player fields.
const (
	Default_CMsgConnectedPlayers_Player_DisconnectReason = ENetworkDisconnectionReason_NETWORK_DISCONNECT_INVALID
)

func (x *CMsgConnectedPlayers_Player) Reset() {
	*x = CMsgConnectedPlayers_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgConnectedPlayers_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgConnectedPlayers_Player) ProtoMessage() {}

func (x *CMsgConnectedPlayers_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgConnectedPlayers_Player.ProtoReflect.Descriptor instead.
func (*CMsgConnectedPlayers_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgConnectedPlayers_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgConnectedPlayers_Player) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgConnectedPlayers_Player) GetLeaverState() *CMsgLeaverState {
	if x != nil {
		return x.LeaverState
	}
	return nil
}

func (x *CMsgConnectedPlayers_Player) GetDisconnectReason() ENetworkDisconnectionReason {
	if x != nil && x.DisconnectReason != nil {
		return *x.DisconnectReason
	}
	return Default_CMsgConnectedPlayers_Player_DisconnectReason
}

type CMsgConnectedPlayers_PlayerDraft struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	Team          *DOTA_GC_TEAM          `protobuf:"varint,2,opt,name=team,enum=protocol.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	TeamSlot      *int32                 `protobuf:"varint,3,opt,name=team_slot,json=teamSlot" json:"team_slot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgConnectedPlayers_PlayerDraft fields.
const (
	Default_CMsgConnectedPlayers_PlayerDraft_Team = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
)

func (x *CMsgConnectedPlayers_PlayerDraft) Reset() {
	*x = CMsgConnectedPlayers_PlayerDraft{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgConnectedPlayers_PlayerDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgConnectedPlayers_PlayerDraft) ProtoMessage() {}

func (x *CMsgConnectedPlayers_PlayerDraft) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgConnectedPlayers_PlayerDraft.ProtoReflect.Descriptor instead.
func (*CMsgConnectedPlayers_PlayerDraft) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CMsgConnectedPlayers_PlayerDraft) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgConnectedPlayers_PlayerDraft) GetTeam() DOTA_GC_TEAM {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CMsgConnectedPlayers_PlayerDraft_Team
}

func (x *CMsgConnectedPlayers_PlayerDraft) GetTeamSlot() int32 {
	if x != nil && x.TeamSlot != nil {
		return *x.TeamSlot
	}
	return 0
}

type CMsgSignOutGameplayStats_CPlayer struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	SteamId          *uint64                   `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PlayerSlot       *uint32                   `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	HeroId           *int32                    `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	TimedPlayerStats []*CMatchPlayerTimedStats `protobuf:"bytes,4,rep,name=timed_player_stats,json=timedPlayerStats" json:"timed_player_stats,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgSignOutGameplayStats_CPlayer) Reset() {
	*x = CMsgSignOutGameplayStats_CPlayer{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutGameplayStats_CPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGameplayStats_CPlayer) ProtoMessage() {}

func (x *CMsgSignOutGameplayStats_CPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGameplayStats_CPlayer.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGameplayStats_CPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CMsgSignOutGameplayStats_CPlayer) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgSignOutGameplayStats_CPlayer) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgSignOutGameplayStats_CPlayer) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgSignOutGameplayStats_CPlayer) GetTimedPlayerStats() []*CMatchPlayerTimedStats {
	if x != nil {
		return x.TimedPlayerStats
	}
	return nil
}

type CMsgSignOutGameplayStats_CTeam struct {
	state          protoimpl.MessageState              `protogen:"open.v1"`
	IsWinningTeam  *bool                               `protobuf:"varint,1,opt,name=is_winning_team,json=isWinningTeam" json:"is_winning_team,omitempty"`
	IsRadiantTeam  *bool                               `protobuf:"varint,2,opt,name=is_radiant_team,json=isRadiantTeam" json:"is_radiant_team,omitempty"`
	TimedTeamStats []*CMatchTeamTimedStats             `protobuf:"bytes,3,rep,name=timed_team_stats,json=timedTeamStats" json:"timed_team_stats,omitempty"`
	Players        []*CMsgSignOutGameplayStats_CPlayer `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgSignOutGameplayStats_CTeam) Reset() {
	*x = CMsgSignOutGameplayStats_CTeam{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutGameplayStats_CTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGameplayStats_CTeam) ProtoMessage() {}

func (x *CMsgSignOutGameplayStats_CTeam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGameplayStats_CTeam.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGameplayStats_CTeam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{11, 1}
}

func (x *CMsgSignOutGameplayStats_CTeam) GetIsWinningTeam() bool {
	if x != nil && x.IsWinningTeam != nil {
		return *x.IsWinningTeam
	}
	return false
}

func (x *CMsgSignOutGameplayStats_CTeam) GetIsRadiantTeam() bool {
	if x != nil && x.IsRadiantTeam != nil {
		return *x.IsRadiantTeam
	}
	return false
}

func (x *CMsgSignOutGameplayStats_CTeam) GetTimedTeamStats() []*CMatchTeamTimedStats {
	if x != nil {
		return x.TimedTeamStats
	}
	return nil
}

func (x *CMsgSignOutGameplayStats_CTeam) GetPlayers() []*CMsgSignOutGameplayStats_CPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameMatchSignOut_CTeam struct {
	state            protoimpl.MessageState                `protogen:"open.v1"`
	Players          []*CMsgGameMatchSignOut_CTeam_CPlayer `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	TeamTrackedStats []*CMsgTrackedStat                    `protobuf:"bytes,2,rep,name=team_tracked_stats,json=teamTrackedStats" json:"team_tracked_stats,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGameMatchSignOut_CTeam) Reset() {
	*x = CMsgGameMatchSignOut_CTeam{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut_CTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CTeam) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CTeam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CTeam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgGameMatchSignOut_CTeam) GetPlayers() []*CMsgGameMatchSignOut_CTeam_CPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam) GetTeamTrackedStats() []*CMsgTrackedStat {
	if x != nil {
		return x.TeamTrackedStats
	}
	return nil
}

type CMsgGameMatchSignOut_CAdditionalSignoutMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents      []byte                 `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) Reset() {
	*x = CMsgGameMatchSignOut_CAdditionalSignoutMsg{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CAdditionalSignoutMsg) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CAdditionalSignoutMsg.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CAdditionalSignoutMsg) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 1}
}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type CMsgGameMatchSignOut_CSocialFeedMatchEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Timestamp     *uint32                `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	EventType     *uint32                `protobuf:"varint,3,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	GameTime      *int32                 `protobuf:"varint,4,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	ReplayTime    *uint32                `protobuf:"varint,5,opt,name=replay_time,json=replayTime" json:"replay_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) Reset() {
	*x = CMsgGameMatchSignOut_CSocialFeedMatchEvent{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CSocialFeedMatchEvent) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CSocialFeedMatchEvent.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CSocialFeedMatchEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 2}
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetEventType() uint32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetReplayTime() uint32 {
	if x != nil && x.ReplayTime != nil {
		return *x.ReplayTime
	}
	return 0
}

type CMsgGameMatchSignOut_CCustomGameData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PublishTimestamp *uint32                `protobuf:"varint,1,opt,name=publish_timestamp,json=publishTimestamp" json:"publish_timestamp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGameMatchSignOut_CCustomGameData) Reset() {
	*x = CMsgGameMatchSignOut_CCustomGameData{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut_CCustomGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CCustomGameData) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CCustomGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CCustomGameData.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CCustomGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 3}
}

func (x *CMsgGameMatchSignOut_CCustomGameData) GetPublishTimestamp() uint32 {
	if x != nil && x.PublishTimestamp != nil {
		return *x.PublishTimestamp
	}
	return 0
}

type CMsgGameMatchSignOut_EventGameLeaderboardEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NameSuffix    *string                `protobuf:"bytes,1,opt,name=name_suffix,json=nameSuffix" json:"name_suffix,omitempty"`
	Score         *int32                 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	ExtraData_1   *uint32                `protobuf:"varint,3,opt,name=extra_data_1,json=extraData1" json:"extra_data_1,omitempty"`
	ExtraData_2   *uint32                `protobuf:"varint,4,opt,name=extra_data_2,json=extraData2" json:"extra_data_2,omitempty"`
	ExtraData_3   *uint32                `protobuf:"varint,5,opt,name=extra_data_3,json=extraData3" json:"extra_data_3,omitempty"`
	ExtraData_4   *uint32                `protobuf:"varint,6,opt,name=extra_data_4,json=extraData4" json:"extra_data_4,omitempty"`
	ExtraData_5   *uint32                `protobuf:"varint,7,opt,name=extra_data_5,json=extraData5" json:"extra_data_5,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) Reset() {
	*x = CMsgGameMatchSignOut_EventGameLeaderboardEntry{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_EventGameLeaderboardEntry) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_EventGameLeaderboardEntry.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_EventGameLeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 4}
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetNameSuffix() string {
	if x != nil && x.NameSuffix != nil {
		return *x.NameSuffix
	}
	return ""
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_1() uint32 {
	if x != nil && x.ExtraData_1 != nil {
		return *x.ExtraData_1
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_2() uint32 {
	if x != nil && x.ExtraData_2 != nil {
		return *x.ExtraData_2
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_3() uint32 {
	if x != nil && x.ExtraData_3 != nil {
		return *x.ExtraData_3
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_4() uint32 {
	if x != nil && x.ExtraData_4 != nil {
		return *x.ExtraData_4
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_5() uint32 {
	if x != nil && x.ExtraData_5 != nil {
		return *x.ExtraData_5
	}
	return 0
}

type CMsgGameMatchSignOut_WardPlacement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      *int32                 `protobuf:"varint,1,opt,name=player_id,json=playerId,def=-1" json:"player_id,omitempty"`
	TeamId        *uint32                `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	PlacedTime    *uint32                `protobuf:"varint,3,opt,name=placed_time,json=placedTime" json:"placed_time,omitempty"`
	BuildingState *uint32                `protobuf:"varint,4,opt,name=building_state,json=buildingState" json:"building_state,omitempty"`
	CreepState    *uint32                `protobuf:"varint,5,opt,name=creep_state,json=creepState" json:"creep_state,omitempty"`
	RoshanAlive   *bool                  `protobuf:"varint,6,opt,name=roshan_alive,json=roshanAlive" json:"roshan_alive,omitempty"`
	PositionX     *uint32                `protobuf:"varint,7,opt,name=position_x,json=positionX" json:"position_x,omitempty"`
	PositionY     *uint32                `protobuf:"varint,8,opt,name=position_y,json=positionY" json:"position_y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGameMatchSignOut_WardPlacement fields.
const (
	Default_CMsgGameMatchSignOut_WardPlacement_PlayerId = int32(-1)
)

func (x *CMsgGameMatchSignOut_WardPlacement) Reset() {
	*x = CMsgGameMatchSignOut_WardPlacement{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut_WardPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_WardPlacement) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_WardPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_WardPlacement.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_WardPlacement) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 5}
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return Default_CMsgGameMatchSignOut_WardPlacement_PlayerId
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetPlacedTime() uint32 {
	if x != nil && x.PlacedTime != nil {
		return *x.PlacedTime
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetBuildingState() uint32 {
	if x != nil && x.BuildingState != nil {
		return *x.BuildingState
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetCreepState() uint32 {
	if x != nil && x.CreepState != nil {
		return *x.CreepState
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetRoshanAlive() bool {
	if x != nil && x.RoshanAlive != nil {
		return *x.RoshanAlive
	}
	return false
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetPositionX() uint32 {
	if x != nil && x.PositionX != nil {
		return *x.PositionX
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetPositionY() uint32 {
	if x != nil && x.PositionY != nil {
		return *x.PositionY
	}
	return 0
}

type CMsgGameMatchSignOut_CTeam_CPlayer struct {
	state                          protoimpl.MessageState                                   `protogen:"open.v1"`
	SteamId                        *uint64                                                  `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	HeroId                         *int32                                                   `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Items                          []int32                                                  `protobuf:"varint,4,rep,name=items" json:"items,omitempty"`
	ItemPurchaseTimes              []uint32                                                 `protobuf:"varint,63,rep,name=item_purchase_times,json=itemPurchaseTimes" json:"item_purchase_times,omitempty"`
	Gold                           *uint32                                                  `protobuf:"varint,5,opt,name=gold" json:"gold,omitempty"`
	Kills                          *uint32                                                  `protobuf:"varint,6,opt,name=kills" json:"kills,omitempty"`
	Deaths                         *uint32                                                  `protobuf:"varint,7,opt,name=deaths" json:"deaths,omitempty"`
	Assists                        *uint32                                                  `protobuf:"varint,8,opt,name=assists" json:"assists,omitempty"`
	LeaverStatus                   *uint32                                                  `protobuf:"varint,9,opt,name=leaver_status,json=leaverStatus" json:"leaver_status,omitempty"`
	LastHits                       *uint32                                                  `protobuf:"varint,10,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                         *uint32                                                  `protobuf:"varint,11,opt,name=denies" json:"denies,omitempty"`
	GoldPerMin                     *uint32                                                  `protobuf:"varint,12,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XpPerMinute                    *uint32                                                  `protobuf:"varint,13,opt,name=xp_per_minute,json=xpPerMinute" json:"xp_per_minute,omitempty"`
	GoldSpent                      *uint32                                                  `protobuf:"varint,14,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	Level                          *uint32                                                  `protobuf:"varint,15,opt,name=level" json:"level,omitempty"`
	ScaledHeroDamage               *uint32                                                  `protobuf:"varint,16,opt,name=scaled_hero_damage,json=scaledHeroDamage" json:"scaled_hero_damage,omitempty"`
	ScaledTowerDamage              *uint32                                                  `protobuf:"varint,17,opt,name=scaled_tower_damage,json=scaledTowerDamage" json:"scaled_tower_damage,omitempty"`
	ScaledHeroHealing              *uint32                                                  `protobuf:"varint,18,opt,name=scaled_hero_healing,json=scaledHeroHealing" json:"scaled_hero_healing,omitempty"`
	TimeLastSeen                   *uint32                                                  `protobuf:"varint,19,opt,name=time_last_seen,json=timeLastSeen" json:"time_last_seen,omitempty"`
	SupportAbilityValue            *uint32                                                  `protobuf:"varint,20,opt,name=support_ability_value,json=supportAbilityValue" json:"support_ability_value,omitempty"`
	PartyId                        *uint64                                                  `protobuf:"varint,21,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	ClaimedFarmGold                *uint32                                                  `protobuf:"varint,27,opt,name=claimed_farm_gold,json=claimedFarmGold" json:"claimed_farm_gold,omitempty"`
	SupportGold                    *uint32                                                  `protobuf:"varint,28,opt,name=support_gold,json=supportGold" json:"support_gold,omitempty"`
	ClaimedDenies                  *uint32                                                  `protobuf:"varint,29,opt,name=claimed_denies,json=claimedDenies" json:"claimed_denies,omitempty"`
	ClaimedMisses                  *uint32                                                  `protobuf:"varint,30,opt,name=claimed_misses,json=claimedMisses" json:"claimed_misses,omitempty"`
	Misses                         *uint32                                                  `protobuf:"varint,31,opt,name=misses" json:"misses,omitempty"`
	NetWorth                       *uint32                                                  `protobuf:"varint,34,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	HeroDamage                     *uint32                                                  `protobuf:"varint,37,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	TowerDamage                    *uint32                                                  `protobuf:"varint,38,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	HeroHealing                    *uint32                                                  `protobuf:"varint,39,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	AbilityUpgrades                []*CMatchPlayerAbilityUpgrade                            `protobuf:"bytes,32,rep,name=ability_upgrades,json=abilityUpgrades" json:"ability_upgrades,omitempty"`
	AdditionalUnitsInventory       []*CMatchAdditionalUnitInventory                         `protobuf:"bytes,33,rep,name=additional_units_inventory,json=additionalUnitsInventory" json:"additional_units_inventory,omitempty"`
	PermanentBuffs                 []*CMatchPlayerPermanentBuff                             `protobuf:"bytes,40,rep,name=permanent_buffs,json=permanentBuffs" json:"permanent_buffs,omitempty"`
	CustomGameData                 *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData      `protobuf:"bytes,35,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	MatchPlayerFlags               *uint32                                                  `protobuf:"varint,36,opt,name=match_player_flags,json=matchPlayerFlags" json:"match_player_flags,omitempty"`
	TalentAbilityIds               []int32                                                  `protobuf:"varint,41,rep,name=talent_ability_ids,json=talentAbilityIds" json:"talent_ability_ids,omitempty"`
	HeroPickOrder                  *uint32                                                  `protobuf:"varint,42,opt,name=hero_pick_order,json=heroPickOrder" json:"hero_pick_order,omitempty"`
	HeroWasRandomed                *bool                                                    `protobuf:"varint,43,opt,name=hero_was_randomed,json=heroWasRandomed" json:"hero_was_randomed,omitempty"`
	HeroWasDotaPlusSuggestion      *bool                                                    `protobuf:"varint,50,opt,name=hero_was_dota_plus_suggestion,json=heroWasDotaPlusSuggestion" json:"hero_was_dota_plus_suggestion,omitempty"`
	Lane                           *uint32                                                  `protobuf:"varint,45,opt,name=lane" json:"lane,omitempty"`
	IsUsingPlusGuide               *bool                                                    `protobuf:"varint,47,opt,name=is_using_plus_guide,json=isUsingPlusGuide" json:"is_using_plus_guide,omitempty"`
	HeroDamageReceived             []*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived `protobuf:"bytes,48,rep,name=hero_damage_received,json=heroDamageReceived" json:"hero_damage_received,omitempty"`
	HeroDamageDealt                []*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived `protobuf:"bytes,64,rep,name=hero_damage_dealt,json=heroDamageDealt" json:"hero_damage_dealt,omitempty"`
	SecondsDead                    *uint32                                                  `protobuf:"varint,51,opt,name=seconds_dead,json=secondsDead" json:"seconds_dead,omitempty"`
	GoldLostToDeath                *uint32                                                  `protobuf:"varint,52,opt,name=gold_lost_to_death,json=goldLostToDeath" json:"gold_lost_to_death,omitempty"`
	CommandCount                   *uint32                                                  `protobuf:"varint,53,opt,name=command_count,json=commandCount" json:"command_count,omitempty"`
	MouseClickCastCommandCount     *uint32                                                  `protobuf:"varint,54,opt,name=mouse_click_cast_command_count,json=mouseClickCastCommandCount" json:"mouse_click_cast_command_count,omitempty"`
	TeleportsUsed                  *uint32                                                  `protobuf:"varint,55,opt,name=teleports_used,json=teleportsUsed" json:"teleports_used,omitempty"`
	CavernCrawlPreferredMapVariant *uint32                                                  `protobuf:"varint,56,opt,name=cavern_crawl_preferred_map_variant,json=cavernCrawlPreferredMapVariant,def=255" json:"cavern_crawl_preferred_map_variant,omitempty"`
	BountyRunes                    *uint32                                                  `protobuf:"varint,57,opt,name=bounty_runes,json=bountyRunes" json:"bounty_runes,omitempty"`
	OutpostsCaptured               *uint32                                                  `protobuf:"varint,58,opt,name=outposts_captured,json=outpostsCaptured" json:"outposts_captured,omitempty"`
	Dewards                        *uint32                                                  `protobuf:"varint,59,opt,name=dewards" json:"dewards,omitempty"`
	WardsPlaced                    *uint32                                                  `protobuf:"varint,60,opt,name=wards_placed,json=wardsPlaced" json:"wards_placed,omitempty"`
	CampsStacked                   *uint32                                                  `protobuf:"varint,61,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	PlayerSlot                     *uint32                                                  `protobuf:"varint,62,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	PredictedPosition              *uint32                                                  `protobuf:"varint,66,opt,name=predicted_position,json=predictedPosition" json:"predicted_position,omitempty"`
	LaneOutcomes                   *uint32                                                  `protobuf:"varint,67,opt,name=lane_outcomes,json=laneOutcomes,def=255" json:"lane_outcomes,omitempty"`
	FriendlyT1DestroyedTime        *uint32                                                  `protobuf:"varint,68,opt,name=friendly_t1_destroyed_time,json=friendlyT1DestroyedTime" json:"friendly_t1_destroyed_time,omitempty"`
	EnemyT1DestroyedTime           *uint32                                                  `protobuf:"varint,69,opt,name=enemy_t1_destroyed_time,json=enemyT1DestroyedTime" json:"enemy_t1_destroyed_time,omitempty"`
	FriendlyRoshanKills            *uint32                                                  `protobuf:"varint,70,opt,name=friendly_roshan_kills,json=friendlyRoshanKills" json:"friendly_roshan_kills,omitempty"`
	EnemyRoshanKills               *uint32                                                  `protobuf:"varint,71,opt,name=enemy_roshan_kills,json=enemyRoshanKills" json:"enemy_roshan_kills,omitempty"`
	PowerRunes                     *uint32                                                  `protobuf:"varint,72,opt,name=power_runes,json=powerRunes" json:"power_runes,omitempty"`
	WaterRunes                     *uint32                                                  `protobuf:"varint,73,opt,name=water_runes,json=waterRunes" json:"water_runes,omitempty"`
	StunDuration                   *float32                                                 `protobuf:"fixed32,74,opt,name=stun_duration,json=stunDuration" json:"stun_duration,omitempty"`
	TeamNumber                     *DOTA_GC_TEAM                                            `protobuf:"varint,75,opt,name=team_number,json=teamNumber,enum=protocol.DOTA_GC_TEAM,def=0" json:"team_number,omitempty"`
	TeamSlot                       *uint32                                                  `protobuf:"varint,76,opt,name=team_slot,json=teamSlot" json:"team_slot,omitempty"`
	TimePurchasedShard             *uint32                                                  `protobuf:"varint,77,opt,name=time_purchased_shard,json=timePurchasedShard" json:"time_purchased_shard,omitempty"`
	TimePurchasedAghs              *uint32                                                  `protobuf:"varint,78,opt,name=time_purchased_aghs,json=timePurchasedAghs" json:"time_purchased_aghs,omitempty"`
	AbilityDraftAbilities          []int32                                                  `protobuf:"varint,79,rep,name=ability_draft_abilities,json=abilityDraftAbilities" json:"ability_draft_abilities,omitempty"`
	PlayerTrackedStats             []*CMsgTrackedStat                                       `protobuf:"bytes,80,rep,name=player_tracked_stats,json=playerTrackedStats" json:"player_tracked_stats,omitempty"`
	PredictedRank                  *uint32                                                  `protobuf:"varint,81,opt,name=predicted_rank,json=predictedRank" json:"predicted_rank,omitempty"`
	SelectedFacet                  *uint32                                                  `protobuf:"varint,82,opt,name=selected_facet,json=selectedFacet" json:"selected_facet,omitempty"`
	EnhancementLevel               *uint32                                                  `protobuf:"varint,83,opt,name=enhancement_level,json=enhancementLevel" json:"enhancement_level,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

// Default values for CMsgGameMatchSignOut_CTeam_CPlayer fields.
const (
	Default_CMsgGameMatchSignOut_CTeam_CPlayer_CavernCrawlPreferredMapVariant = uint32(255)
	Default_CMsgGameMatchSignOut_CTeam_CPlayer_LaneOutcomes                   = uint32(255)
	Default_CMsgGameMatchSignOut_CTeam_CPlayer_TeamNumber                     = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
)

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) Reset() {
	*x = CMsgGameMatchSignOut_CTeam_CPlayer{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CTeam_CPlayer) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam_CPlayer.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CTeam_CPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetItems() []int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetItemPurchaseTimes() []uint32 {
	if x != nil {
		return x.ItemPurchaseTimes
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetLeaverStatus() uint32 {
	if x != nil && x.LeaverStatus != nil {
		return *x.LeaverStatus
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetGoldPerMin() uint32 {
	if x != nil && x.GoldPerMin != nil {
		return *x.GoldPerMin
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetXpPerMinute() uint32 {
	if x != nil && x.XpPerMinute != nil {
		return *x.XpPerMinute
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetGoldSpent() uint32 {
	if x != nil && x.GoldSpent != nil {
		return *x.GoldSpent
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetScaledHeroDamage() uint32 {
	if x != nil && x.ScaledHeroDamage != nil {
		return *x.ScaledHeroDamage
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetScaledTowerDamage() uint32 {
	if x != nil && x.ScaledTowerDamage != nil {
		return *x.ScaledTowerDamage
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetScaledHeroHealing() uint32 {
	if x != nil && x.ScaledHeroHealing != nil {
		return *x.ScaledHeroHealing
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTimeLastSeen() uint32 {
	if x != nil && x.TimeLastSeen != nil {
		return *x.TimeLastSeen
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetSupportAbilityValue() uint32 {
	if x != nil && x.SupportAbilityValue != nil {
		return *x.SupportAbilityValue
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetClaimedFarmGold() uint32 {
	if x != nil && x.ClaimedFarmGold != nil {
		return *x.ClaimedFarmGold
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetSupportGold() uint32 {
	if x != nil && x.SupportGold != nil {
		return *x.SupportGold
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetClaimedDenies() uint32 {
	if x != nil && x.ClaimedDenies != nil {
		return *x.ClaimedDenies
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetClaimedMisses() uint32 {
	if x != nil && x.ClaimedMisses != nil {
		return *x.ClaimedMisses
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetMisses() uint32 {
	if x != nil && x.Misses != nil {
		return *x.Misses
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroDamage() uint32 {
	if x != nil && x.HeroDamage != nil {
		return *x.HeroDamage
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTowerDamage() uint32 {
	if x != nil && x.TowerDamage != nil {
		return *x.TowerDamage
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroHealing() uint32 {
	if x != nil && x.HeroHealing != nil {
		return *x.HeroHealing
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetAbilityUpgrades() []*CMatchPlayerAbilityUpgrade {
	if x != nil {
		return x.AbilityUpgrades
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetAdditionalUnitsInventory() []*CMatchAdditionalUnitInventory {
	if x != nil {
		return x.AdditionalUnitsInventory
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetPermanentBuffs() []*CMatchPlayerPermanentBuff {
	if x != nil {
		return x.PermanentBuffs
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetCustomGameData() *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData {
	if x != nil {
		return x.CustomGameData
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetMatchPlayerFlags() uint32 {
	if x != nil && x.MatchPlayerFlags != nil {
		return *x.MatchPlayerFlags
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTalentAbilityIds() []int32 {
	if x != nil {
		return x.TalentAbilityIds
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroPickOrder() uint32 {
	if x != nil && x.HeroPickOrder != nil {
		return *x.HeroPickOrder
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroWasRandomed() bool {
	if x != nil && x.HeroWasRandomed != nil {
		return *x.HeroWasRandomed
	}
	return false
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroWasDotaPlusSuggestion() bool {
	if x != nil && x.HeroWasDotaPlusSuggestion != nil {
		return *x.HeroWasDotaPlusSuggestion
	}
	return false
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetIsUsingPlusGuide() bool {
	if x != nil && x.IsUsingPlusGuide != nil {
		return *x.IsUsingPlusGuide
	}
	return false
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroDamageReceived() []*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived {
	if x != nil {
		return x.HeroDamageReceived
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroDamageDealt() []*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived {
	if x != nil {
		return x.HeroDamageDealt
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetSecondsDead() uint32 {
	if x != nil && x.SecondsDead != nil {
		return *x.SecondsDead
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetGoldLostToDeath() uint32 {
	if x != nil && x.GoldLostToDeath != nil {
		return *x.GoldLostToDeath
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetCommandCount() uint32 {
	if x != nil && x.CommandCount != nil {
		return *x.CommandCount
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetMouseClickCastCommandCount() uint32 {
	if x != nil && x.MouseClickCastCommandCount != nil {
		return *x.MouseClickCastCommandCount
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTeleportsUsed() uint32 {
	if x != nil && x.TeleportsUsed != nil {
		return *x.TeleportsUsed
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetCavernCrawlPreferredMapVariant() uint32 {
	if x != nil && x.CavernCrawlPreferredMapVariant != nil {
		return *x.CavernCrawlPreferredMapVariant
	}
	return Default_CMsgGameMatchSignOut_CTeam_CPlayer_CavernCrawlPreferredMapVariant
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetBountyRunes() uint32 {
	if x != nil && x.BountyRunes != nil {
		return *x.BountyRunes
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetOutpostsCaptured() uint32 {
	if x != nil && x.OutpostsCaptured != nil {
		return *x.OutpostsCaptured
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetDewards() uint32 {
	if x != nil && x.Dewards != nil {
		return *x.Dewards
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetWardsPlaced() uint32 {
	if x != nil && x.WardsPlaced != nil {
		return *x.WardsPlaced
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetCampsStacked() uint32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetPredictedPosition() uint32 {
	if x != nil && x.PredictedPosition != nil {
		return *x.PredictedPosition
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetLaneOutcomes() uint32 {
	if x != nil && x.LaneOutcomes != nil {
		return *x.LaneOutcomes
	}
	return Default_CMsgGameMatchSignOut_CTeam_CPlayer_LaneOutcomes
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetFriendlyT1DestroyedTime() uint32 {
	if x != nil && x.FriendlyT1DestroyedTime != nil {
		return *x.FriendlyT1DestroyedTime
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetEnemyT1DestroyedTime() uint32 {
	if x != nil && x.EnemyT1DestroyedTime != nil {
		return *x.EnemyT1DestroyedTime
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetFriendlyRoshanKills() uint32 {
	if x != nil && x.FriendlyRoshanKills != nil {
		return *x.FriendlyRoshanKills
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetEnemyRoshanKills() uint32 {
	if x != nil && x.EnemyRoshanKills != nil {
		return *x.EnemyRoshanKills
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetPowerRunes() uint32 {
	if x != nil && x.PowerRunes != nil {
		return *x.PowerRunes
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetWaterRunes() uint32 {
	if x != nil && x.WaterRunes != nil {
		return *x.WaterRunes
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetStunDuration() float32 {
	if x != nil && x.StunDuration != nil {
		return *x.StunDuration
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTeamNumber() DOTA_GC_TEAM {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return Default_CMsgGameMatchSignOut_CTeam_CPlayer_TeamNumber
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTeamSlot() uint32 {
	if x != nil && x.TeamSlot != nil {
		return *x.TeamSlot
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTimePurchasedShard() uint32 {
	if x != nil && x.TimePurchasedShard != nil {
		return *x.TimePurchasedShard
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTimePurchasedAghs() uint32 {
	if x != nil && x.TimePurchasedAghs != nil {
		return *x.TimePurchasedAghs
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetAbilityDraftAbilities() []int32 {
	if x != nil {
		return x.AbilityDraftAbilities
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetPlayerTrackedStats() []*CMsgTrackedStat {
	if x != nil {
		return x.PlayerTrackedStats
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetPredictedRank() uint32 {
	if x != nil && x.PredictedRank != nil {
		return *x.PredictedRank
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetSelectedFacet() uint32 {
	if x != nil && x.SelectedFacet != nil {
		return *x.SelectedFacet
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetEnhancementLevel() uint32 {
	if x != nil && x.EnhancementLevel != nil {
		return *x.EnhancementLevel
	}
	return 0
}

type CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DotaTeam      *uint32                `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Winner        *bool                  `protobuf:"varint,2,opt,name=winner" json:"winner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) Reset() {
	*x = CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 0, 0, 0}
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) GetDotaTeam() uint32 {
	if x != nil && x.DotaTeam != nil {
		return *x.DotaTeam
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) GetWinner() bool {
	if x != nil && x.Winner != nil {
		return *x.Winner
	}
	return false
}

type CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	PreReduction  *uint32                                            `protobuf:"varint,1,opt,name=pre_reduction,json=preReduction" json:"pre_reduction,omitempty"`
	PostReduction *uint32                                            `protobuf:"varint,2,opt,name=post_reduction,json=postReduction" json:"post_reduction,omitempty"`
	DamageType    *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType `protobuf:"varint,3,opt,name=damage_type,json=damageType,enum=protocol.CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType,def=0" json:"damage_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived fields.
const (
	Default_CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_DamageType = CMsgGameMatchSignOut_CTeam_CPlayer_HERO_DAMAGE_PHYSICAL
)

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) Reset() {
	*x = CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12, 0, 0, 1}
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) GetPreReduction() uint32 {
	if x != nil && x.PreReduction != nil {
		return *x.PreReduction
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) GetPostReduction() uint32 {
	if x != nil && x.PostReduction != nil {
		return *x.PostReduction
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) GetDamageType() CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType {
	if x != nil && x.DamageType != nil {
		return *x.DamageType
	}
	return Default_CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_DamageType
}

type CMsgSignOutTextMuteInfo_TextMuteMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Region         *uint32                `protobuf:"varint,1,opt,name=region" json:"region,omitempty"`
	CausedTextMute *bool                  `protobuf:"varint,2,opt,name=caused_text_mute,json=causedTextMute" json:"caused_text_mute,omitempty"`
	ChatMessage    *string                `protobuf:"bytes,3,opt,name=chat_message,json=chatMessage" json:"chat_message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) Reset() {
	*x = CMsgSignOutTextMuteInfo_TextMuteMessage{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutTextMuteInfo_TextMuteMessage) ProtoMessage() {}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutTextMuteInfo_TextMuteMessage.ProtoReflect.Descriptor instead.
func (*CMsgSignOutTextMuteInfo_TextMuteMessage) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) GetRegion() uint32 {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return 0
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) GetCausedTextMute() bool {
	if x != nil && x.CausedTextMute != nil {
		return *x.CausedTextMute
	}
	return false
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) GetChatMessage() string {
	if x != nil && x.ChatMessage != nil {
		return *x.ChatMessage
	}
	return ""
}

type CMsgSignOutCommunicationSummary_PlayerCommunication struct {
	state                       protoimpl.MessageState                                            `protogen:"open.v1"`
	AccountId                   *uint32                                                           `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Pings                       *uint32                                                           `protobuf:"varint,2,opt,name=pings" json:"pings,omitempty"`
	MaxPingsPerInterval         *uint32                                                           `protobuf:"varint,3,opt,name=max_pings_per_interval,json=maxPingsPerInterval" json:"max_pings_per_interval,omitempty"`
	TeammatePings               *uint32                                                           `protobuf:"varint,4,opt,name=teammate_pings,json=teammatePings" json:"teammate_pings,omitempty"`
	MaxTeammatePingsPerInterval *uint32                                                           `protobuf:"varint,5,opt,name=max_teammate_pings_per_interval,json=maxTeammatePingsPerInterval" json:"max_teammate_pings_per_interval,omitempty"`
	TeamChatMessages            *uint32                                                           `protobuf:"varint,6,opt,name=team_chat_messages,json=teamChatMessages" json:"team_chat_messages,omitempty"`
	AllChatMessages             *uint32                                                           `protobuf:"varint,7,opt,name=all_chat_messages,json=allChatMessages" json:"all_chat_messages,omitempty"`
	ChatWheelMessages           *uint32                                                           `protobuf:"varint,8,opt,name=chat_wheel_messages,json=chatWheelMessages" json:"chat_wheel_messages,omitempty"`
	Pauses                      *uint32                                                           `protobuf:"varint,9,opt,name=pauses" json:"pauses,omitempty"`
	Unpauses                    *uint32                                                           `protobuf:"varint,10,opt,name=unpauses" json:"unpauses,omitempty"`
	LinesDrawn                  *uint32                                                           `protobuf:"varint,11,opt,name=lines_drawn,json=linesDrawn" json:"lines_drawn,omitempty"`
	VoiceChatSeconds            *uint32                                                           `protobuf:"varint,12,opt,name=voice_chat_seconds,json=voiceChatSeconds" json:"voice_chat_seconds,omitempty"`
	ChatMutes                   *uint32                                                           `protobuf:"varint,13,opt,name=chat_mutes,json=chatMutes" json:"chat_mutes,omitempty"`
	VoiceMutes                  *uint32                                                           `protobuf:"varint,14,opt,name=voice_mutes,json=voiceMutes" json:"voice_mutes,omitempty"`
	PingDetails                 []*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail `protobuf:"bytes,15,rep,name=ping_details,json=pingDetails" json:"ping_details,omitempty"`
	CommsBlocksSolo             *uint32                                                           `protobuf:"varint,16,opt,name=comms_blocks_solo,json=commsBlocksSolo" json:"comms_blocks_solo,omitempty"`
	CommsBlocksMass             *uint32                                                           `protobuf:"varint,17,opt,name=comms_blocks_mass,json=commsBlocksMass" json:"comms_blocks_mass,omitempty"`
	ChatLog                     []string                                                          `protobuf:"bytes,18,rep,name=chat_log,json=chatLog" json:"chat_log,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) Reset() {
	*x = CMsgSignOutCommunicationSummary_PlayerCommunication{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunicationSummary_PlayerCommunication) ProtoMessage() {}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunicationSummary_PlayerCommunication.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunicationSummary_PlayerCommunication) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetPings() uint32 {
	if x != nil && x.Pings != nil {
		return *x.Pings
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetMaxPingsPerInterval() uint32 {
	if x != nil && x.MaxPingsPerInterval != nil {
		return *x.MaxPingsPerInterval
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetTeammatePings() uint32 {
	if x != nil && x.TeammatePings != nil {
		return *x.TeammatePings
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetMaxTeammatePingsPerInterval() uint32 {
	if x != nil && x.MaxTeammatePingsPerInterval != nil {
		return *x.MaxTeammatePingsPerInterval
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetTeamChatMessages() uint32 {
	if x != nil && x.TeamChatMessages != nil {
		return *x.TeamChatMessages
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetAllChatMessages() uint32 {
	if x != nil && x.AllChatMessages != nil {
		return *x.AllChatMessages
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetChatWheelMessages() uint32 {
	if x != nil && x.ChatWheelMessages != nil {
		return *x.ChatWheelMessages
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetPauses() uint32 {
	if x != nil && x.Pauses != nil {
		return *x.Pauses
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetUnpauses() uint32 {
	if x != nil && x.Unpauses != nil {
		return *x.Unpauses
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetLinesDrawn() uint32 {
	if x != nil && x.LinesDrawn != nil {
		return *x.LinesDrawn
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetVoiceChatSeconds() uint32 {
	if x != nil && x.VoiceChatSeconds != nil {
		return *x.VoiceChatSeconds
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetChatMutes() uint32 {
	if x != nil && x.ChatMutes != nil {
		return *x.ChatMutes
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetVoiceMutes() uint32 {
	if x != nil && x.VoiceMutes != nil {
		return *x.VoiceMutes
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetPingDetails() []*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail {
	if x != nil {
		return x.PingDetails
	}
	return nil
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetCommsBlocksSolo() uint32 {
	if x != nil && x.CommsBlocksSolo != nil {
		return *x.CommsBlocksSolo
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetCommsBlocksMass() uint32 {
	if x != nil && x.CommsBlocksMass != nil {
		return *x.CommsBlocksMass
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetChatLog() []string {
	if x != nil {
		return x.ChatLog
	}
	return nil
}

type CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *uint32                `protobuf:"varint,1,opt,name=type,def=4294967295" json:"type,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail fields.
const (
	Default_CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail_Type = uint32(4294967295)
)

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) Reset() {
	*x = CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) ProtoMessage() {}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{17, 0, 0}
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail_Type
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgGameMatchSignoutResponse_PlayerMetadata struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	HeroId         *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	AvgKillsX16    *uint32                `protobuf:"varint,2,opt,name=avg_kills_x16,json=avgKillsX16" json:"avg_kills_x16,omitempty"`
	AvgDeathsX16   *uint32                `protobuf:"varint,3,opt,name=avg_deaths_x16,json=avgDeathsX16" json:"avg_deaths_x16,omitempty"`
	AvgAssistsX16  *uint32                `protobuf:"varint,4,opt,name=avg_assists_x16,json=avgAssistsX16" json:"avg_assists_x16,omitempty"`
	AvgGpmX16      *uint32                `protobuf:"varint,5,opt,name=avg_gpm_x16,json=avgGpmX16" json:"avg_gpm_x16,omitempty"`
	AvgXpmX16      *uint32                `protobuf:"varint,6,opt,name=avg_xpm_x16,json=avgXpmX16" json:"avg_xpm_x16,omitempty"`
	BestKillsX16   *uint32                `protobuf:"varint,7,opt,name=best_kills_x16,json=bestKillsX16" json:"best_kills_x16,omitempty"`
	BestAssistsX16 *uint32                `protobuf:"varint,8,opt,name=best_assists_x16,json=bestAssistsX16" json:"best_assists_x16,omitempty"`
	BestGpmX16     *uint32                `protobuf:"varint,9,opt,name=best_gpm_x16,json=bestGpmX16" json:"best_gpm_x16,omitempty"`
	BestXpmX16     *uint32                `protobuf:"varint,10,opt,name=best_xpm_x16,json=bestXpmX16" json:"best_xpm_x16,omitempty"`
	WinStreak      *uint32                `protobuf:"varint,11,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	BestWinStreak  *uint32                `protobuf:"varint,12,opt,name=best_win_streak,json=bestWinStreak" json:"best_win_streak,omitempty"`
	GamesPlayed    *uint32                `protobuf:"varint,13,opt,name=games_played,json=gamesPlayed" json:"games_played,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) Reset() {
	*x = CMsgGameMatchSignoutResponse_PlayerMetadata{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignoutResponse_PlayerMetadata) ProtoMessage() {}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignoutResponse_PlayerMetadata.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignoutResponse_PlayerMetadata) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgKillsX16() uint32 {
	if x != nil && x.AvgKillsX16 != nil {
		return *x.AvgKillsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgDeathsX16() uint32 {
	if x != nil && x.AvgDeathsX16 != nil {
		return *x.AvgDeathsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgAssistsX16() uint32 {
	if x != nil && x.AvgAssistsX16 != nil {
		return *x.AvgAssistsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgGpmX16() uint32 {
	if x != nil && x.AvgGpmX16 != nil {
		return *x.AvgGpmX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgXpmX16() uint32 {
	if x != nil && x.AvgXpmX16 != nil {
		return *x.AvgXpmX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestKillsX16() uint32 {
	if x != nil && x.BestKillsX16 != nil {
		return *x.BestKillsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestAssistsX16() uint32 {
	if x != nil && x.BestAssistsX16 != nil {
		return *x.BestAssistsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestGpmX16() uint32 {
	if x != nil && x.BestGpmX16 != nil {
		return *x.BestGpmX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestXpmX16() uint32 {
	if x != nil && x.BestXpmX16 != nil {
		return *x.BestXpmX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetWinStreak() uint32 {
	if x != nil && x.WinStreak != nil {
		return *x.WinStreak
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestWinStreak() uint32 {
	if x != nil && x.BestWinStreak != nil {
		return *x.BestWinStreak
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetGamesPlayed() uint32 {
	if x != nil && x.GamesPlayed != nil {
		return *x.GamesPlayed
	}
	return 0
}

type CMsgDOTALiveScoreboardUpdate_Team struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Players       []*CMsgDOTALiveScoreboardUpdate_Team_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Score         *uint32                                     `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	TowerState    *uint32                                     `protobuf:"varint,3,opt,name=tower_state,json=towerState" json:"tower_state,omitempty"`
	BarracksState *uint32                                     `protobuf:"varint,4,opt,name=barracks_state,json=barracksState" json:"barracks_state,omitempty"`
	HeroPicks     []int32                                     `protobuf:"varint,5,rep,name=hero_picks,json=heroPicks" json:"hero_picks,omitempty"`
	HeroBans      []int32                                     `protobuf:"varint,6,rep,name=hero_bans,json=heroBans" json:"hero_bans,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) Reset() {
	*x = CMsgDOTALiveScoreboardUpdate_Team{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALiveScoreboardUpdate_Team) ProtoMessage() {}

func (x *CMsgDOTALiveScoreboardUpdate_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate_Team.ProtoReflect.Descriptor instead.
func (*CMsgDOTALiveScoreboardUpdate_Team) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetPlayers() []*CMsgDOTALiveScoreboardUpdate_Team_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetTowerState() uint32 {
	if x != nil && x.TowerState != nil {
		return *x.TowerState
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetBarracksState() uint32 {
	if x != nil && x.BarracksState != nil {
		return *x.BarracksState
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetHeroPicks() []int32 {
	if x != nil {
		return x.HeroPicks
	}
	return nil
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetHeroBans() []int32 {
	if x != nil {
		return x.HeroBans
	}
	return nil
}

type CMsgDOTALiveScoreboardUpdate_Team_Player struct {
	state            protoimpl.MessageState                                      `protogen:"open.v1"`
	PlayerSlot       *uint32                                                     `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	PlayerName       *string                                                     `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	HeroName         *string                                                     `protobuf:"bytes,3,opt,name=hero_name,json=heroName" json:"hero_name,omitempty"`
	HeroId           *int32                                                      `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Kills            *uint32                                                     `protobuf:"varint,5,opt,name=kills" json:"kills,omitempty"`
	Deaths           *uint32                                                     `protobuf:"varint,6,opt,name=deaths" json:"deaths,omitempty"`
	Assists          *uint32                                                     `protobuf:"varint,7,opt,name=assists" json:"assists,omitempty"`
	LastHits         *uint32                                                     `protobuf:"varint,8,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies           *uint32                                                     `protobuf:"varint,9,opt,name=denies" json:"denies,omitempty"`
	Gold             *uint32                                                     `protobuf:"varint,10,opt,name=gold" json:"gold,omitempty"`
	Level            *uint32                                                     `protobuf:"varint,11,opt,name=level" json:"level,omitempty"`
	GoldPerMin       *float32                                                    `protobuf:"fixed32,12,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XpPerMin         *float32                                                    `protobuf:"fixed32,13,opt,name=xp_per_min,json=xpPerMin" json:"xp_per_min,omitempty"`
	UltimateState    *CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState `protobuf:"varint,14,opt,name=ultimate_state,json=ultimateState,enum=protocol.CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState,def=0" json:"ultimate_state,omitempty"`
	UltimateCooldown *float32                                                    `protobuf:"fixed32,15,opt,name=ultimate_cooldown,json=ultimateCooldown" json:"ultimate_cooldown,omitempty"`
	Item0            *int32                                                      `protobuf:"varint,16,opt,name=item0,def=-1" json:"item0,omitempty"`
	Item1            *int32                                                      `protobuf:"varint,17,opt,name=item1,def=-1" json:"item1,omitempty"`
	Item2            *int32                                                      `protobuf:"varint,18,opt,name=item2,def=-1" json:"item2,omitempty"`
	Item3            *int32                                                      `protobuf:"varint,19,opt,name=item3,def=-1" json:"item3,omitempty"`
	Item4            *int32                                                      `protobuf:"varint,20,opt,name=item4,def=-1" json:"item4,omitempty"`
	Item5            *int32                                                      `protobuf:"varint,21,opt,name=item5,def=-1" json:"item5,omitempty"`
	RespawnTimer     *uint32                                                     `protobuf:"varint,22,opt,name=respawn_timer,json=respawnTimer" json:"respawn_timer,omitempty"`
	AccountId        *uint32                                                     `protobuf:"varint,23,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PositionX        *float32                                                    `protobuf:"fixed32,24,opt,name=position_x,json=positionX" json:"position_x,omitempty"`
	PositionY        *float32                                                    `protobuf:"fixed32,25,opt,name=position_y,json=positionY" json:"position_y,omitempty"`
	NetWorth         *uint32                                                     `protobuf:"varint,26,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Abilities        []*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility     `protobuf:"bytes,27,rep,name=abilities" json:"abilities,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CMsgDOTALiveScoreboardUpdate_Team_Player fields.
const (
	Default_CMsgDOTALiveScoreboardUpdate_Team_Player_UltimateState = CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateNotLearned
	Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item0         = int32(-1)
	Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item1         = int32(-1)
	Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item2         = int32(-1)
	Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item3         = int32(-1)
	Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item4         = int32(-1)
	Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item5         = int32(-1)
)

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) Reset() {
	*x = CMsgDOTALiveScoreboardUpdate_Team_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALiveScoreboardUpdate_Team_Player) ProtoMessage() {}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate_Team_Player.ProtoReflect.Descriptor instead.
func (*CMsgDOTALiveScoreboardUpdate_Team_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{24, 0, 0}
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetHeroName() string {
	if x != nil && x.HeroName != nil {
		return *x.HeroName
	}
	return ""
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetGoldPerMin() float32 {
	if x != nil && x.GoldPerMin != nil {
		return *x.GoldPerMin
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetXpPerMin() float32 {
	if x != nil && x.XpPerMin != nil {
		return *x.XpPerMin
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetUltimateState() CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState {
	if x != nil && x.UltimateState != nil {
		return *x.UltimateState
	}
	return Default_CMsgDOTALiveScoreboardUpdate_Team_Player_UltimateState
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetUltimateCooldown() float32 {
	if x != nil && x.UltimateCooldown != nil {
		return *x.UltimateCooldown
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem0() int32 {
	if x != nil && x.Item0 != nil {
		return *x.Item0
	}
	return Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem1() int32 {
	if x != nil && x.Item1 != nil {
		return *x.Item1
	}
	return Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item1
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem2() int32 {
	if x != nil && x.Item2 != nil {
		return *x.Item2
	}
	return Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item2
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem3() int32 {
	if x != nil && x.Item3 != nil {
		return *x.Item3
	}
	return Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item3
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem4() int32 {
	if x != nil && x.Item4 != nil {
		return *x.Item4
	}
	return Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item4
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem5() int32 {
	if x != nil && x.Item5 != nil {
		return *x.Item5
	}
	return Default_CMsgDOTALiveScoreboardUpdate_Team_Player_Item5
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetRespawnTimer() uint32 {
	if x != nil && x.RespawnTimer != nil {
		return *x.RespawnTimer
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetPositionX() float32 {
	if x != nil && x.PositionX != nil {
		return *x.PositionX
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetPositionY() float32 {
	if x != nil && x.PositionY != nil {
		return *x.PositionY
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetAbilities() []*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

type CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AbilityId     *int32                 `protobuf:"varint,1,opt,name=ability_id,json=abilityId,def=-1" json:"ability_id,omitempty"`
	AbilityLevel  *uint32                `protobuf:"varint,2,opt,name=ability_level,json=abilityLevel" json:"ability_level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility fields.
const (
	Default_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_AbilityId = int32(-1)
)

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) Reset() {
	*x = CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) ProtoMessage() {}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility.ProtoReflect.Descriptor instead.
func (*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{24, 0, 0, 0}
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) GetAbilityId() int32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return Default_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_AbilityId
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) GetAbilityLevel() uint32 {
	if x != nil && x.AbilityLevel != nil {
		return *x.AbilityLevel
	}
	return 0
}

type CMsgServerToGCRequestBatchPlayerResourcesResponse_Result struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccountId       *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Rank            *uint32                `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	RankCalibrated  *bool                  `protobuf:"varint,5,opt,name=rank_calibrated,json=rankCalibrated" json:"rank_calibrated,omitempty"`
	LowPriority     *bool                  `protobuf:"varint,6,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	IsNewPlayer     *bool                  `protobuf:"varint,7,opt,name=is_new_player,json=isNewPlayer" json:"is_new_player,omitempty"`
	IsGuidePlayer   *bool                  `protobuf:"varint,8,opt,name=is_guide_player,json=isGuidePlayer" json:"is_guide_player,omitempty"`
	CommLevel       *int32                 `protobuf:"varint,9,opt,name=comm_level,json=commLevel" json:"comm_level,omitempty"`
	BehaviorLevel   *int32                 `protobuf:"varint,10,opt,name=behavior_level,json=behaviorLevel" json:"behavior_level,omitempty"`
	Wins            *int32                 `protobuf:"varint,11,opt,name=wins" json:"wins,omitempty"`
	Losses          *int32                 `protobuf:"varint,12,opt,name=losses" json:"losses,omitempty"`
	SmurfCategory   *int32                 `protobuf:"varint,13,opt,name=smurf_category,json=smurfCategory" json:"smurf_category,omitempty"`
	CommScore       *int32                 `protobuf:"varint,14,opt,name=comm_score,json=commScore" json:"comm_score,omitempty"`
	BehaviorScore   *int32                 `protobuf:"varint,15,opt,name=behavior_score,json=behaviorScore" json:"behavior_score,omitempty"`
	RankUncertainty *int32                 `protobuf:"varint,16,opt,name=rank_uncertainty,json=rankUncertainty" json:"rank_uncertainty,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) Reset() {
	*x = CMsgServerToGCRequestBatchPlayerResourcesResponse_Result{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) ProtoMessage() {}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRequestBatchPlayerResourcesResponse_Result.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{26, 0}
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetRankCalibrated() bool {
	if x != nil && x.RankCalibrated != nil {
		return *x.RankCalibrated
	}
	return false
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetIsNewPlayer() bool {
	if x != nil && x.IsNewPlayer != nil {
		return *x.IsNewPlayer
	}
	return false
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetIsGuidePlayer() bool {
	if x != nil && x.IsGuidePlayer != nil {
		return *x.IsGuidePlayer
	}
	return false
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetCommLevel() int32 {
	if x != nil && x.CommLevel != nil {
		return *x.CommLevel
	}
	return 0
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetBehaviorLevel() int32 {
	if x != nil && x.BehaviorLevel != nil {
		return *x.BehaviorLevel
	}
	return 0
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetWins() int32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetLosses() int32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetSmurfCategory() int32 {
	if x != nil && x.SmurfCategory != nil {
		return *x.SmurfCategory
	}
	return 0
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetCommScore() int32 {
	if x != nil && x.CommScore != nil {
		return *x.CommScore
	}
	return 0
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetBehaviorScore() int32 {
	if x != nil && x.BehaviorScore != nil {
		return *x.BehaviorScore
	}
	return 0
}

func (x *CMsgServerToGCRequestBatchPlayerResourcesResponse_Result) GetRankUncertainty() int32 {
	if x != nil && x.RankUncertainty != nil {
		return *x.RankUncertainty
	}
	return 0
}

type CMsgDOTAAwardEventPoints_AwardPoints struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	AccountId                     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Points                        *int32                 `protobuf:"varint,2,opt,name=points" json:"points,omitempty"`
	PremiumPoints                 *int32                 `protobuf:"varint,3,opt,name=premium_points,json=premiumPoints" json:"premium_points,omitempty"`
	TradeBanTime                  *uint32                `protobuf:"varint,5,opt,name=trade_ban_time,json=tradeBanTime" json:"trade_ban_time,omitempty"`
	EligibleForPeriodicAdjustment *bool                  `protobuf:"varint,6,opt,name=eligible_for_periodic_adjustment,json=eligibleForPeriodicAdjustment,def=0" json:"eligible_for_periodic_adjustment,omitempty"`
	PointCapPeriodicResourceId    *uint32                `protobuf:"varint,7,opt,name=point_cap_periodic_resource_id,json=pointCapPeriodicResourceId" json:"point_cap_periodic_resource_id,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

// Default values for CMsgDOTAAwardEventPoints_AwardPoints fields.
const (
	Default_CMsgDOTAAwardEventPoints_AwardPoints_EligibleForPeriodicAdjustment = bool(false)
)

func (x *CMsgDOTAAwardEventPoints_AwardPoints) Reset() {
	*x = CMsgDOTAAwardEventPoints_AwardPoints{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAAwardEventPoints_AwardPoints) ProtoMessage() {}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAAwardEventPoints_AwardPoints.ProtoReflect.Descriptor instead.
func (*CMsgDOTAAwardEventPoints_AwardPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{36, 0}
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetPoints() int32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetPremiumPoints() int32 {
	if x != nil && x.PremiumPoints != nil {
		return *x.PremiumPoints
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetTradeBanTime() uint32 {
	if x != nil && x.TradeBanTime != nil {
		return *x.TradeBanTime
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetEligibleForPeriodicAdjustment() bool {
	if x != nil && x.EligibleForPeriodicAdjustment != nil {
		return *x.EligibleForPeriodicAdjustment
	}
	return Default_CMsgDOTAAwardEventPoints_AwardPoints_EligibleForPeriodicAdjustment
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetPointCapPeriodicResourceId() uint32 {
	if x != nil && x.PointCapPeriodicResourceId != nil {
		return *x.PointCapPeriodicResourceId
	}
	return 0
}

type CMsgServerToGCMatchConnectionStats_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Ip            *uint32                `protobuf:"fixed32,2,opt,name=ip" json:"ip,omitempty"`
	AvgPingMs     *uint32                `protobuf:"varint,3,opt,name=avg_ping_ms,json=avgPingMs" json:"avg_ping_ms,omitempty"`
	PacketLoss    *float32               `protobuf:"fixed32,5,opt,name=packet_loss,json=packetLoss" json:"packet_loss,omitempty"`
	PingDeviation *float32               `protobuf:"fixed32,6,opt,name=ping_deviation,json=pingDeviation" json:"ping_deviation,omitempty"`
	FullResends   *uint32                `protobuf:"varint,7,opt,name=full_resends,json=fullResends" json:"full_resends,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchConnectionStats_Player) Reset() {
	*x = CMsgServerToGCMatchConnectionStats_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchConnectionStats_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchConnectionStats_Player) ProtoMessage() {}

func (x *CMsgServerToGCMatchConnectionStats_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchConnectionStats_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchConnectionStats_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{39, 0}
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetAvgPingMs() uint32 {
	if x != nil && x.AvgPingMs != nil {
		return *x.AvgPingMs
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetPacketLoss() float32 {
	if x != nil && x.PacketLoss != nil {
		return *x.PacketLoss
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetPingDeviation() float32 {
	if x != nil && x.PingDeviation != nil {
		return *x.PingDeviation
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetFullResends() uint32 {
	if x != nil && x.FullResends != nil {
		return *x.FullResends
	}
	return 0
}

type CSerializedCombatLog_Dictionary struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Strings       []*CSerializedCombatLog_Dictionary_DictString `protobuf:"bytes,1,rep,name=strings" json:"strings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSerializedCombatLog_Dictionary) Reset() {
	*x = CSerializedCombatLog_Dictionary{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSerializedCombatLog_Dictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSerializedCombatLog_Dictionary) ProtoMessage() {}

func (x *CSerializedCombatLog_Dictionary) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSerializedCombatLog_Dictionary.ProtoReflect.Descriptor instead.
func (*CSerializedCombatLog_Dictionary) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{41, 0}
}

func (x *CSerializedCombatLog_Dictionary) GetStrings() []*CSerializedCombatLog_Dictionary_DictString {
	if x != nil {
		return x.Strings
	}
	return nil
}

type CSerializedCombatLog_Dictionary_DictString struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Value         *string                `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSerializedCombatLog_Dictionary_DictString) Reset() {
	*x = CSerializedCombatLog_Dictionary_DictString{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSerializedCombatLog_Dictionary_DictString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSerializedCombatLog_Dictionary_DictString) ProtoMessage() {}

func (x *CSerializedCombatLog_Dictionary_DictString) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSerializedCombatLog_Dictionary_DictString.ProtoReflect.Descriptor instead.
func (*CSerializedCombatLog_Dictionary_DictString) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{41, 0, 0}
}

func (x *CSerializedCombatLog_Dictionary_DictString) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CSerializedCombatLog_Dictionary_DictString) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgServerToGCVictoryPredictions_PredictionItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        *uint64                `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemDef       *uint32                `protobuf:"varint,2,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCVictoryPredictions_PredictionItem) Reset() {
	*x = CMsgServerToGCVictoryPredictions_PredictionItem{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCVictoryPredictions_PredictionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCVictoryPredictions_PredictionItem) ProtoMessage() {}

func (x *CMsgServerToGCVictoryPredictions_PredictionItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCVictoryPredictions_PredictionItem.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCVictoryPredictions_PredictionItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{42, 0}
}

func (x *CMsgServerToGCVictoryPredictions_PredictionItem) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgServerToGCVictoryPredictions_PredictionItem) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

type CMsgServerToGCVictoryPredictions_Record struct {
	state           protoimpl.MessageState                             `protogen:"open.v1"`
	AccountId       *uint32                                            `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ItemIds         []uint64                                           `protobuf:"varint,5,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
	PredictionItems []*CMsgServerToGCVictoryPredictions_PredictionItem `protobuf:"bytes,6,rep,name=prediction_items,json=predictionItems" json:"prediction_items,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgServerToGCVictoryPredictions_Record) Reset() {
	*x = CMsgServerToGCVictoryPredictions_Record{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCVictoryPredictions_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCVictoryPredictions_Record) ProtoMessage() {}

func (x *CMsgServerToGCVictoryPredictions_Record) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCVictoryPredictions_Record.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCVictoryPredictions_Record) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{42, 1}
}

func (x *CMsgServerToGCVictoryPredictions_Record) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCVictoryPredictions_Record) GetItemIds() []uint64 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

func (x *CMsgServerToGCVictoryPredictions_Record) GetPredictionItems() []*CMsgServerToGCVictoryPredictions_PredictionItem {
	if x != nil {
		return x.PredictionItems
	}
	return nil
}

type CMsgServerToGCKillSummaries_KillSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KillerHeroId  *uint32                `protobuf:"varint,1,opt,name=killer_hero_id,json=killerHeroId" json:"killer_hero_id,omitempty"`
	VictimHeroId  *uint32                `protobuf:"varint,2,opt,name=victim_hero_id,json=victimHeroId" json:"victim_hero_id,omitempty"`
	KillCount     *uint32                `protobuf:"varint,3,opt,name=kill_count,json=killCount" json:"kill_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCKillSummaries_KillSummary) Reset() {
	*x = CMsgServerToGCKillSummaries_KillSummary{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCKillSummaries_KillSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCKillSummaries_KillSummary) ProtoMessage() {}

func (x *CMsgServerToGCKillSummaries_KillSummary) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCKillSummaries_KillSummary.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCKillSummaries_KillSummary) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{49, 0}
}

func (x *CMsgServerToGCKillSummaries_KillSummary) GetKillerHeroId() uint32 {
	if x != nil && x.KillerHeroId != nil {
		return *x.KillerHeroId
	}
	return 0
}

func (x *CMsgServerToGCKillSummaries_KillSummary) GetVictimHeroId() uint32 {
	if x != nil && x.VictimHeroId != nil {
		return *x.VictimHeroId
	}
	return 0
}

func (x *CMsgServerToGCKillSummaries_KillSummary) GetKillCount() uint32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

type CMsgSignOutUpdatePlayerChallenge_Challenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	SlotId        *uint32                `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId    *uint32                `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	Progress      *uint32                `protobuf:"varint,4,opt,name=progress" json:"progress,omitempty"`
	ChallengeRank *uint32                `protobuf:"varint,5,opt,name=challenge_rank,json=challengeRank" json:"challenge_rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSignOutUpdatePlayerChallenge_Challenge fields.
const (
	Default_CMsgSignOutUpdatePlayerChallenge_Challenge_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) Reset() {
	*x = CMsgSignOutUpdatePlayerChallenge_Challenge{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutUpdatePlayerChallenge_Challenge) ProtoMessage() {}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutUpdatePlayerChallenge_Challenge.ProtoReflect.Descriptor instead.
func (*CMsgSignOutUpdatePlayerChallenge_Challenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{51, 0}
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutUpdatePlayerChallenge_Challenge_EventId
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetChallengeRank() uint32 {
	if x != nil && x.ChallengeRank != nil {
		return *x.ChallengeRank
	}
	return 0
}

type CMsgSpendWager_Player struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AccountId        *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Wager            *uint32                `protobuf:"varint,2,opt,name=wager" json:"wager,omitempty"`
	WagerTokenItemId *uint64                `protobuf:"varint,3,opt,name=wager_token_item_id,json=wagerTokenItemId" json:"wager_token_item_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgSpendWager_Player) Reset() {
	*x = CMsgSpendWager_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSpendWager_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpendWager_Player) ProtoMessage() {}

func (x *CMsgSpendWager_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpendWager_Player.ProtoReflect.Descriptor instead.
func (*CMsgSpendWager_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{53, 0}
}

func (x *CMsgSpendWager_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSpendWager_Player) GetWager() uint32 {
	if x != nil && x.Wager != nil {
		return *x.Wager
	}
	return 0
}

func (x *CMsgSpendWager_Player) GetWagerTokenItemId() uint64 {
	if x != nil && x.WagerTokenItemId != nil {
		return *x.WagerTokenItemId
	}
	return 0
}

type CMsgSignOutXPCoins_Player struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AccountId        *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XpGained         *uint32                `protobuf:"varint,2,opt,name=xp_gained,json=xpGained" json:"xp_gained,omitempty"`
	CoinsSpent       *uint32                `protobuf:"varint,3,opt,name=coins_spent,json=coinsSpent" json:"coins_spent,omitempty"`
	WagerTokenItemId *uint64                `protobuf:"varint,4,opt,name=wager_token_item_id,json=wagerTokenItemId" json:"wager_token_item_id,omitempty"`
	RankWager        *uint32                `protobuf:"varint,5,opt,name=rank_wager,json=rankWager" json:"rank_wager,omitempty"`
	WagerStreak      *uint32                `protobuf:"varint,6,opt,name=wager_streak,json=wagerStreak" json:"wager_streak,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgSignOutXPCoins_Player) Reset() {
	*x = CMsgSignOutXPCoins_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutXPCoins_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutXPCoins_Player) ProtoMessage() {}

func (x *CMsgSignOutXPCoins_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutXPCoins_Player.ProtoReflect.Descriptor instead.
func (*CMsgSignOutXPCoins_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{54, 0}
}

func (x *CMsgSignOutXPCoins_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetXpGained() uint32 {
	if x != nil && x.XpGained != nil {
		return *x.XpGained
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetCoinsSpent() uint32 {
	if x != nil && x.CoinsSpent != nil {
		return *x.CoinsSpent
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetWagerTokenItemId() uint64 {
	if x != nil && x.WagerTokenItemId != nil {
		return *x.WagerTokenItemId
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetRankWager() uint32 {
	if x != nil && x.RankWager != nil {
		return *x.RankWager
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetWagerStreak() uint32 {
	if x != nil && x.WagerStreak != nil {
		return *x.WagerStreak
	}
	return 0
}

type CMsgSignOutBounties_Bounty struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IssuerAccountId    *uint32                `protobuf:"varint,1,opt,name=issuer_account_id,json=issuerAccountId" json:"issuer_account_id,omitempty"`
	CompleterAccountId *uint32                `protobuf:"varint,2,opt,name=completer_account_id,json=completerAccountId" json:"completer_account_id,omitempty"`
	TargetAccountId    *uint32                `protobuf:"varint,3,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgSignOutBounties_Bounty) Reset() {
	*x = CMsgSignOutBounties_Bounty{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutBounties_Bounty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutBounties_Bounty) ProtoMessage() {}

func (x *CMsgSignOutBounties_Bounty) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutBounties_Bounty.ProtoReflect.Descriptor instead.
func (*CMsgSignOutBounties_Bounty) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{55, 0}
}

func (x *CMsgSignOutBounties_Bounty) GetIssuerAccountId() uint32 {
	if x != nil && x.IssuerAccountId != nil {
		return *x.IssuerAccountId
	}
	return 0
}

func (x *CMsgSignOutBounties_Bounty) GetCompleterAccountId() uint32 {
	if x != nil && x.CompleterAccountId != nil {
		return *x.CompleterAccountId
	}
	return 0
}

func (x *CMsgSignOutBounties_Bounty) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

type CMsgSignOutCommunityGoalProgress_EventGoalIncrement struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EventGoalId     *uint32                `protobuf:"varint,1,opt,name=event_goal_id,json=eventGoalId" json:"event_goal_id,omitempty"`
	IncrementAmount *uint32                `protobuf:"varint,2,opt,name=increment_amount,json=incrementAmount" json:"increment_amount,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) Reset() {
	*x = CMsgSignOutCommunityGoalProgress_EventGoalIncrement{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunityGoalProgress_EventGoalIncrement) ProtoMessage() {}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunityGoalProgress_EventGoalIncrement.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunityGoalProgress_EventGoalIncrement) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{56, 0}
}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) GetEventGoalId() uint32 {
	if x != nil && x.EventGoalId != nil {
		return *x.EventGoalId
	}
	return 0
}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) GetIncrementAmount() uint32 {
	if x != nil && x.IncrementAmount != nil {
		return *x.IncrementAmount
	}
	return 0
}

type CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	PredictionId          *uint32                `protobuf:"varint,1,opt,name=prediction_id,json=predictionId" json:"prediction_id,omitempty"`
	PredictionValue       *uint32                `protobuf:"varint,2,opt,name=prediction_value,json=predictionValue" json:"prediction_value,omitempty"`
	PredictionValueIsMask *bool                  `protobuf:"varint,3,opt,name=prediction_value_is_mask,json=predictionValueIsMask" json:"prediction_value_is_mask,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) Reset() {
	*x = CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) ProtoMessage() {}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{59, 0}
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) GetPredictionId() uint32 {
	if x != nil && x.PredictionId != nil {
		return *x.PredictionId
	}
	return 0
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) GetPredictionValue() uint32 {
	if x != nil && x.PredictionValue != nil {
		return *x.PredictionValue
	}
	return 0
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) GetPredictionValueIsMask() bool {
	if x != nil && x.PredictionValueIsMask != nil {
		return *x.PredictionValueIsMask
	}
	return false
}

type CMsgServerToGCCompendiumChosenInGamePredictions_Prediction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PredictionId  *uint32                `protobuf:"varint,1,opt,name=prediction_id,json=predictionId" json:"prediction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions_Prediction) Reset() {
	*x = CMsgServerToGCCompendiumChosenInGamePredictions_Prediction{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions_Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCompendiumChosenInGamePredictions_Prediction) ProtoMessage() {}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions_Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCompendiumChosenInGamePredictions_Prediction.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCompendiumChosenInGamePredictions_Prediction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{60, 0}
}

func (x *CMsgServerToGCCompendiumChosenInGamePredictions_Prediction) GetPredictionId() uint32 {
	if x != nil && x.PredictionId != nil {
		return *x.PredictionId
	}
	return 0
}

type CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Item           *int32                 `protobuf:"varint,1,opt,name=item,def=-1" json:"item,omitempty"`
	Gold           *uint32                `protobuf:"varint,2,opt,name=gold" json:"gold,omitempty"`
	NetWorth       *uint32                `protobuf:"varint,3,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	GameTime       *uint32                `protobuf:"varint,4,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	InventoryItems []int32                `protobuf:"varint,5,rep,name=inventory_items,json=inventoryItems" json:"inventory_items,omitempty"`
	TalentsSkilled []bool                 `protobuf:"varint,7,rep,name=talents_skilled,json=talentsSkilled" json:"talents_skilled,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase fields.
const (
	Default_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_Item = int32(-1)
)

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) Reset() {
	*x = CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) ProtoMessage() {}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{62, 0}
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetItem() int32 {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return Default_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_Item
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetGameTime() uint32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetInventoryItems() []int32 {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetTalentsSkilled() []bool {
	if x != nil {
		return x.TalentsSkilled
	}
	return nil
}

type CMsgServerToGCMatchPlayerItemPurchaseHistory_Player struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	PlayerSlot    *uint32                                                      `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	AccountId     *uint32                                                      `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId        *int32                                                       `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	AlliedHeroIds []int32                                                      `protobuf:"varint,4,rep,name=allied_hero_ids,json=alliedHeroIds" json:"allied_hero_ids,omitempty"`
	EnemyHeroIds  []int32                                                      `protobuf:"varint,5,rep,name=enemy_hero_ids,json=enemyHeroIds" json:"enemy_hero_ids,omitempty"`
	ItemPurchases []*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase `protobuf:"bytes,6,rep,name=item_purchases,json=itemPurchases" json:"item_purchases,omitempty"`
	Lane          *uint32                                                      `protobuf:"varint,7,opt,name=lane" json:"lane,omitempty"`
	IsWinner      *bool                                                        `protobuf:"varint,8,opt,name=is_winner,json=isWinner" json:"is_winner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) Reset() {
	*x = CMsgServerToGCMatchPlayerItemPurchaseHistory_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) ProtoMessage() {}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchPlayerItemPurchaseHistory_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{62, 1}
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetAlliedHeroIds() []int32 {
	if x != nil {
		return x.AlliedHeroIds
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetEnemyHeroIds() []int32 {
	if x != nil {
		return x.EnemyHeroIds
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetItemPurchases() []*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase {
	if x != nil {
		return x.ItemPurchases
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetIsWinner() bool {
	if x != nil && x.IsWinner != nil {
		return *x.IsWinner
	}
	return false
}

type CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Item                  *int32                 `protobuf:"varint,1,opt,name=item,def=-1" json:"item,omitempty"`
	GameTime              *uint32                `protobuf:"varint,2,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	InventoryItems        []int32                `protobuf:"varint,3,rep,name=inventory_items,json=inventoryItems" json:"inventory_items,omitempty"`
	TalentsSkilled        []bool                 `protobuf:"varint,4,rep,name=talents_skilled,json=talentsSkilled" json:"talents_skilled,omitempty"`
	AvailableNeutralItems []int32                `protobuf:"varint,5,rep,name=available_neutral_items,json=availableNeutralItems" json:"available_neutral_items,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip fields.
const (
	Default_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip_Item = int32(-1)
)

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) Reset() {
	*x = CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) ProtoMessage() {}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{63, 0}
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) GetItem() int32 {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return Default_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip_Item
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) GetGameTime() uint32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) GetInventoryItems() []int32 {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) GetTalentsSkilled() []bool {
	if x != nil {
		return x.TalentsSkilled
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip) GetAvailableNeutralItems() []int32 {
	if x != nil {
		return x.AvailableNeutralItems
	}
	return nil
}

type CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	AccountId     *uint32                                                       `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AlliedHeroIds []int32                                                       `protobuf:"varint,2,rep,name=allied_hero_ids,json=alliedHeroIds" json:"allied_hero_ids,omitempty"`
	EnemyHeroIds  []int32                                                       `protobuf:"varint,3,rep,name=enemy_hero_ids,json=enemyHeroIds" json:"enemy_hero_ids,omitempty"`
	ItemEquips    []*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip `protobuf:"bytes,4,rep,name=item_equips,json=itemEquips" json:"item_equips,omitempty"`
	IsWinner      *bool                                                         `protobuf:"varint,5,opt,name=is_winner,json=isWinner" json:"is_winner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) Reset() {
	*x = CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) ProtoMessage() {}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{63, 1}
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) GetAlliedHeroIds() []int32 {
	if x != nil {
		return x.AlliedHeroIds
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) GetEnemyHeroIds() []int32 {
	if x != nil {
		return x.EnemyHeroIds
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) GetItemEquips() []*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip {
	if x != nil {
		return x.ItemEquips
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player) GetIsWinner() bool {
	if x != nil && x.IsWinner != nil {
		return *x.IsWinner
	}
	return false
}

type CMsgServerToGCMatchStateHistory_PlayerState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	NetWorth      *uint32                `protobuf:"varint,2,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Level         *uint32                `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Deaths        *uint32                `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	RespawnTime   *uint32                `protobuf:"varint,5,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	HasBuyback    *bool                  `protobuf:"varint,6,opt,name=has_buyback,json=hasBuyback" json:"has_buyback,omitempty"`
	HasAegis      *bool                  `protobuf:"varint,7,opt,name=has_aegis,json=hasAegis" json:"has_aegis,omitempty"`
	HasRapier     *bool                  `protobuf:"varint,8,opt,name=has_rapier,json=hasRapier" json:"has_rapier,omitempty"`
	Distance      *uint32                `protobuf:"varint,9,opt,name=distance" json:"distance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) Reset() {
	*x = CMsgServerToGCMatchStateHistory_PlayerState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchStateHistory_PlayerState) ProtoMessage() {}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchStateHistory_PlayerState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchStateHistory_PlayerState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{64, 0}
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetRespawnTime() uint32 {
	if x != nil && x.RespawnTime != nil {
		return *x.RespawnTime
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetHasBuyback() bool {
	if x != nil && x.HasBuyback != nil {
		return *x.HasBuyback
	}
	return false
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetHasAegis() bool {
	if x != nil && x.HasAegis != nil {
		return *x.HasAegis
	}
	return false
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetHasRapier() bool {
	if x != nil && x.HasRapier != nil {
		return *x.HasRapier
	}
	return false
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetDistance() uint32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

type CMsgServerToGCMatchStateHistory_TeamState struct {
	state             protoimpl.MessageState                         `protogen:"open.v1"`
	Team              *uint32                                        `protobuf:"varint,1,opt,name=team" json:"team,omitempty"`
	PlayerStates      []*CMsgServerToGCMatchStateHistory_PlayerState `protobuf:"bytes,2,rep,name=player_states,json=playerStates" json:"player_states,omitempty"`
	TowerHealthPct    []uint32                                       `protobuf:"varint,3,rep,name=tower_health_pct,json=towerHealthPct" json:"tower_health_pct,omitempty"`
	BarracksHealthPct []uint32                                       `protobuf:"varint,4,rep,name=barracks_health_pct,json=barracksHealthPct" json:"barracks_health_pct,omitempty"`
	AncientHealthPct  *uint32                                        `protobuf:"varint,5,opt,name=ancient_health_pct,json=ancientHealthPct" json:"ancient_health_pct,omitempty"`
	GlyphCooldown     *uint32                                        `protobuf:"varint,6,opt,name=glyph_cooldown,json=glyphCooldown" json:"glyph_cooldown,omitempty"`
	Kills             *uint32                                        `protobuf:"varint,7,opt,name=kills" json:"kills,omitempty"`
	CreepDistanceSafe *uint32                                        `protobuf:"varint,8,opt,name=creep_distance_safe,json=creepDistanceSafe" json:"creep_distance_safe,omitempty"`
	CreepDistanceMid  *uint32                                        `protobuf:"varint,9,opt,name=creep_distance_mid,json=creepDistanceMid" json:"creep_distance_mid,omitempty"`
	CreepDistanceOff  *uint32                                        `protobuf:"varint,10,opt,name=creep_distance_off,json=creepDistanceOff" json:"creep_distance_off,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) Reset() {
	*x = CMsgServerToGCMatchStateHistory_TeamState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchStateHistory_TeamState) ProtoMessage() {}

func (x *CMsgServerToGCMatchStateHistory_TeamState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchStateHistory_TeamState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchStateHistory_TeamState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{64, 1}
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetPlayerStates() []*CMsgServerToGCMatchStateHistory_PlayerState {
	if x != nil {
		return x.PlayerStates
	}
	return nil
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetTowerHealthPct() []uint32 {
	if x != nil {
		return x.TowerHealthPct
	}
	return nil
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetBarracksHealthPct() []uint32 {
	if x != nil {
		return x.BarracksHealthPct
	}
	return nil
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetAncientHealthPct() uint32 {
	if x != nil && x.AncientHealthPct != nil {
		return *x.AncientHealthPct
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetGlyphCooldown() uint32 {
	if x != nil && x.GlyphCooldown != nil {
		return *x.GlyphCooldown
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetCreepDistanceSafe() uint32 {
	if x != nil && x.CreepDistanceSafe != nil {
		return *x.CreepDistanceSafe
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetCreepDistanceMid() uint32 {
	if x != nil && x.CreepDistanceMid != nil {
		return *x.CreepDistanceMid
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetCreepDistanceOff() uint32 {
	if x != nil && x.CreepDistanceOff != nil {
		return *x.CreepDistanceOff
	}
	return 0
}

type CMsgServerToGCMatchStateHistory_MatchState struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	GameTime      *uint32                                    `protobuf:"varint,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	RadiantState  *CMsgServerToGCMatchStateHistory_TeamState `protobuf:"bytes,2,opt,name=radiant_state,json=radiantState" json:"radiant_state,omitempty"`
	DireState     *CMsgServerToGCMatchStateHistory_TeamState `protobuf:"bytes,3,opt,name=dire_state,json=direState" json:"dire_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) Reset() {
	*x = CMsgServerToGCMatchStateHistory_MatchState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchStateHistory_MatchState) ProtoMessage() {}

func (x *CMsgServerToGCMatchStateHistory_MatchState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchStateHistory_MatchState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchStateHistory_MatchState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{64, 2}
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) GetGameTime() uint32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) GetRadiantState() *CMsgServerToGCMatchStateHistory_TeamState {
	if x != nil {
		return x.RadiantState
	}
	return nil
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) GetDireState() *CMsgServerToGCMatchStateHistory_TeamState {
	if x != nil {
		return x.DireState
	}
	return nil
}

type CMsgServerToGCPlayerChallengeHistory_PlayerChallenge struct {
	state              protoimpl.MessageState       `protogen:"open.v1"`
	AccountId          *uint32                      `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ChallengeType      *EPlayerChallengeHistoryType `protobuf:"varint,2,opt,name=challenge_type,json=challengeType,enum=protocol.EPlayerChallengeHistoryType,def=0" json:"challenge_type,omitempty"`
	ChallengeId1       *uint32                      `protobuf:"varint,3,opt,name=challenge_id1,json=challengeId1" json:"challenge_id1,omitempty"`
	ChallengeId2       *uint32                      `protobuf:"varint,4,opt,name=challenge_id2,json=challengeId2" json:"challenge_id2,omitempty"`
	ProgressValueStart *uint32                      `protobuf:"varint,5,opt,name=progress_value_start,json=progressValueStart" json:"progress_value_start,omitempty"`
	ProgressValueEnd   *uint32                      `protobuf:"varint,6,opt,name=progress_value_end,json=progressValueEnd" json:"progress_value_end,omitempty"`
	TeamWon            *bool                        `protobuf:"varint,7,opt,name=team_won,json=teamWon" json:"team_won,omitempty"`
	AuditData          *uint64                      `protobuf:"varint,8,opt,name=audit_data,json=auditData" json:"audit_data,omitempty"`
	HeroId             *int32                       `protobuf:"varint,9,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	RankCompleted      *uint32                      `protobuf:"varint,10,opt,name=rank_completed,json=rankCompleted" json:"rank_completed,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgServerToGCPlayerChallengeHistory_PlayerChallenge fields.
const (
	Default_CMsgServerToGCPlayerChallengeHistory_PlayerChallenge_ChallengeType = EPlayerChallengeHistoryType_k_EPlayerChallengeHistoryType_Invalid
)

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) Reset() {
	*x = CMsgServerToGCPlayerChallengeHistory_PlayerChallenge{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) ProtoMessage() {}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCPlayerChallengeHistory_PlayerChallenge.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{72, 0}
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetChallengeType() EPlayerChallengeHistoryType {
	if x != nil && x.ChallengeType != nil {
		return *x.ChallengeType
	}
	return Default_CMsgServerToGCPlayerChallengeHistory_PlayerChallenge_ChallengeType
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetChallengeId1() uint32 {
	if x != nil && x.ChallengeId1 != nil {
		return *x.ChallengeId1
	}
	return 0
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetChallengeId2() uint32 {
	if x != nil && x.ChallengeId2 != nil {
		return *x.ChallengeId2
	}
	return 0
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetProgressValueStart() uint32 {
	if x != nil && x.ProgressValueStart != nil {
		return *x.ProgressValueStart
	}
	return 0
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetProgressValueEnd() uint32 {
	if x != nil && x.ProgressValueEnd != nil {
		return *x.ProgressValueEnd
	}
	return 0
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetTeamWon() bool {
	if x != nil && x.TeamWon != nil {
		return *x.TeamWon
	}
	return false
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetAuditData() uint64 {
	if x != nil && x.AuditData != nil {
		return *x.AuditData
	}
	return 0
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgServerToGCPlayerChallengeHistory_PlayerChallenge) GetRankCompleted() uint32 {
	if x != nil && x.RankCompleted != nil {
		return *x.RankCompleted
	}
	return 0
}

type CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PathIdCompleted *uint32                `protobuf:"varint,1,opt,name=path_id_completed,json=pathIdCompleted,def=255" json:"path_id_completed,omitempty"`
	RoomIdClaimed   *uint32                `protobuf:"varint,2,opt,name=room_id_claimed,json=roomIdClaimed,def=255" json:"room_id_claimed,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults fields.
const (
	Default_CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_PathIdCompleted = uint32(255)
	Default_CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_RoomIdClaimed   = uint32(255)
)

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) Reset() {
	*x = CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) ProtoMessage() {}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{73, 0}
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) GetPathIdCompleted() uint32 {
	if x != nil && x.PathIdCompleted != nil {
		return *x.PathIdCompleted
	}
	return Default_CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_PathIdCompleted
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) GetRoomIdClaimed() uint32 {
	if x != nil && x.RoomIdClaimed != nil {
		return *x.RoomIdClaimed
	}
	return Default_CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_RoomIdClaimed
}

type CMsgNeutralItemStats_NeutralItem struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ItemId             *int32                 `protobuf:"varint,1,opt,name=item_id,json=itemId,def=-1" json:"item_id,omitempty"`
	TimeDropped        *uint32                `protobuf:"varint,2,opt,name=time_dropped,json=timeDropped" json:"time_dropped,omitempty"`
	Team               *uint32                `protobuf:"varint,3,opt,name=team" json:"team,omitempty"`
	TimeLastEquipped   *uint32                `protobuf:"varint,4,opt,name=time_last_equipped,json=timeLastEquipped" json:"time_last_equipped,omitempty"`
	TimeLastUnequipped *uint32                `protobuf:"varint,5,opt,name=time_last_unequipped,json=timeLastUnequipped" json:"time_last_unequipped,omitempty"`
	DurationEquipped   *uint32                `protobuf:"varint,6,opt,name=duration_equipped,json=durationEquipped" json:"duration_equipped,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgNeutralItemStats_NeutralItem fields.
const (
	Default_CMsgNeutralItemStats_NeutralItem_ItemId = int32(-1)
)

func (x *CMsgNeutralItemStats_NeutralItem) Reset() {
	*x = CMsgNeutralItemStats_NeutralItem{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgNeutralItemStats_NeutralItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNeutralItemStats_NeutralItem) ProtoMessage() {}

func (x *CMsgNeutralItemStats_NeutralItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNeutralItemStats_NeutralItem.ProtoReflect.Descriptor instead.
func (*CMsgNeutralItemStats_NeutralItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{74, 0}
}

func (x *CMsgNeutralItemStats_NeutralItem) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return Default_CMsgNeutralItemStats_NeutralItem_ItemId
}

func (x *CMsgNeutralItemStats_NeutralItem) GetTimeDropped() uint32 {
	if x != nil && x.TimeDropped != nil {
		return *x.TimeDropped
	}
	return 0
}

func (x *CMsgNeutralItemStats_NeutralItem) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgNeutralItemStats_NeutralItem) GetTimeLastEquipped() uint32 {
	if x != nil && x.TimeLastEquipped != nil {
		return *x.TimeLastEquipped
	}
	return 0
}

func (x *CMsgNeutralItemStats_NeutralItem) GetTimeLastUnequipped() uint32 {
	if x != nil && x.TimeLastUnequipped != nil {
		return *x.TimeLastUnequipped
	}
	return 0
}

func (x *CMsgNeutralItemStats_NeutralItem) GetDurationEquipped() uint32 {
	if x != nil && x.DurationEquipped != nil {
		return *x.DurationEquipped
	}
	return 0
}

type CMsgGCToServerLobbyHeroBanRates_HeroBanEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	BanCount      *uint32                `protobuf:"varint,2,opt,name=ban_count,json=banCount" json:"ban_count,omitempty"`
	PickCount     *uint32                `protobuf:"varint,3,opt,name=pick_count,json=pickCount" json:"pick_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) Reset() {
	*x = CMsgGCToServerLobbyHeroBanRates_HeroBanEntry{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) ProtoMessage() {}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerLobbyHeroBanRates_HeroBanEntry.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{75, 0}
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) GetBanCount() uint32 {
	if x != nil && x.BanCount != nil {
		return *x.BanCount
	}
	return 0
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) GetPickCount() uint32 {
	if x != nil && x.PickCount != nil {
		return *x.PickCount
	}
	return 0
}

type CMsgSignOutGuildContractProgress_CompletedGuildEventContracts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GuildId       *uint32                `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId       *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Contracts     []uint64               `protobuf:"varint,3,rep,name=contracts" json:"contracts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) Reset() {
	*x = CMsgSignOutGuildContractProgress_CompletedGuildEventContracts{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) ProtoMessage() {}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildContractProgress_CompletedGuildEventContracts.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{76, 0}
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) GetContracts() []uint64 {
	if x != nil {
		return x.Contracts
	}
	return nil
}

type CMsgSignOutGuildContractProgress_PlayerContract struct {
	state              protoimpl.MessageState                                           `protogen:"open.v1"`
	AccountId          *uint32                                                          `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CompletedContracts []*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts `protobuf:"bytes,2,rep,name=completed_contracts,json=completedContracts" json:"completed_contracts,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) Reset() {
	*x = CMsgSignOutGuildContractProgress_PlayerContract{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildContractProgress_PlayerContract) ProtoMessage() {}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildContractProgress_PlayerContract.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildContractProgress_PlayerContract) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{76, 1}
}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) GetCompletedContracts() []*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts {
	if x != nil {
		return x.CompletedContracts
	}
	return nil
}

type CMsgSignOutGuildChallengeProgress_ChallengeProgress struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	GuildId                    *uint32                `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId                    *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ChallengeInstanceId        *uint32                `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeInstanceTimestamp *uint32                `protobuf:"varint,4,opt,name=challenge_instance_timestamp,json=challengeInstanceTimestamp" json:"challenge_instance_timestamp,omitempty"`
	ChallengePeriodSerial      *uint32                `protobuf:"varint,5,opt,name=challenge_period_serial,json=challengePeriodSerial" json:"challenge_period_serial,omitempty"`
	Progress                   *uint32                `protobuf:"varint,6,opt,name=progress" json:"progress,omitempty"`
	ChallengeParameter         *uint32                `protobuf:"varint,7,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) Reset() {
	*x = CMsgSignOutGuildChallengeProgress_ChallengeProgress{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildChallengeProgress_ChallengeProgress) ProtoMessage() {}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildChallengeProgress_ChallengeProgress.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildChallengeProgress_ChallengeProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{77, 0}
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetChallengeInstanceTimestamp() uint32 {
	if x != nil && x.ChallengeInstanceTimestamp != nil {
		return *x.ChallengeInstanceTimestamp
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetChallengePeriodSerial() uint32 {
	if x != nil && x.ChallengePeriodSerial != nil {
		return *x.ChallengePeriodSerial
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

type CMsgSignOutMVPStats_Player struct {
	state                    protoimpl.MessageState                       `protogen:"open.v1"`
	TeamId                   *uint32                                      `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamNetworthRank         *uint32                                      `protobuf:"varint,2,opt,name=team_networth_rank,json=teamNetworthRank" json:"team_networth_rank,omitempty"`
	AccountId                *uint32                                      `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot               *uint32                                      `protobuf:"varint,32,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	Rank                     *uint32                                      `protobuf:"varint,33,opt,name=rank" json:"rank,omitempty"`
	HeroId                   *int32                                       `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Role                     *uint32                                      `protobuf:"varint,5,opt,name=role" json:"role,omitempty"`
	Kills                    *int32                                       `protobuf:"varint,6,opt,name=kills" json:"kills,omitempty"`
	Deaths                   *int32                                       `protobuf:"varint,7,opt,name=deaths" json:"deaths,omitempty"`
	Assists                  *int32                                       `protobuf:"varint,8,opt,name=assists" json:"assists,omitempty"`
	Xp                       *int32                                       `protobuf:"varint,9,opt,name=xp" json:"xp,omitempty"`
	NetWorth                 *int32                                       `protobuf:"varint,10,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	SupportGoldSpent         *int32                                       `protobuf:"varint,12,opt,name=support_gold_spent,json=supportGoldSpent" json:"support_gold_spent,omitempty"`
	WardsPlaced              *int32                                       `protobuf:"varint,13,opt,name=wards_placed,json=wardsPlaced" json:"wards_placed,omitempty"`
	WardsSpottedForDewarding *int32                                       `protobuf:"varint,14,opt,name=wards_spotted_for_dewarding,json=wardsSpottedForDewarding" json:"wards_spotted_for_dewarding,omitempty"`
	CampsStacked             *int32                                       `protobuf:"varint,15,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	LastHits                 *int32                                       `protobuf:"varint,16,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                   *int32                                       `protobuf:"varint,17,opt,name=denies" json:"denies,omitempty"`
	BuildingDamage           *int32                                       `protobuf:"varint,19,opt,name=building_damage,json=buildingDamage" json:"building_damage,omitempty"`
	OtherDamage              *int32                                       `protobuf:"varint,20,opt,name=other_damage,json=otherDamage" json:"other_damage,omitempty"`
	TripleKills              *int32                                       `protobuf:"varint,26,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	Rampages                 *int32                                       `protobuf:"varint,28,opt,name=rampages" json:"rampages,omitempty"`
	FirstBlood               *int32                                       `protobuf:"varint,31,opt,name=first_blood,json=firstBlood" json:"first_blood,omitempty"`
	KillEaterEvents          []*CMsgSignOutMVPStats_Player_KillEaterEvent `protobuf:"bytes,34,rep,name=kill_eater_events,json=killEaterEvents" json:"kill_eater_events,omitempty"`
	HighestKillstreak        *uint32                                      `protobuf:"varint,35,opt,name=highest_killstreak,json=highestKillstreak" json:"highest_killstreak,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CMsgSignOutMVPStats_Player) Reset() {
	*x = CMsgSignOutMVPStats_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutMVPStats_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutMVPStats_Player) ProtoMessage() {}

func (x *CMsgSignOutMVPStats_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutMVPStats_Player.ProtoReflect.Descriptor instead.
func (*CMsgSignOutMVPStats_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{78, 0}
}

func (x *CMsgSignOutMVPStats_Player) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetTeamNetworthRank() uint32 {
	if x != nil && x.TeamNetworthRank != nil {
		return *x.TeamNetworthRank
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetRole() uint32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetKills() int32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetDeaths() int32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetAssists() int32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetXp() int32 {
	if x != nil && x.Xp != nil {
		return *x.Xp
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetNetWorth() int32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetSupportGoldSpent() int32 {
	if x != nil && x.SupportGoldSpent != nil {
		return *x.SupportGoldSpent
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetWardsPlaced() int32 {
	if x != nil && x.WardsPlaced != nil {
		return *x.WardsPlaced
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetWardsSpottedForDewarding() int32 {
	if x != nil && x.WardsSpottedForDewarding != nil {
		return *x.WardsSpottedForDewarding
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetCampsStacked() int32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetLastHits() int32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetDenies() int32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetBuildingDamage() int32 {
	if x != nil && x.BuildingDamage != nil {
		return *x.BuildingDamage
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetOtherDamage() int32 {
	if x != nil && x.OtherDamage != nil {
		return *x.OtherDamage
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetTripleKills() int32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetRampages() int32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetFirstBlood() int32 {
	if x != nil && x.FirstBlood != nil {
		return *x.FirstBlood
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetKillEaterEvents() []*CMsgSignOutMVPStats_Player_KillEaterEvent {
	if x != nil {
		return x.KillEaterEvents
	}
	return nil
}

func (x *CMsgSignOutMVPStats_Player) GetHighestKillstreak() uint32 {
	if x != nil && x.HighestKillstreak != nil {
		return *x.HighestKillstreak
	}
	return 0
}

type CMsgSignOutMVPStats_Player_KillEaterEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventType     *uint32                `protobuf:"varint,1,req,name=event_type,json=eventType" json:"event_type,omitempty"`
	Amount        *uint32                `protobuf:"varint,2,req,name=amount" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) Reset() {
	*x = CMsgSignOutMVPStats_Player_KillEaterEvent{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutMVPStats_Player_KillEaterEvent) ProtoMessage() {}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutMVPStats_Player_KillEaterEvent.ProtoReflect.Descriptor instead.
func (*CMsgSignOutMVPStats_Player_KillEaterEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{78, 0, 0}
}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) GetEventType() uint32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type CMsgServerToGCGetGuildContractsResponse_ContractDetails struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ContractId          *uint64                `protobuf:"varint,1,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	ChallengeInstanceId *uint32                `protobuf:"varint,2,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter  *uint32                `protobuf:"varint,3,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ContractStars       *uint32                `protobuf:"varint,4,opt,name=contract_stars,json=contractStars" json:"contract_stars,omitempty"`
	ContractSlot        *uint32                `protobuf:"varint,5,opt,name=contract_slot,json=contractSlot" json:"contract_slot,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) Reset() {
	*x = CMsgServerToGCGetGuildContractsResponse_ContractDetails{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetGuildContractsResponse_ContractDetails) ProtoMessage() {}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetGuildContractsResponse_ContractDetails.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetGuildContractsResponse_ContractDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{81, 0}
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetContractId() uint64 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetContractStars() uint32 {
	if x != nil && x.ContractStars != nil {
		return *x.ContractStars
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetContractSlot() uint32 {
	if x != nil && x.ContractSlot != nil {
		return *x.ContractSlot
	}
	return 0
}

type CMsgServerToGCGetGuildContractsResponse_Player struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	AccountId     *uint32                                                    `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	GuildId       *uint32                                                    `protobuf:"varint,2,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId       *EEvent                                                    `protobuf:"varint,3,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	Contracts     []*CMsgServerToGCGetGuildContractsResponse_ContractDetails `protobuf:"bytes,4,rep,name=contracts" json:"contracts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgServerToGCGetGuildContractsResponse_Player fields.
const (
	Default_CMsgServerToGCGetGuildContractsResponse_Player_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgServerToGCGetGuildContractsResponse_Player) Reset() {
	*x = CMsgServerToGCGetGuildContractsResponse_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetGuildContractsResponse_Player) ProtoMessage() {}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetGuildContractsResponse_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetGuildContractsResponse_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{81, 1}
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgServerToGCGetGuildContractsResponse_Player_EventId
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) GetContracts() []*CMsgServerToGCGetGuildContractsResponse_ContractDetails {
	if x != nil {
		return x.Contracts
	}
	return nil
}

type CMsgMatchDiretideCandy_CandyDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        *uint32                `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Audit         *uint32                `protobuf:"varint,2,opt,name=audit" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgMatchDiretideCandy_CandyDetails) Reset() {
	*x = CMsgMatchDiretideCandy_CandyDetails{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgMatchDiretideCandy_CandyDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchDiretideCandy_CandyDetails) ProtoMessage() {}

func (x *CMsgMatchDiretideCandy_CandyDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchDiretideCandy_CandyDetails.ProtoReflect.Descriptor instead.
func (*CMsgMatchDiretideCandy_CandyDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{82, 0}
}

func (x *CMsgMatchDiretideCandy_CandyDetails) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CMsgMatchDiretideCandy_CandyDetails) GetAudit() uint32 {
	if x != nil && x.Audit != nil {
		return *x.Audit
	}
	return 0
}

type CMsgMatchDiretideCandy_PlayerCandy struct {
	state                    protoimpl.MessageState                 `protogen:"open.v1"`
	AccountId                *uint32                                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CandyAmount              *uint32                                `protobuf:"varint,3,opt,name=candy_amount,json=candyAmount" json:"candy_amount,omitempty"`
	ConsumesPeriodicResource *bool                                  `protobuf:"varint,4,opt,name=consumes_periodic_resource,json=consumesPeriodicResource" json:"consumes_periodic_resource,omitempty"`
	CandyBreakdown           []*CMsgMatchDiretideCandy_CandyDetails `protobuf:"bytes,5,rep,name=candy_breakdown,json=candyBreakdown" json:"candy_breakdown,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CMsgMatchDiretideCandy_PlayerCandy) Reset() {
	*x = CMsgMatchDiretideCandy_PlayerCandy{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgMatchDiretideCandy_PlayerCandy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchDiretideCandy_PlayerCandy) ProtoMessage() {}

func (x *CMsgMatchDiretideCandy_PlayerCandy) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchDiretideCandy_PlayerCandy.ProtoReflect.Descriptor instead.
func (*CMsgMatchDiretideCandy_PlayerCandy) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{82, 1}
}

func (x *CMsgMatchDiretideCandy_PlayerCandy) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgMatchDiretideCandy_PlayerCandy) GetCandyAmount() uint32 {
	if x != nil && x.CandyAmount != nil {
		return *x.CandyAmount
	}
	return 0
}

func (x *CMsgMatchDiretideCandy_PlayerCandy) GetConsumesPeriodicResource() bool {
	if x != nil && x.ConsumesPeriodicResource != nil {
		return *x.ConsumesPeriodicResource
	}
	return false
}

func (x *CMsgMatchDiretideCandy_PlayerCandy) GetCandyBreakdown() []*CMsgMatchDiretideCandy_CandyDetails {
	if x != nil {
		return x.CandyBreakdown
	}
	return nil
}

type CMsgGCToServerCheerData_CheerTypeCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CheerType     *uint32                `protobuf:"varint,1,opt,name=cheer_type,json=cheerType" json:"cheer_type,omitempty"`
	CheerCount    *uint32                `protobuf:"varint,2,opt,name=cheer_count,json=cheerCount" json:"cheer_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToServerCheerData_CheerTypeCount) Reset() {
	*x = CMsgGCToServerCheerData_CheerTypeCount{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToServerCheerData_CheerTypeCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerCheerData_CheerTypeCount) ProtoMessage() {}

func (x *CMsgGCToServerCheerData_CheerTypeCount) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerCheerData_CheerTypeCount.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerCheerData_CheerTypeCount) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{83, 0}
}

func (x *CMsgGCToServerCheerData_CheerTypeCount) GetCheerType() uint32 {
	if x != nil && x.CheerType != nil {
		return *x.CheerType
	}
	return 0
}

func (x *CMsgGCToServerCheerData_CheerTypeCount) GetCheerCount() uint32 {
	if x != nil && x.CheerCount != nil {
		return *x.CheerCount
	}
	return 0
}

type CMsgServerToGCGetStickerHeroesResponse_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Stickers      *CMsgStickerHeroes     `protobuf:"bytes,2,opt,name=stickers" json:"stickers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgServerToGCGetStickerHeroesResponse_Player) Reset() {
	*x = CMsgServerToGCGetStickerHeroesResponse_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgServerToGCGetStickerHeroesResponse_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetStickerHeroesResponse_Player) ProtoMessage() {}

func (x *CMsgServerToGCGetStickerHeroesResponse_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetStickerHeroesResponse_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetStickerHeroesResponse_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{94, 0}
}

func (x *CMsgServerToGCGetStickerHeroesResponse_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCGetStickerHeroesResponse_Player) GetStickers() *CMsgStickerHeroes {
	if x != nil {
		return x.Stickers
	}
	return nil
}

type CMsgSteamLearnMatchInfoTeam_Player struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	PrematchMmr             *uint32                `protobuf:"varint,1,opt,name=prematch_mmr,json=prematchMmr" json:"prematch_mmr,omitempty"`
	PrematchRankUncertainty *uint32                `protobuf:"varint,2,opt,name=prematch_rank_uncertainty,json=prematchRankUncertainty" json:"prematch_rank_uncertainty,omitempty"`
	PrematchBehaviorScore   *uint32                `protobuf:"varint,3,opt,name=prematch_behavior_score,json=prematchBehaviorScore" json:"prematch_behavior_score,omitempty"`
	PrematchCommScore       *uint32                `protobuf:"varint,4,opt,name=prematch_comm_score,json=prematchCommScore" json:"prematch_comm_score,omitempty"`
	NumPlayersInParty       *uint32                `protobuf:"varint,5,opt,name=num_players_in_party,json=numPlayersInParty" json:"num_players_in_party,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CMsgSteamLearnMatchInfoTeam_Player) Reset() {
	*x = CMsgSteamLearnMatchInfoTeam_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMatchInfoTeam_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMatchInfoTeam_Player) ProtoMessage() {}

func (x *CMsgSteamLearnMatchInfoTeam_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMatchInfoTeam_Player.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMatchInfoTeam_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{97, 0}
}

func (x *CMsgSteamLearnMatchInfoTeam_Player) GetPrematchMmr() uint32 {
	if x != nil && x.PrematchMmr != nil {
		return *x.PrematchMmr
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfoTeam_Player) GetPrematchRankUncertainty() uint32 {
	if x != nil && x.PrematchRankUncertainty != nil {
		return *x.PrematchRankUncertainty
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfoTeam_Player) GetPrematchBehaviorScore() uint32 {
	if x != nil && x.PrematchBehaviorScore != nil {
		return *x.PrematchBehaviorScore
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfoTeam_Player) GetPrematchCommScore() uint32 {
	if x != nil && x.PrematchCommScore != nil {
		return *x.PrematchCommScore
	}
	return 0
}

func (x *CMsgSteamLearnMatchInfoTeam_Player) GetNumPlayersInParty() uint32 {
	if x != nil && x.NumPlayersInParty != nil {
		return *x.NumPlayersInParty
	}
	return 0
}

type CMsgSteamLearnPlayerTimedStats_StatBucket struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	GameTime            *float32               `protobuf:"fixed32,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Kills               *uint32                `protobuf:"varint,2,opt,name=kills" json:"kills,omitempty"`
	Deaths              *uint32                `protobuf:"varint,3,opt,name=deaths" json:"deaths,omitempty"`
	Assists             *uint32                `protobuf:"varint,4,opt,name=assists" json:"assists,omitempty"`
	Experience          *uint32                `protobuf:"varint,5,opt,name=experience" json:"experience,omitempty"`
	LastHits            *uint32                `protobuf:"varint,6,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies              *uint32                `protobuf:"varint,7,opt,name=denies" json:"denies,omitempty"`
	NetWorth            *uint32                `protobuf:"varint,8,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	IdleTime            *float32               `protobuf:"fixed32,9,opt,name=idle_time,json=idleTime" json:"idle_time,omitempty"`
	CommandsIssued      *uint32                `protobuf:"varint,10,opt,name=commands_issued,json=commandsIssued" json:"commands_issued,omitempty"`
	SentryWardsPlaced   *uint32                `protobuf:"varint,11,opt,name=sentry_wards_placed,json=sentryWardsPlaced" json:"sentry_wards_placed,omitempty"`
	ObserverWardsPlaced *uint32                `protobuf:"varint,12,opt,name=observer_wards_placed,json=observerWardsPlaced" json:"observer_wards_placed,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) Reset() {
	*x = CMsgSteamLearnPlayerTimedStats_StatBucket{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnPlayerTimedStats_StatBucket) ProtoMessage() {}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnPlayerTimedStats_StatBucket.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnPlayerTimedStats_StatBucket) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{100, 0}
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetExperience() uint32 {
	if x != nil && x.Experience != nil {
		return *x.Experience
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetIdleTime() float32 {
	if x != nil && x.IdleTime != nil {
		return *x.IdleTime
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetCommandsIssued() uint32 {
	if x != nil && x.CommandsIssued != nil {
		return *x.CommandsIssued
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetSentryWardsPlaced() uint32 {
	if x != nil && x.SentryWardsPlaced != nil {
		return *x.SentryWardsPlaced
	}
	return 0
}

func (x *CMsgSteamLearnPlayerTimedStats_StatBucket) GetObserverWardsPlaced() uint32 {
	if x != nil && x.ObserverWardsPlaced != nil {
		return *x.ObserverWardsPlaced
	}
	return 0
}

type CMsgSteamLearnMatchStateV5_PlayerState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	NetWorth      *uint32                `protobuf:"varint,2,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Level         *uint32                `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Deaths        *uint32                `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	RespawnTime   *uint32                `protobuf:"varint,5,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	HasBuyback    *bool                  `protobuf:"varint,6,opt,name=has_buyback,json=hasBuyback" json:"has_buyback,omitempty"`
	HasAegis      *bool                  `protobuf:"varint,7,opt,name=has_aegis,json=hasAegis" json:"has_aegis,omitempty"`
	HasRapier     *bool                  `protobuf:"varint,8,opt,name=has_rapier,json=hasRapier" json:"has_rapier,omitempty"`
	Distance      *uint32                `protobuf:"varint,9,opt,name=distance" json:"distance,omitempty"`
	HeroFacet     *uint32                `protobuf:"varint,10,opt,name=hero_facet,json=heroFacet" json:"hero_facet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) Reset() {
	*x = CMsgSteamLearnMatchStateV5_PlayerState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMatchStateV5_PlayerState) ProtoMessage() {}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMatchStateV5_PlayerState.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMatchStateV5_PlayerState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{101, 0}
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetRespawnTime() uint32 {
	if x != nil && x.RespawnTime != nil {
		return *x.RespawnTime
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetHasBuyback() bool {
	if x != nil && x.HasBuyback != nil {
		return *x.HasBuyback
	}
	return false
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetHasAegis() bool {
	if x != nil && x.HasAegis != nil {
		return *x.HasAegis
	}
	return false
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetHasRapier() bool {
	if x != nil && x.HasRapier != nil {
		return *x.HasRapier
	}
	return false
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetDistance() uint32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_PlayerState) GetHeroFacet() uint32 {
	if x != nil && x.HeroFacet != nil {
		return *x.HeroFacet
	}
	return 0
}

type CMsgSteamLearnMatchStateV5_TeamState struct {
	state             protoimpl.MessageState                    `protogen:"open.v1"`
	Team              *uint32                                   `protobuf:"varint,1,opt,name=team" json:"team,omitempty"`
	PlayerStates      []*CMsgSteamLearnMatchStateV5_PlayerState `protobuf:"bytes,2,rep,name=player_states,json=playerStates" json:"player_states,omitempty"`
	TowerHealthPct    []uint32                                  `protobuf:"varint,3,rep,name=tower_health_pct,json=towerHealthPct" json:"tower_health_pct,omitempty"`
	BarracksHealthPct []uint32                                  `protobuf:"varint,4,rep,name=barracks_health_pct,json=barracksHealthPct" json:"barracks_health_pct,omitempty"`
	AncientHealthPct  *uint32                                   `protobuf:"varint,5,opt,name=ancient_health_pct,json=ancientHealthPct" json:"ancient_health_pct,omitempty"`
	GlyphCooldown     *uint32                                   `protobuf:"varint,6,opt,name=glyph_cooldown,json=glyphCooldown" json:"glyph_cooldown,omitempty"`
	Kills             *uint32                                   `protobuf:"varint,7,opt,name=kills" json:"kills,omitempty"`
	CreepDistanceSafe *uint32                                   `protobuf:"varint,8,opt,name=creep_distance_safe,json=creepDistanceSafe" json:"creep_distance_safe,omitempty"`
	CreepDistanceMid  *uint32                                   `protobuf:"varint,9,opt,name=creep_distance_mid,json=creepDistanceMid" json:"creep_distance_mid,omitempty"`
	CreepDistanceOff  *uint32                                   `protobuf:"varint,10,opt,name=creep_distance_off,json=creepDistanceOff" json:"creep_distance_off,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) Reset() {
	*x = CMsgSteamLearnMatchStateV5_TeamState{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnMatchStateV5_TeamState) ProtoMessage() {}

func (x *CMsgSteamLearnMatchStateV5_TeamState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnMatchStateV5_TeamState.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnMatchStateV5_TeamState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{101, 1}
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetPlayerStates() []*CMsgSteamLearnMatchStateV5_PlayerState {
	if x != nil {
		return x.PlayerStates
	}
	return nil
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetTowerHealthPct() []uint32 {
	if x != nil {
		return x.TowerHealthPct
	}
	return nil
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetBarracksHealthPct() []uint32 {
	if x != nil {
		return x.BarracksHealthPct
	}
	return nil
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetAncientHealthPct() uint32 {
	if x != nil && x.AncientHealthPct != nil {
		return *x.AncientHealthPct
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetGlyphCooldown() uint32 {
	if x != nil && x.GlyphCooldown != nil {
		return *x.GlyphCooldown
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetCreepDistanceSafe() uint32 {
	if x != nil && x.CreepDistanceSafe != nil {
		return *x.CreepDistanceSafe
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetCreepDistanceMid() uint32 {
	if x != nil && x.CreepDistanceMid != nil {
		return *x.CreepDistanceMid
	}
	return 0
}

func (x *CMsgSteamLearnMatchStateV5_TeamState) GetCreepDistanceOff() uint32 {
	if x != nil && x.CreepDistanceOff != nil {
		return *x.CreepDistanceOff
	}
	return 0
}

type CMsgSteamLearnWardPlacement_Location struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamLearnWardPlacement_Location) Reset() {
	*x = CMsgSteamLearnWardPlacement_Location{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamLearnWardPlacement_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnWardPlacement_Location) ProtoMessage() {}

func (x *CMsgSteamLearnWardPlacement_Location) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnWardPlacement_Location.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnWardPlacement_Location) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{111, 0}
}

func (x *CMsgSteamLearnWardPlacement_Location) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgSteamLearnWardPlacement_Location) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type CMsgSignOutMapStats_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonalStats *CMsgMapStatsSnapshot  `protobuf:"bytes,2,opt,name=personal_stats,json=personalStats" json:"personal_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutMapStats_Player) Reset() {
	*x = CMsgSignOutMapStats_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutMapStats_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutMapStats_Player) ProtoMessage() {}

func (x *CMsgSignOutMapStats_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutMapStats_Player.ProtoReflect.Descriptor instead.
func (*CMsgSignOutMapStats_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{114, 0}
}

func (x *CMsgSignOutMapStats_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutMapStats_Player) GetPersonalStats() *CMsgMapStatsSnapshot {
	if x != nil {
		return x.PersonalStats
	}
	return nil
}

type CMsgSignOutOverworld_Player struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AccountId           *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OverworldId         *uint32                `protobuf:"varint,2,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	DesiredTokenRewards []uint32               `protobuf:"varint,3,rep,name=desired_token_rewards,json=desiredTokenRewards" json:"desired_token_rewards,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgSignOutOverworld_Player) Reset() {
	*x = CMsgSignOutOverworld_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutOverworld_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutOverworld_Player) ProtoMessage() {}

func (x *CMsgSignOutOverworld_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutOverworld_Player.ProtoReflect.Descriptor instead.
func (*CMsgSignOutOverworld_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{117, 0}
}

func (x *CMsgSignOutOverworld_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutOverworld_Player) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgSignOutOverworld_Player) GetDesiredTokenRewards() []uint32 {
	if x != nil {
		return x.DesiredTokenRewards
	}
	return nil
}

type CMsgSignOutCraftworks_Player struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	AccountId     *uint32                   `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Components    *CMsgCraftworksComponents `protobuf:"bytes,2,opt,name=components" json:"components,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSignOutCraftworks_Player) Reset() {
	*x = CMsgSignOutCraftworks_Player{}
	mi := &file_dota_gcmessages_server_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSignOutCraftworks_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCraftworks_Player) ProtoMessage() {}

func (x *CMsgSignOutCraftworks_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCraftworks_Player.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCraftworks_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{118, 0}
}

func (x *CMsgSignOutCraftworks_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutCraftworks_Player) GetComponents() *CMsgCraftworksComponents {
	if x != nil {
		return x.Components
	}
	return nil
}

var File_dota_gcmessages_server_proto protoreflect.FileDescriptor

const file_dota_gcmessages_server_proto_rawDesc = "" +
	"\n" +
	"\x1cdota_gcmessages_server.proto\x12\bprotocol\x1a\x13steammessages.proto\x1a\x15valveextensions.proto\x1a\x17dota_shared_enums.proto\x1a\x1cdota_gcmessages_common.proto\x1a\x15econ_gcmessages.proto\x1a\x15base_gcmessages.proto\x1a\x18network_connection.proto\x1a\"dota_gcmessages_common_lobby.proto\x1a-dota_gcmessages_common_match_management.proto\x1a&dota_gcmessages_common_overworld.proto\x1a'dota_gcmessages_common_craftworks.proto\x1a\x16gcsdk_gcmessages.proto\x1a,steammessages_steamlearn.steamworkssdk.proto\"\xb7\x03\n" +
	"\x19CMsgPoorNetworkConditions\x12j\n" +
	"\x0edetection_type\x18\x01 \x01(\x0e2$.protocol.EPoorNetworkConditionsType:\x1dk_EPoorNetworkConditions_NoneR\rdetectionType\x12D\n" +
	"\aplayers\x18\x02 \x03(\v2*.protocol.CMsgPoorNetworkConditions.PlayerR\aplayers\x1a\xe7\x01\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12n\n" +
	"\x11disconnect_reason\x18\x02 \x01(\x0e2%.protocol.ENetworkDisconnectionReason:\x1aNETWORK_DISCONNECT_INVALIDR\x10disconnectReason\x12*\n" +
	"\x11num_bad_intervals\x18\x03 \x01(\rR\x0fnumBadIntervals\x12\"\n" +
	"\rpeak_loss_pct\x18\x04 \x01(\rR\vpeakLossPct\"\xe5\x03\n" +
	"\x13CMsgGameserverCrash\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12\x19\n" +
	"\blobby_id\x18\x02 \x01(\x06R\alobbyId\x12R\n" +
	"\n" +
	"game_state\x18\x03 \x01(\x0e2\x18.protocol.DOTA_GameState:\x19DOTA_GAMERULES_STATE_INITR\tgameState\x12,\n" +
	"\x12sentinel_save_time\x18\x04 \x01(\aR\x10sentinelSaveTime\x12$\n" +
	"\x0ecustom_game_id\x18\v \x01(\x06R\fcustomGameId\x12#\n" +
	"\rtournament_id\x18\f \x01(\rR\ftournamentId\x12&\n" +
	"\x0fserver_steam_id\x18\x05 \x01(\x06R\rserverSteamId\x121\n" +
	"\x15server_public_ip_addr\x18\x06 \x01(\aR\x12serverPublicIpAddr\x12\x1f\n" +
	"\vserver_port\x18\a \x01(\rR\n" +
	"serverPort\x12%\n" +
	"\x0eserver_cluster\x18\b \x01(\rR\rserverCluster\x12\x10\n" +
	"\x03pid\x18\t \x01(\rR\x03pid\x12\x16\n" +
	"\x06engine\x18\n" +
	" \x01(\rR\x06engine\"\xde\n" +
	"\n" +
	"\x14CMsgConnectedPlayers\x12R\n" +
	"\x11connected_players\x18\x01 \x03(\v2%.protocol.CMsgConnectedPlayers.PlayerR\x10connectedPlayers\x12X\n" +
	"\x14disconnected_players\x18\a \x03(\v2%.protocol.CMsgConnectedPlayers.PlayerR\x13disconnectedPlayers\x12R\n" +
	"\n" +
	"game_state\x18\x02 \x01(\x0e2\x18.protocol.DOTA_GameState:\x19DOTA_GAMERULES_STATE_INITR\tgameState\x120\n" +
	"\x14first_blood_happened\x18\x06 \x01(\bR\x12firstBloodHappened\x12[\n" +
	"\x17poor_network_conditions\x18\n" +
	" \x01(\v2#.protocol.CMsgPoorNetworkConditionsR\x15poorNetworkConditions\x12S\n" +
	"\vsend_reason\x18\b \x01(\x0e2).protocol.CMsgConnectedPlayers.SendReason:\aINVALIDR\n" +
	"sendReason\x12#\n" +
	"\rradiant_kills\x18\v \x01(\rR\fradiantKills\x12\x1d\n" +
	"\n" +
	"dire_kills\x18\f \x01(\rR\tdireKills\x12!\n" +
	"\fradiant_lead\x18\x0e \x01(\x05R\vradiantLead\x12%\n" +
	"\x0ebuilding_state\x18\x0f \x01(\rR\rbuildingState\x12M\n" +
	"\fplayer_draft\x18\x10 \x03(\v2*.protocol.CMsgConnectedPlayers.PlayerDraftR\vplayerDraft\x1a\xea\x01\n" +
	"\x06Player\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12\x17\n" +
	"\ahero_id\x18\x02 \x01(\x05R\x06heroId\x12<\n" +
	"\fleaver_state\x18\x03 \x01(\v2\x19.protocol.CMsgLeaverStateR\vleaverState\x12n\n" +
	"\x11disconnect_reason\x18\x04 \x01(\x0e2%.protocol.ENetworkDisconnectionReason:\x1aNETWORK_DISCONNECT_INVALIDR\x10disconnectReason\x1a\x89\x01\n" +
	"\vPlayerDraft\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12B\n" +
	"\x04team\x18\x02 \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x16DOTA_GC_TEAM_GOOD_GUYSR\x04team\x12\x1b\n" +
	"\tteam_slot\x18\x03 \x01(\x05R\bteamSlot\"\x89\x02\n" +
	"\n" +
	"SendReason\x12\v\n" +
	"\aINVALID\x10\x00\x12\r\n" +
	"\tHEARTBEAT\x10\x01\x12\x0e\n" +
	"\n" +
	"GAME_STATE\x10\x02\x12\x0f\n" +
	"\vFIRST_BLOOD\x10\x03\x12\x14\n" +
	"\x10PLAYER_CONNECTED\x10\x04\x12\x0f\n" +
	"\vPLAYER_HERO\x10\x05\x12$\n" +
	" PLAYER_DISCONNECTED_CONSEQUENCES\x10\x06\x12&\n" +
	"\"PLAYER_DISCONNECTED_NOCONSEQUENCES\x10\a\x12\x15\n" +
	"\x11GAMESTATE_TIMEOUT\x10\n" +
	"\x12\x13\n" +
	"\x0fMASS_DISCONNECT\x10\v\x12\t\n" +
	"\x05KILLS\x10\r\x12\x12\n" +
	"\x0eBUILDING_STATE\x10\x0e\"\x9b\f\n" +
	"\x12CMsgGameServerInfo\x121\n" +
	"\x15server_public_ip_addr\x18\x01 \x01(\aR\x12serverPublicIpAddr\x123\n" +
	"\x16server_private_ip_addr\x18\x02 \x01(\aR\x13serverPrivateIpAddr\x12\x1f\n" +
	"\vserver_port\x18\x03 \x01(\rR\n" +
	"serverPort\x12$\n" +
	"\x0eserver_tv_port\x18\x04 \x01(\rR\fserverTvPort\x125\n" +
	"\x17assigned_server_tv_port\x18\x16 \x01(\rR\x14assignedServerTvPort\x12M\n" +
	"#legacy_server_steamdatagram_address\x18\x1b \x01(\fR legacyServerSteamdatagramAddress\x12\x1d\n" +
	"\n" +
	"server_key\x18\x05 \x01(\tR\tserverKey\x12-\n" +
	"\x12server_hibernation\x18\x06 \x01(\bR\x11serverHibernation\x12U\n" +
	"\vserver_type\x18\a \x01(\x0e2'.protocol.CMsgGameServerInfo.ServerType:\vUNSPECIFIEDR\n" +
	"serverType\x12#\n" +
	"\rserver_region\x18\b \x01(\rR\fserverRegion\x12%\n" +
	"\x0eserver_loadavg\x18\t \x01(\x02R\rserverLoadavg\x127\n" +
	"\x18server_tv_broadcast_time\x18\n" +
	" \x01(\x02R\x15serverTvBroadcastTime\x12(\n" +
	"\x10server_game_time\x18\v \x01(\x02R\x0eserverGameTime\x12D\n" +
	"\x1fserver_relay_connected_steam_id\x18\f \x01(\x06R\x1bserverRelayConnectedSteamId\x12&\n" +
	"\x0frelay_slots_max\x18\r \x01(\rR\rrelaySlotsMax\x12)\n" +
	"\x10relays_connected\x18\x0e \x01(\x05R\x0frelaysConnected\x126\n" +
	"\x17relay_clients_connected\x18\x0f \x01(\x05R\x15relayClientsConnected\x12>\n" +
	"\x1crelayed_game_server_steam_id\x18\x10 \x01(\x06R\x18relayedGameServerSteamId\x12,\n" +
	"\x12parent_relay_count\x18\x11 \x01(\rR\x10parentRelayCount\x12$\n" +
	"\x0etv_secret_code\x18\x12 \x01(\x06R\ftvSecretCode\x12%\n" +
	"\x0eserver_version\x18\x13 \x01(\rR\rserverVersion\x12%\n" +
	"\x0eserver_cluster\x18\x14 \x01(\rR\rserverCluster\x12\\\n" +
	"\x12allow_custom_games\x18\x17 \x01(\x0e2(.protocol.CMsgGameServerInfo.CustomGames:\x04BOTHR\x10allowCustomGames\x12#\n" +
	"\rbuild_version\x18\x18 \x01(\rR\fbuildVersion\x12%\n" +
	"\x0esrcds_instance\x18\x1a \x01(\rR\rsrcdsInstance\x121\n" +
	"\x15dev_force_server_type\x18\x1c \x01(\bR\x12devForceServerType\x12F\n" +
	" is_recording_match_training_data\x18\x1d \x01(\bR\x1cisRecordingMatchTrainingData\"l\n" +
	"\n" +
	"ServerType\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\b\n" +
	"\x04GAME\x10\x01\x12\t\n" +
	"\x05PROXY\x10\x02\x12\r\n" +
	"\tDOTA_ONLY\x10\x04\x12\x14\n" +
	"\x10CUSTOM_GAME_ONLY\x10\x05\x12\x13\n" +
	"\x0fEVENT_GAME_ONLY\x10\x06\"6\n" +
	"\vCustomGames\x12\b\n" +
	"\x04BOTH\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\b\n" +
	"\x04ONLY\x10\x02\x12\t\n" +
	"\x05EVENT\x10\x03\"\xb6\x03\n" +
	"\x12CMsgLeaverDetected\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12S\n" +
	"\rleaver_status\x18\x02 \x01(\x0e2\x1c.protocol.DOTALeaverStatus_t:\x10DOTA_LEAVER_NONER\fleaverStatus\x12<\n" +
	"\fleaver_state\x18\x04 \x01(\v2\x19.protocol.CMsgLeaverStateR\vleaverState\x12%\n" +
	"\x0eserver_cluster\x18\x05 \x01(\rR\rserverCluster\x12n\n" +
	"\x11disconnect_reason\x18\x06 \x01(\x0e2%.protocol.ENetworkDisconnectionReason:\x1aNETWORK_DISCONNECT_INVALIDR\x10disconnectReason\x12[\n" +
	"\x17poor_network_conditions\x18\a \x01(\v2#.protocol.CMsgPoorNetworkConditionsR\x15poorNetworkConditions\"4\n" +
	"\x1aCMsgLeaverDetectedResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\rR\x06result\"]\n" +
	"\x1fCMsgDOTAFantasyFinalPlayerStats\x12:\n" +
	"\x05stats\x18\x02 \x03(\v2$.protocol.CMsgDOTAFantasyPlayerStatsR\x05stats\"\\\n" +
	"\x1eCMsgDOTAFantasyLivePlayerStats\x12:\n" +
	"\x05stats\x18\x02 \x03(\v2$.protocol.CMsgDOTAFantasyPlayerStatsR\x05stats\"a\n" +
	"\x1bCMsgServerToGCRealtimeStats\x12B\n" +
	"\adelayed\x18\x01 \x01(\v2(.protocol.CMsgDOTARealtimeGameStatsTerseR\adelayed\"@\n" +
	"$CMsgGCToServerRealtimeStatsStartStop\x12\x18\n" +
	"\adelayed\x18\x01 \x01(\bR\adelayed\"?\n" +
	"%CMsgGCToServerUpdateSteamBroadcasting\x12\x16\n" +
	"\x06active\x18\x01 \x01(\bR\x06active\"\xf5\x03\n" +
	"\x18CMsgSignOutGameplayStats\x12>\n" +
	"\x05teams\x18\x01 \x03(\v2(.protocol.CMsgSignOutGameplayStats.CTeamR\x05teams\x1a\xae\x01\n" +
	"\aCPlayer\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12\x1f\n" +
	"\vplayer_slot\x18\x02 \x01(\rR\n" +
	"playerSlot\x12\x17\n" +
	"\ahero_id\x18\x03 \x01(\x05R\x06heroId\x12N\n" +
	"\x12timed_player_stats\x18\x04 \x03(\v2 .protocol.CMatchPlayerTimedStatsR\x10timedPlayerStats\x1a\xe7\x01\n" +
	"\x05CTeam\x12&\n" +
	"\x0fis_winning_team\x18\x01 \x01(\bR\risWinningTeam\x12&\n" +
	"\x0fis_radiant_team\x18\x02 \x01(\bR\risRadiantTeam\x12H\n" +
	"\x10timed_team_stats\x18\x03 \x03(\v2\x1e.protocol.CMatchTeamTimedStatsR\x0etimedTeamStats\x12D\n" +
	"\aplayers\x18\x04 \x03(\v2*.protocol.CMsgSignOutGameplayStats.CPlayerR\aplayers\"\x933\n" +
	"\x14CMsgGameMatchSignOut\x12\x1f\n" +
	"\bmatch_id\x18\x01 \x01(\x04B\x04\x80\xa6\x1d\x01R\amatchId\x12\x1a\n" +
	"\bduration\x18\x02 \x01(\rR\bduration\x12\"\n" +
	"\rgood_guys_win\x18\x03 \x01(\bR\vgoodGuysWin\x12\x12\n" +
	"\x04date\x18\x04 \x01(\aR\x04date\x12:\n" +
	"\x05teams\x18\x06 \x03(\v2$.protocol.CMsgGameMatchSignOut.CTeamR\x05teams\x12!\n" +
	"\ftower_status\x18\b \x03(\rR\vtowerStatus\x12'\n" +
	"\x0fbarracks_status\x18\t \x03(\rR\x0ebarracksStatus\x12\x18\n" +
	"\acluster\x18\n" +
	" \x01(\rR\acluster\x12\x1f\n" +
	"\vserver_addr\x18\v \x01(\tR\n" +
	"serverAddr\x12(\n" +
	"\x10first_blood_time\x18\f \x01(\rR\x0efirstBloodTime\x12\x1f\n" +
	"\vevent_score\x18\x0e \x01(\rR\n" +
	"eventScore\x12I\n" +
	"\rfantasy_stats\x18) \x03(\v2$.protocol.CMsgDOTAFantasyPlayerStatsR\ffantasyStats\x12w\n" +
	" player_strange_count_adjustments\x18\x11 \x03(\v2..protocol.CMsgEconPlayerStrangeCountAdjustmentR\x1dplayerStrangeCountAdjustments\x12/\n" +
	"\x13automatic_surrender\x18\x12 \x01(\bR\x12automaticSurrender\x12%\n" +
	"\x0eserver_version\x18\x13 \x01(\rR\rserverVersion\x12[\n" +
	"\x17poor_network_conditions\x18# \x01(\v2#.protocol.CMsgPoorNetworkConditionsR\x15poorNetworkConditions\x12]\n" +
	"\x0fadditional_msgs\x18\x14 \x03(\v24.protocol.CMsgGameMatchSignOut.CAdditionalSignoutMsgR\x0eadditionalMsgs\x12b\n" +
	"\x12social_feed_events\x18$ \x03(\v24.protocol.CMsgGameMatchSignOut.CSocialFeedMatchEventR\x10socialFeedEvents\x124\n" +
	"\x16average_networth_delta\x18\x16 \x01(\x11R\x14averageNetworthDelta\x12X\n" +
	"\x10custom_game_data\x18% \x01(\v2..protocol.CMsgGameMatchSignOut.CCustomGameDataR\x0ecustomGameData\x12\x1f\n" +
	"\vmatch_flags\x18& \x01(\rR\n" +
	"matchFlags\x12\x1f\n" +
	"\vteam_scores\x18' \x03(\rR\n" +
	"teamScores\x12*\n" +
	"\x11pre_game_duration\x18( \x01(\rR\x0fpreGameDuration\x12}\n" +
	"\x1eevent_game_leaderboard_entries\x18* \x03(\v28.protocol.CMsgGameMatchSignOut.EventGameLeaderboardEntryR\x1beventGameLeaderboardEntries\x12U\n" +
	"\x0fward_placements\x18+ \x03(\v2,.protocol.CMsgGameMatchSignOut.WardPlacementR\x0ewardPlacements\x12I\n" +
	"\x0egameplay_stats\x18, \x01(\v2\".protocol.CMsgSignOutGameplayStatsR\rgameplayStats\x12?\n" +
	"\x0eextra_messages\x186 \x03(\v2\x18.protocol.CExtraMsgBlockR\rextraMessages\x124\n" +
	"\x16training_data_recorded\x187 \x01(\bR\x14trainingDataRecorded\x12Q\n" +
	"\fwinning_team\x188 \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x16DOTA_GC_TEAM_GOOD_GUYSR\vwinningTeam\x12E\n" +
	"\x1fnormalized_win_probability_diff\x189 \x01(\x02R\x1cnormalizedWinProbabilityDiff\x12I\n" +
	"\x13match_tracked_stats\x18: \x03(\v2\x19.protocol.CMsgTrackedStatR\x11matchTrackedStats\x1a\xf2\x1d\n" +
	"\x05CTeam\x12F\n" +
	"\aplayers\x18\x01 \x03(\v2,.protocol.CMsgGameMatchSignOut.CTeam.CPlayerR\aplayers\x12G\n" +
	"\x12team_tracked_stats\x18\x02 \x03(\v2\x19.protocol.CMsgTrackedStatR\x10teamTrackedStats\x1a\xd7\x1c\n" +
	"\aCPlayer\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x12\x17\n" +
	"\ahero_id\x18\x03 \x01(\x05R\x06heroId\x12\x14\n" +
	"\x05items\x18\x04 \x03(\x05R\x05items\x12.\n" +
	"\x13item_purchase_times\x18? \x03(\rR\x11itemPurchaseTimes\x12\x12\n" +
	"\x04gold\x18\x05 \x01(\rR\x04gold\x12\x14\n" +
	"\x05kills\x18\x06 \x01(\rR\x05kills\x12\x16\n" +
	"\x06deaths\x18\a \x01(\rR\x06deaths\x12\x18\n" +
	"\aassists\x18\b \x01(\rR\aassists\x12#\n" +
	"\rleaver_status\x18\t \x01(\rR\fleaverStatus\x12\x1b\n" +
	"\tlast_hits\x18\n" +
	" \x01(\rR\blastHits\x12\x16\n" +
	"\x06denies\x18\v \x01(\rR\x06denies\x12 \n" +
	"\fgold_per_min\x18\f \x01(\rR\n" +
	"goldPerMin\x12\"\n" +
	"\rxp_per_minute\x18\r \x01(\rR\vxpPerMinute\x12\x1d\n" +
	"\n" +
	"gold_spent\x18\x0e \x01(\rR\tgoldSpent\x12\x14\n" +
	"\x05level\x18\x0f \x01(\rR\x05level\x12,\n" +
	"\x12scaled_hero_damage\x18\x10 \x01(\rR\x10scaledHeroDamage\x12.\n" +
	"\x13scaled_tower_damage\x18\x11 \x01(\rR\x11scaledTowerDamage\x12.\n" +
	"\x13scaled_hero_healing\x18\x12 \x01(\rR\x11scaledHeroHealing\x12$\n" +
	"\x0etime_last_seen\x18\x13 \x01(\rR\ftimeLastSeen\x122\n" +
	"\x15support_ability_value\x18\x14 \x01(\rR\x13supportAbilityValue\x12\x19\n" +
	"\bparty_id\x18\x15 \x01(\x04R\apartyId\x12*\n" +
	"\x11claimed_farm_gold\x18\x1b \x01(\rR\x0fclaimedFarmGold\x12!\n" +
	"\fsupport_gold\x18\x1c \x01(\rR\vsupportGold\x12%\n" +
	"\x0eclaimed_denies\x18\x1d \x01(\rR\rclaimedDenies\x12%\n" +
	"\x0eclaimed_misses\x18\x1e \x01(\rR\rclaimedMisses\x12\x16\n" +
	"\x06misses\x18\x1f \x01(\rR\x06misses\x12\x1b\n" +
	"\tnet_worth\x18\" \x01(\rR\bnetWorth\x12\x1f\n" +
	"\vhero_damage\x18% \x01(\rR\n" +
	"heroDamage\x12!\n" +
	"\ftower_damage\x18& \x01(\rR\vtowerDamage\x12!\n" +
	"\fhero_healing\x18' \x01(\rR\vheroHealing\x12O\n" +
	"\x10ability_upgrades\x18  \x03(\v2$.protocol.CMatchPlayerAbilityUpgradeR\x0fabilityUpgrades\x12e\n" +
	"\x1aadditional_units_inventory\x18! \x03(\v2'.protocol.CMatchAdditionalUnitInventoryR\x18additionalUnitsInventory\x12L\n" +
	"\x0fpermanent_buffs\x18( \x03(\v2#.protocol.CMatchPlayerPermanentBuffR\x0epermanentBuffs\x12f\n" +
	"\x10custom_game_data\x18# \x01(\v2<.protocol.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameDataR\x0ecustomGameData\x12,\n" +
	"\x12match_player_flags\x18$ \x01(\rR\x10matchPlayerFlags\x12,\n" +
	"\x12talent_ability_ids\x18) \x03(\x05R\x10talentAbilityIds\x12&\n" +
	"\x0fhero_pick_order\x18* \x01(\rR\rheroPickOrder\x12*\n" +
	"\x11hero_was_randomed\x18+ \x01(\bR\x0fheroWasRandomed\x12@\n" +
	"\x1dhero_was_dota_plus_suggestion\x182 \x01(\bR\x19heroWasDotaPlusSuggestion\x12\x12\n" +
	"\x04lane\x18- \x01(\rR\x04lane\x12-\n" +
	"\x13is_using_plus_guide\x18/ \x01(\bR\x10isUsingPlusGuide\x12q\n" +
	"\x14hero_damage_received\x180 \x03(\v2?.protocol.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceivedR\x12heroDamageReceived\x12k\n" +
	"\x11hero_damage_dealt\x18@ \x03(\v2?.protocol.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceivedR\x0fheroDamageDealt\x12!\n" +
	"\fseconds_dead\x183 \x01(\rR\vsecondsDead\x12+\n" +
	"\x12gold_lost_to_death\x184 \x01(\rR\x0fgoldLostToDeath\x12#\n" +
	"\rcommand_count\x185 \x01(\rR\fcommandCount\x12B\n" +
	"\x1emouse_click_cast_command_count\x186 \x01(\rR\x1amouseClickCastCommandCount\x12%\n" +
	"\x0eteleports_used\x187 \x01(\rR\rteleportsUsed\x12O\n" +
	"\"cavern_crawl_preferred_map_variant\x188 \x01(\r:\x03255R\x1ecavernCrawlPreferredMapVariant\x12!\n" +
	"\fbounty_runes\x189 \x01(\rR\vbountyRunes\x12+\n" +
	"\x11outposts_captured\x18: \x01(\rR\x10outpostsCaptured\x12\x18\n" +
	"\adewards\x18; \x01(\rR\adewards\x12!\n" +
	"\fwards_placed\x18< \x01(\rR\vwardsPlaced\x12#\n" +
	"\rcamps_stacked\x18= \x01(\rR\fcampsStacked\x12\x1f\n" +
	"\vplayer_slot\x18> \x01(\rR\n" +
	"playerSlot\x12-\n" +
	"\x12predicted_position\x18B \x01(\rR\x11predictedPosition\x12(\n" +
	"\rlane_outcomes\x18C \x01(\r:\x03255R\flaneOutcomes\x12;\n" +
	"\x1afriendly_t1_destroyed_time\x18D \x01(\rR\x17friendlyT1DestroyedTime\x125\n" +
	"\x17enemy_t1_destroyed_time\x18E \x01(\rR\x14enemyT1DestroyedTime\x122\n" +
	"\x15friendly_roshan_kills\x18F \x01(\rR\x13friendlyRoshanKills\x12,\n" +
	"\x12enemy_roshan_kills\x18G \x01(\rR\x10enemyRoshanKills\x12\x1f\n" +
	"\vpower_runes\x18H \x01(\rR\n" +
	"powerRunes\x12\x1f\n" +
	"\vwater_runes\x18I \x01(\rR\n" +
	"waterRunes\x12#\n" +
	"\rstun_duration\x18J \x01(\x02R\fstunDuration\x12O\n" +
	"\vteam_number\x18K \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x16DOTA_GC_TEAM_GOOD_GUYSR\n" +
	"teamNumber\x12\x1b\n" +
	"\tteam_slot\x18L \x01(\rR\bteamSlot\x120\n" +
	"\x14time_purchased_shard\x18M \x01(\rR\x12timePurchasedShard\x12.\n" +
	"\x13time_purchased_aghs\x18N \x01(\rR\x11timePurchasedAghs\x126\n" +
	"\x17ability_draft_abilities\x18O \x03(\x05R\x15abilityDraftAbilities\x12K\n" +
	"\x14player_tracked_stats\x18P \x03(\v2\x19.protocol.CMsgTrackedStatR\x12playerTrackedStats\x12%\n" +
	"\x0epredicted_rank\x18Q \x01(\rR\rpredictedRank\x12%\n" +
	"\x0eselected_facet\x18R \x01(\rR\rselectedFacet\x12+\n" +
	"\x11enhancement_level\x18S \x01(\rR\x10enhancementLevel\x1aF\n" +
	"\x0fCCustomGameData\x12\x1b\n" +
	"\tdota_team\x18\x01 \x01(\rR\bdotaTeam\x12\x16\n" +
	"\x06winner\x18\x02 \x01(\bR\x06winner\x1a\xd4\x01\n" +
	"\x12HeroDamageReceived\x12#\n" +
	"\rpre_reduction\x18\x01 \x01(\rR\fpreReduction\x12%\n" +
	"\x0epost_reduction\x18\x02 \x01(\rR\rpostReduction\x12r\n" +
	"\vdamage_type\x18\x03 \x01(\x0e2;.protocol.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType:\x14HERO_DAMAGE_PHYSICALR\n" +
	"damageType\"Y\n" +
	"\x0eHeroDamageType\x12\x18\n" +
	"\x14HERO_DAMAGE_PHYSICAL\x10\x00\x12\x17\n" +
	"\x13HERO_DAMAGE_MAGICAL\x10\x01\x12\x14\n" +
	"\x10HERO_DAMAGE_PURE\x10\x02\x1aC\n" +
	"\x15CAdditionalSignoutMsg\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x1a\n" +
	"\bcontents\x18\x02 \x01(\fR\bcontents\x1a\xb1\x01\n" +
	"\x15CSocialFeedMatchEvent\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\rR\ttimestamp\x12\x1d\n" +
	"\n" +
	"event_type\x18\x03 \x01(\rR\teventType\x12\x1b\n" +
	"\tgame_time\x18\x04 \x01(\x05R\bgameTime\x12\x1f\n" +
	"\vreplay_time\x18\x05 \x01(\rR\n" +
	"replayTime\x1a>\n" +
	"\x0fCCustomGameData\x12+\n" +
	"\x11publish_timestamp\x18\x01 \x01(\rR\x10publishTimestamp\x1a\xfc\x01\n" +
	"\x19EventGameLeaderboardEntry\x12\x1f\n" +
	"\vname_suffix\x18\x01 \x01(\tR\n" +
	"nameSuffix\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x05R\x05score\x12 \n" +
	"\fextra_data_1\x18\x03 \x01(\rR\n" +
	"extraData1\x12 \n" +
	"\fextra_data_2\x18\x04 \x01(\rR\n" +
	"extraData2\x12 \n" +
	"\fextra_data_3\x18\x05 \x01(\rR\n" +
	"extraData3\x12 \n" +
	"\fextra_data_4\x18\x06 \x01(\rR\n" +
	"extraData4\x12 \n" +
	"\fextra_data_5\x18\a \x01(\rR\n" +
	"extraData5\x1a\x93\x02\n" +
	"\rWardPlacement\x12\x1f\n" +
	"\tplayer_id\x18\x01 \x01(\x05:\x02-1R\bplayerId\x12\x17\n" +
	"\ateam_id\x18\x02 \x01(\rR\x06teamId\x12\x1f\n" +
	"\vplaced_time\x18\x03 \x01(\rR\n" +
	"placedTime\x12%\n" +
	"\x0ebuilding_state\x18\x04 \x01(\rR\rbuildingState\x12\x1f\n" +
	"\vcreep_state\x18\x05 \x01(\rR\n" +
	"creepState\x12!\n" +
	"\froshan_alive\x18\x06 \x01(\bR\vroshanAlive\x12\x1d\n" +
	"\n" +
	"position_x\x18\a \x01(\rR\tpositionX\x12\x1d\n" +
	"\n" +
	"position_y\x18\b \x01(\rR\tpositionY\"\xca\x01\n" +
	"\x14CMsgSignOutDraftInfo\x12;\n" +
	"\x1aradiant_captain_account_id\x18\x01 \x01(\rR\x17radiantCaptainAccountId\x125\n" +
	"\x17dire_captain_account_id\x18\x02 \x01(\rR\x14direCaptainAccountId\x12>\n" +
	"\n" +
	"picks_bans\x18\x03 \x03(\v2\x1f.protocol.CMatchHeroSelectEventR\tpicksBans\"\xac\x02\n" +
	"\x12CMsgSignOutBotInfo\x12!\n" +
	"\fallow_cheats\x18\x01 \x01(\bR\vallowCheats\x12i\n" +
	"\x16bot_difficulty_radiant\x18\x02 \x01(\x0e2\x1b.protocol.DOTABotDifficulty:\x16BOT_DIFFICULTY_PASSIVER\x14botDifficultyRadiant\x12#\n" +
	"\rcreated_lobby\x18\x03 \x01(\bR\fcreatedLobby\x12c\n" +
	"\x13bot_difficulty_dire\x18\x05 \x01(\x0e2\x1b.protocol.DOTABotDifficulty:\x16BOT_DIFFICULTY_PASSIVER\x11botDifficultyDire\"\xf2\x01\n" +
	"\x17CMsgSignOutTextMuteInfo\x12_\n" +
	"\x12text_mute_messages\x18\x01 \x03(\v21.protocol.CMsgSignOutTextMuteInfo.TextMuteMessageR\x10textMuteMessages\x1av\n" +
	"\x0fTextMuteMessage\x12\x16\n" +
	"\x06region\x18\x01 \x01(\rR\x06region\x12(\n" +
	"\x10caused_text_mute\x18\x02 \x01(\bR\x0ecausedTextMute\x12!\n" +
	"\fchat_message\x18\x03 \x01(\tR\vchatMessage\"\xd5\a\n" +
	"\x16CMsgSignOutPlayerStats\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\x05R\taccountId\x12\x19\n" +
	"\bmatch_id\x18\x02 \x01(\x04R\amatchId\x12\x12\n" +
	"\x04rank\x18\x03 \x01(\rR\x04rank\x12\x17\n" +
	"\ahero_id\x18\x04 \x01(\x05R\x06heroId\x12\x1a\n" +
	"\brampages\x18\x05 \x01(\rR\brampages\x12!\n" +
	"\ftriple_kills\x18\x06 \x01(\rR\vtripleKills\x12.\n" +
	"\x13first_blood_claimed\x18\a \x01(\rR\x11firstBloodClaimed\x12*\n" +
	"\x11first_blood_given\x18\b \x01(\rR\x0ffirstBloodGiven\x12'\n" +
	"\x0fcouriers_killed\x18\t \x01(\rR\x0ecouriersKilled\x12)\n" +
	"\x10aegises_snatched\x18\n" +
	" \x01(\rR\x0faegisesSnatched\x12#\n" +
	"\rcheeses_eaten\x18\v \x01(\rR\fcheesesEaten\x12%\n" +
	"\x0ecreeps_stacked\x18\f \x01(\rR\rcreepsStacked\x12\x1f\n" +
	"\vfight_score\x18\r \x01(\x02R\n" +
	"fightScore\x12\x1d\n" +
	"\n" +
	"farm_score\x18\x0e \x01(\x02R\tfarmScore\x12#\n" +
	"\rsupport_score\x18\x0f \x01(\x02R\fsupportScore\x12\x1d\n" +
	"\n" +
	"push_score\x18\x10 \x01(\x02R\tpushScore\x12\x14\n" +
	"\x05kills\x18\x11 \x01(\rR\x05kills\x12\x16\n" +
	"\x06deaths\x18\x12 \x01(\rR\x06deaths\x12\x18\n" +
	"\aassists\x18\x13 \x01(\rR\aassists\x12\x1b\n" +
	"\tlast_hits\x18\x14 \x01(\rR\blastHits\x12\x16\n" +
	"\x06denies\x18\x15 \x01(\rR\x06denies\x12\x10\n" +
	"\x03gpm\x18\x16 \x01(\x02R\x03gpm\x12\x12\n" +
	"\x04xppm\x18\x17 \x01(\x02R\x04xppm\x12\x1b\n" +
	"\tnet_worth\x18\x18 \x01(\x02R\bnetWorth\x12\x16\n" +
	"\x06damage\x18\x19 \x01(\x02R\x06damage\x12\x14\n" +
	"\x05heals\x18\x1a \x01(\x02R\x05heals\x12+\n" +
	"\x11rapiers_purchased\x18\x1b \x01(\rR\x10rapiersPurchased\x122\n" +
	"\x15observer_wards_placed\x18\x1c \x01(\rR\x13observerWardsPlaced\x12'\n" +
	"\x0fwards_destroyed\x18\x1d \x01(\rR\x0ewardsDestroyed\x12\x1d\n" +
	"\n" +
	"lobby_type\x18\x1e \x01(\rR\tlobbyType\"\xda\a\n" +
	"\x1fCMsgSignOutCommunicationSummary\x12W\n" +
	"\aplayers\x18\x01 \x03(\v2=.protocol.CMsgSignOutCommunicationSummary.PlayerCommunicationR\aplayers\x1a\xdd\x06\n" +
	"\x13PlayerCommunication\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x14\n" +
	"\x05pings\x18\x02 \x01(\rR\x05pings\x123\n" +
	"\x16max_pings_per_interval\x18\x03 \x01(\rR\x13maxPingsPerInterval\x12%\n" +
	"\x0eteammate_pings\x18\x04 \x01(\rR\rteammatePings\x12D\n" +
	"\x1fmax_teammate_pings_per_interval\x18\x05 \x01(\rR\x1bmaxTeammatePingsPerInterval\x12,\n" +
	"\x12team_chat_messages\x18\x06 \x01(\rR\x10teamChatMessages\x12*\n" +
	"\x11all_chat_messages\x18\a \x01(\rR\x0fallChatMessages\x12.\n" +
	"\x13chat_wheel_messages\x18\b \x01(\rR\x11chatWheelMessages\x12\x16\n" +
	"\x06pauses\x18\t \x01(\rR\x06pauses\x12\x1a\n" +
	"\bunpauses\x18\n" +
	" \x01(\rR\bunpauses\x12\x1f\n" +
	"\vlines_drawn\x18\v \x01(\rR\n" +
	"linesDrawn\x12,\n" +
	"\x12voice_chat_seconds\x18\f \x01(\rR\x10voiceChatSeconds\x12\x1d\n" +
	"\n" +
	"chat_mutes\x18\r \x01(\rR\tchatMutes\x12\x1f\n" +
	"\vvoice_mutes\x18\x0e \x01(\rR\n" +
	"voiceMutes\x12k\n" +
	"\fping_details\x18\x0f \x03(\v2H.protocol.CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetailR\vpingDetails\x12*\n" +
	"\x11comms_blocks_solo\x18\x10 \x01(\rR\x0fcommsBlocksSolo\x12*\n" +
	"\x11comms_blocks_mass\x18\x11 \x01(\rR\x0fcommsBlocksMass\x12\x19\n" +
	"\bchat_log\x18\x12 \x03(\tR\achatLog\x1aB\n" +
	"\n" +
	"PingDetail\x12\x1e\n" +
	"\x04type\x18\x01 \x01(\r:\n" +
	"4294967295R\x04type\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\"\x86\b\n" +
	"\x1cCMsgGameMatchSignoutResponse\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12\x1f\n" +
	"\vreplay_salt\x18\x02 \x01(\aR\n" +
	"replaySalt\x12\x1a\n" +
	"\bleagueid\x18\x05 \x01(\rR\bleagueid\x120\n" +
	"\x14metadata_private_key\x18\a \x01(\aR\x12metadataPrivateKey\x12<\n" +
	"\rmatch_details\x18\b \x01(\v2\x17.protocol.CMsgDOTAMatchR\fmatchDetails\x12`\n" +
	"\x10players_metadata\x18\t \x03(\v25.protocol.CMsgGameMatchSignoutResponse.PlayerMetadataR\x0fplayersMetadata\x12-\n" +
	"\bmvp_data\x18\n" +
	" \x01(\v2\x12.protocol.CMvpDataR\amvpData\x12$\n" +
	"\x0eow_private_key\x18\v \x01(\x06R\fowPrivateKey\x12\x17\n" +
	"\aow_salt\x18\f \x01(\aR\x06owSalt\x12 \n" +
	"\fow_replay_id\x18\r \x01(\x04R\n" +
	"owReplayId\x12P\n" +
	"\x11overworld_rewards\x18\x0e \x01(\v2#.protocol.CMsgOverworldMatchRewardsR\x10overworldRewards\x1a\xd9\x03\n" +
	"\x0ePlayerMetadata\x12\x17\n" +
	"\ahero_id\x18\x01 \x01(\x05R\x06heroId\x12\"\n" +
	"\ravg_kills_x16\x18\x02 \x01(\rR\vavgKillsX16\x12$\n" +
	"\x0eavg_deaths_x16\x18\x03 \x01(\rR\favgDeathsX16\x12&\n" +
	"\x0favg_assists_x16\x18\x04 \x01(\rR\ravgAssistsX16\x12\x1e\n" +
	"\vavg_gpm_x16\x18\x05 \x01(\rR\tavgGpmX16\x12\x1e\n" +
	"\vavg_xpm_x16\x18\x06 \x01(\rR\tavgXpmX16\x12$\n" +
	"\x0ebest_kills_x16\x18\a \x01(\rR\fbestKillsX16\x12(\n" +
	"\x10best_assists_x16\x18\b \x01(\rR\x0ebestAssistsX16\x12 \n" +
	"\fbest_gpm_x16\x18\t \x01(\rR\n" +
	"bestGpmX16\x12 \n" +
	"\fbest_xpm_x16\x18\n" +
	" \x01(\rR\n" +
	"bestXpmX16\x12\x1d\n" +
	"\n" +
	"win_streak\x18\v \x01(\rR\twinStreak\x12&\n" +
	"\x0fbest_win_streak\x18\f \x01(\rR\rbestWinStreak\x12!\n" +
	"\fgames_played\x18\r \x01(\rR\vgamesPlayed\"\xbf\x01\n" +
	"%CMsgGameMatchSignOutPermissionRequest\x12%\n" +
	"\x0eserver_version\x18\x01 \x01(\rR\rserverVersion\x12#\n" +
	"\rlocal_attempt\x18\x02 \x01(\rR\flocalAttempt\x12#\n" +
	"\rtotal_attempt\x18\x03 \x01(\rR\ftotalAttempt\x12%\n" +
	"\x0eseconds_waited\x18\x04 \x01(\rR\rsecondsWaited\"\xc1\x01\n" +
	"&CMsgGameMatchSignOutPermissionResponse\x124\n" +
	"\x12permission_granted\x18\x01 \x01(\b:\x05falseR\x11permissionGranted\x12.\n" +
	"\x0fabandon_signout\x18\x02 \x01(\b:\x05falseR\x0eabandonSignout\x121\n" +
	"\x13retry_delay_seconds\x18\x03 \x01(\r:\x010R\x11retryDelaySeconds\"\xde\x01\n" +
	"!CMsgGameMatchSignOutEventGameData\x12:\n" +
	"\bevent_id\x18\x01 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12\x1b\n" +
	"\tgame_name\x18\x02 \x01(\tR\bgameName\x12\x19\n" +
	"\bmap_name\x18\x03 \x01(\tR\amapName\x12&\n" +
	"\x0fevent_game_data\x18\x04 \x01(\fR\reventGameData\x12\x1d\n" +
	"\n" +
	"start_time\x18\x05 \x01(\rR\tstartTime\"\xb4\t\n" +
	"\x1cCMsgGameMatchSignOutPerfData\x12,\n" +
	"\x12average_frame_time\x18\x01 \x03(\x02R\x10averageFrameTime\x12$\n" +
	"\x0emax_frame_time\x18\x02 \x03(\x02R\fmaxFrameTime\x129\n" +
	"\x19server_average_frame_time\x18\x03 \x01(\x02R\x16serverAverageFrameTime\x121\n" +
	"\x15server_max_frame_time\x18\x04 \x01(\x02R\x12serverMaxFrameTime\x120\n" +
	"\x14average_compute_time\x18\x05 \x03(\x02R\x12averageComputeTime\x12(\n" +
	"\x10max_compute_time\x18\x06 \x03(\x02R\x0emaxComputeTime\x127\n" +
	"\x18average_client_tick_time\x18\a \x03(\x02R\x15averageClientTickTime\x12/\n" +
	"\x14max_client_tick_time\x18\b \x03(\x02R\x11maxClientTickTime\x12?\n" +
	"\x1caverage_client_simulate_time\x18\t \x03(\x02R\x19averageClientSimulateTime\x127\n" +
	"\x18max_client_simulate_time\x18\n" +
	" \x03(\x02R\x15maxClientSimulateTime\x12.\n" +
	"\x13average_output_time\x18\v \x03(\x02R\x11averageOutputTime\x12&\n" +
	"\x0fmax_output_time\x18\f \x03(\x02R\rmaxOutputTime\x12Z\n" +
	"+average_wait_for_rendering_to_complete_time\x18\r \x03(\x02R%averageWaitForRenderingToCompleteTime\x12R\n" +
	"'max_wait_for_rendering_to_complete_time\x18\x0e \x03(\x02R!maxWaitForRenderingToCompleteTime\x12*\n" +
	"\x11average_swap_time\x18\x0f \x03(\x02R\x0faverageSwapTime\x12\"\n" +
	"\rmax_swap_time\x18\x10 \x03(\x02R\vmaxSwapTime\x129\n" +
	"\x19average_frame_update_time\x18\x11 \x03(\x02R\x16averageFrameUpdateTime\x121\n" +
	"\x15max_frame_update_time\x18\x12 \x03(\x02R\x12maxFrameUpdateTime\x12*\n" +
	"\x11average_idle_time\x18\x13 \x03(\x02R\x0faverageIdleTime\x12\"\n" +
	"\rmax_idle_time\x18\x14 \x03(\x02R\vmaxIdleTime\x12A\n" +
	"\x1daverage_input_processing_time\x18\x15 \x03(\x02R\x1aaverageInputProcessingTime\x129\n" +
	"\x19max_input_processing_time\x18\x16 \x03(\x02R\x16maxInputProcessingTime\"`\n" +
	"\x1bCMsgGameMatchSignOutBanData\x12\x1b\n" +
	"\thero_bans\x18\x01 \x03(\x05R\bheroBans\x12$\n" +
	"\x0ehero_ban_votes\x18\x02 \x03(\x05R\fheroBanVotes\"\xcc\x0e\n" +
	"\x1cCMsgDOTALiveScoreboardUpdate\x12#\n" +
	"\rtournament_id\x18\x01 \x01(\rR\ftournamentId\x12,\n" +
	"\x12tournament_game_id\x18\x02 \x01(\rR\x10tournamentGameId\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x02R\bduration\x12\x1d\n" +
	"\n" +
	"hltv_delay\x18\x04 \x01(\x05R\thltvDelay\x12H\n" +
	"\tteam_good\x18\x05 \x01(\v2+.protocol.CMsgDOTALiveScoreboardUpdate.TeamR\bteamGood\x12F\n" +
	"\bteam_bad\x18\x06 \x01(\v2+.protocol.CMsgDOTALiveScoreboardUpdate.TeamR\ateamBad\x120\n" +
	"\x14roshan_respawn_timer\x18\a \x01(\rR\x12roshanRespawnTimer\x12\x1b\n" +
	"\tleague_id\x18\b \x01(\rR\bleagueId\x12\x19\n" +
	"\bmatch_id\x18\t \x01(\x04R\amatchId\x1a\xa1\v\n" +
	"\x04Team\x12L\n" +
	"\aplayers\x18\x01 \x03(\v22.protocol.CMsgDOTALiveScoreboardUpdate.Team.PlayerR\aplayers\x12\x14\n" +
	"\x05score\x18\x02 \x01(\rR\x05score\x12\x1f\n" +
	"\vtower_state\x18\x03 \x01(\rR\n" +
	"towerState\x12%\n" +
	"\x0ebarracks_state\x18\x04 \x01(\rR\rbarracksState\x12\x1d\n" +
	"\n" +
	"hero_picks\x18\x05 \x03(\x05R\theroPicks\x12\x1b\n" +
	"\thero_bans\x18\x06 \x03(\x05R\bheroBans\x1a\xb0\t\n" +
	"\x06Player\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\rR\n" +
	"playerSlot\x12\x1f\n" +
	"\vplayer_name\x18\x02 \x01(\tR\n" +
	"playerName\x12\x1b\n" +
	"\thero_name\x18\x03 \x01(\tR\bheroName\x12\x17\n" +
	"\ahero_id\x18\x04 \x01(\x05R\x06heroId\x12\x14\n" +
	"\x05kills\x18\x05 \x01(\rR\x05kills\x12\x16\n" +
	"\x06deaths\x18\x06 \x01(\rR\x06deaths\x12\x18\n" +
	"\aassists\x18\a \x01(\rR\aassists\x12\x1b\n" +
	"\tlast_hits\x18\b \x01(\rR\blastHits\x12\x16\n" +
	"\x06denies\x18\t \x01(\rR\x06denies\x12\x12\n" +
	"\x04gold\x18\n" +
	" \x01(\rR\x04gold\x12\x14\n" +
	"\x05level\x18\v \x01(\rR\x05level\x12 \n" +
	"\fgold_per_min\x18\f \x01(\x02R\n" +
	"goldPerMin\x12\x1c\n" +
	"\n" +
	"xp_per_min\x18\r \x01(\x02R\bxpPerMin\x12\x8b\x01\n" +
	"\x0eultimate_state\x18\x0e \x01(\x0e2D.protocol.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState:\x1ek_EDOTAUltimateStateNotLearnedR\rultimateState\x12+\n" +
	"\x11ultimate_cooldown\x18\x0f \x01(\x02R\x10ultimateCooldown\x12\x18\n" +
	"\x05item0\x18\x10 \x01(\x05:\x02-1R\x05item0\x12\x18\n" +
	"\x05item1\x18\x11 \x01(\x05:\x02-1R\x05item1\x12\x18\n" +
	"\x05item2\x18\x12 \x01(\x05:\x02-1R\x05item2\x12\x18\n" +
	"\x05item3\x18\x13 \x01(\x05:\x02-1R\x05item3\x12\x18\n" +
	"\x05item4\x18\x14 \x01(\x05:\x02-1R\x05item4\x12\x18\n" +
	"\x05item5\x18\x15 \x01(\x05:\x02-1R\x05item5\x12#\n" +
	"\rrespawn_timer\x18\x16 \x01(\rR\frespawnTimer\x12\x1d\n" +
	"\n" +
	"account_id\x18\x17 \x01(\rR\taccountId\x12\x1d\n" +
	"\n" +
	"position_x\x18\x18 \x01(\x02R\tpositionX\x12\x1d\n" +
	"\n" +
	"position_y\x18\x19 \x01(\x02R\tpositionY\x12\x1b\n" +
	"\tnet_worth\x18\x1a \x01(\rR\bnetWorth\x12\\\n" +
	"\tabilities\x18\x1b \x03(\v2>.protocol.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbilityR\tabilities\x1aU\n" +
	"\vHeroAbility\x12!\n" +
	"\n" +
	"ability_id\x18\x01 \x01(\x05:\x02-1R\tabilityId\x12#\n" +
	"\rability_level\x18\x02 \x01(\rR\fabilityLevel\"\x9b\x01\n" +
	"\x11DOTAUltimateState\x12\"\n" +
	"\x1ek_EDOTAUltimateStateNotLearned\x10\x00\x12 \n" +
	"\x1ck_EDOTAUltimateStateCooldown\x10\x01\x12!\n" +
	"\x1dk_EDOTAUltimateStateNeedsMana\x10\x02\x12\x1d\n" +
	"\x19k_EDOTAUltimateStateReady\x10\x03\"\x92\x01\n" +
	")CMsgServerToGCRequestBatchPlayerResources\x12#\n" +
	"\vaccount_ids\x18\x01 \x03(\rB\x02\x10\x01R\n" +
	"accountIds\x12!\n" +
	"\n" +
	"rank_types\x18\x04 \x03(\rB\x02\x10\x01R\trankTypes\x12\x1d\n" +
	"\n" +
	"lobby_type\x18\x05 \x01(\x05R\tlobbyType\"\xf1\x04\n" +
	"1CMsgServerToGCRequestBatchPlayerResourcesResponse\x12\\\n" +
	"\aresults\x18\x06 \x03(\v2B.protocol.CMsgServerToGCRequestBatchPlayerResourcesResponse.ResultR\aresults\x1a\xdd\x03\n" +
	"\x06Result\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x12\n" +
	"\x04rank\x18\x04 \x01(\rR\x04rank\x12'\n" +
	"\x0frank_calibrated\x18\x05 \x01(\bR\x0erankCalibrated\x12!\n" +
	"\flow_priority\x18\x06 \x01(\bR\vlowPriority\x12\"\n" +
	"\ris_new_player\x18\a \x01(\bR\visNewPlayer\x12&\n" +
	"\x0fis_guide_player\x18\b \x01(\bR\risGuidePlayer\x12\x1d\n" +
	"\n" +
	"comm_level\x18\t \x01(\x05R\tcommLevel\x12%\n" +
	"\x0ebehavior_level\x18\n" +
	" \x01(\x05R\rbehaviorLevel\x12\x12\n" +
	"\x04wins\x18\v \x01(\x05R\x04wins\x12\x16\n" +
	"\x06losses\x18\f \x01(\x05R\x06losses\x12%\n" +
	"\x0esmurf_category\x18\r \x01(\x05R\rsmurfCategory\x12\x1d\n" +
	"\n" +
	"comm_score\x18\x0e \x01(\x05R\tcommScore\x12%\n" +
	"\x0ebehavior_score\x18\x0f \x01(\x05R\rbehaviorScore\x12)\n" +
	"\x10rank_uncertainty\x18\x10 \x01(\x05R\x0frankUncertainty\"s\n" +
	"\x1dCMsgDOTAPlayerFailedToConnect\x12%\n" +
	"\x0efailed_loaders\x18\x01 \x03(\x06R\rfailedLoaders\x12+\n" +
	"\x11abandoned_loaders\x18\x02 \x03(\x06R\x10abandonedLoaders\"\xd7\x02\n" +
	"\x14CMsgGCToRelayConnect\x121\n" +
	"\x15source_tv_public_addr\x18\x01 \x01(\rR\x12sourceTvPublicAddr\x123\n" +
	"\x16source_tv_private_addr\x18\x02 \x01(\rR\x13sourceTvPrivateAddr\x12$\n" +
	"\x0esource_tv_port\x18\x03 \x01(\rR\fsourceTvPort\x12/\n" +
	"\x14game_server_steam_id\x18\x04 \x01(\x04R\x11gameServerSteamId\x12!\n" +
	"\fparent_count\x18\x05 \x01(\rR\vparentCount\x121\n" +
	"\x15tv_unique_secret_code\x18\x06 \x01(\x06R\x12tvUniqueSecretCode\x12*\n" +
	"\x11source_tv_steamid\x18\a \x01(\x06R\x0fsourceTvSteamid\"F\n" +
	"\x1fCMsgGCGCToLANServerRelayConnect\x12#\n" +
	"\rrelay_steamid\x18\x01 \x01(\x06R\frelaySteamid\"7\n" +
	"\x16CMsgGCBanStatusRequest\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\"\xaa\x01\n" +
	"\x17CMsgGCBanStatusResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\rR\x06result\x12!\n" +
	"\flow_priority\x18\x02 \x01(\bR\vlowPriority\x12(\n" +
	"\x10text_chat_banned\x18\x03 \x01(\bR\x0etextChatBanned\x12*\n" +
	"\x11voice_chat_banned\x18\x04 \x01(\bR\x0fvoiceChatBanned\"\x87\x04\n" +
	"\x17CMsgTournamentItemEvent\x12*\n" +
	"\x11killer_account_id\x18\x01 \x01(\aR\x0fkillerAccountId\x12*\n" +
	"\x11victim_account_id\x18\x02 \x01(\aR\x0fvictimAccountId\x12N\n" +
	"\n" +
	"event_type\x18\x03 \x01(\x0e2\x1f.protocol.DOTA_TournamentEvents:\x0eTE_FIRST_BLOODR\teventType\x12\x19\n" +
	"\btv_delay\x18\x04 \x01(\x05R\atvDelay\x12\x1b\n" +
	"\tdota_time\x18\x05 \x01(\x05R\bdotaTime\x12\x1f\n" +
	"\vreplay_time\x18\x06 \x01(\x02R\n" +
	"replayTime\x12\x1b\n" +
	"\tloot_list\x18\a \x01(\tR\blootList\x12\x1d\n" +
	"\n" +
	"event_team\x18\b \x01(\rR\teventTeam\x12(\n" +
	"\x10multi_kill_count\x18\t \x01(\rR\x0emultiKillCount\x12!\n" +
	"\fwinner_score\x18\n" +
	" \x01(\rR\vwinnerScore\x12\x1f\n" +
	"\vloser_score\x18\v \x01(\rR\n" +
	"loserScore\x12A\n" +
	"\fhero_statues\x18\f \x03(\v2\x1e.protocol.CProtoItemHeroStatueR\vheroStatues\"\x9a\x01\n" +
	"\x1fCMsgTournamentItemEventResponse\x12N\n" +
	"\n" +
	"event_type\x18\x01 \x01(\x0e2\x1f.protocol.DOTA_TournamentEvents:\x0eTE_FIRST_BLOODR\teventType\x12'\n" +
	"\x0fviewers_granted\x18\x06 \x01(\rR\x0eviewersGranted\",\n" +
	"\x0fCMsgTeamFanfare\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\"m\n" +
	"\x17CMsgResponseTeamFanfare\x12)\n" +
	"\x10fanfare_goodguys\x18\x01 \x01(\rR\x0ffanfareGoodguys\x12'\n" +
	"\x0ffanfare_badguys\x18\x02 \x01(\rR\x0efanfareBadguys\"\xad\x04\n" +
	"\x18CMsgDOTAAwardEventPoints\x12Q\n" +
	"\faward_points\x18\x01 \x03(\v2..protocol.CMsgDOTAAwardEventPoints.AwardPointsR\vawardPoints\x12\x19\n" +
	"\bmatch_id\x18\x02 \x01(\x04R\amatchId\x12:\n" +
	"\bevent_id\x18\x04 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\rR\ttimestamp\x12!\n" +
	"\faudit_action\x18\x06 \x01(\rR\vauditAction\x1a\xa5\x02\n" +
	"\vAwardPoints\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x16\n" +
	"\x06points\x18\x02 \x01(\x05R\x06points\x12%\n" +
	"\x0epremium_points\x18\x03 \x01(\x05R\rpremiumPoints\x12$\n" +
	"\x0etrade_ban_time\x18\x05 \x01(\rR\ftradeBanTime\x12N\n" +
	" eligible_for_periodic_adjustment\x18\x06 \x01(\b:\x05falseR\x1deligibleForPeriodicAdjustment\x12B\n" +
	"\x1epoint_cap_periodic_resource_id\x18\a \x01(\rR\x1apointCapPeriodicResourceId\"]\n" +
	"\x19CMsgGCToServerPingRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\x06R\trequestId\x12!\n" +
	"\frequest_time\x18\x02 \x01(\x04R\vrequestTime\"x\n" +
	"\x1aCMsgGCToServerPingResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\x06R\trequestId\x12!\n" +
	"\frequest_time\x18\x02 \x01(\x04R\vrequestTime\x12\x18\n" +
	"\acluster\x18\x03 \x01(\rR\acluster\"\xac\x03\n" +
	"\"CMsgServerToGCMatchConnectionStats\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12\x1b\n" +
	"\tregion_id\x18\x02 \x01(\rR\bregionId\x12\x1b\n" +
	"\tleague_id\x18\x03 \x01(\rR\bleagueId\x12M\n" +
	"\aplayers\x18\x04 \x03(\v23.protocol.CMsgServerToGCMatchConnectionStats.PlayerR\aplayers\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x05 \x01(\rR\tclusterId\x1a\xc2\x01\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x0e\n" +
	"\x02ip\x18\x02 \x01(\aR\x02ip\x12\x1e\n" +
	"\vavg_ping_ms\x18\x03 \x01(\rR\tavgPingMs\x12\x1f\n" +
	"\vpacket_loss\x18\x05 \x01(\x02R\n" +
	"packetLoss\x12%\n" +
	"\x0eping_deviation\x18\x06 \x01(\x02R\rpingDeviation\x12!\n" +
	"\ffull_resends\x18\a \x01(\rR\vfullResends\"K\n" +
	" CMsgServerGCUpdateSpectatorCount\x12'\n" +
	"\x0fspectator_count\x18\x01 \x01(\rR\x0espectatorCount\"\xca\x02\n" +
	"\x14CSerializedCombatLog\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12I\n" +
	"\n" +
	"dictionary\x18\x02 \x01(\v2).protocol.CSerializedCombatLog.DictionaryR\n" +
	"dictionary\x12:\n" +
	"\aentries\x18\x03 \x03(\v2 .protocol.CMsgDOTACombatLogEntryR\aentries\x1a\x90\x01\n" +
	"\n" +
	"Dictionary\x12N\n" +
	"\astrings\x18\x01 \x03(\v24.protocol.CSerializedCombatLog.Dictionary.DictStringR\astrings\x1a2\n" +
	"\n" +
	"DictString\x12\x0e\n" +
	"\x02id\x18\x01 \x02(\rR\x02id\x12\x14\n" +
	"\x05value\x18\x02 \x02(\tR\x05value\"\xe0\x02\n" +
	" CMsgServerToGCVictoryPredictions\x12K\n" +
	"\arecords\x18\x01 \x03(\v21.protocol.CMsgServerToGCVictoryPredictions.RecordR\arecords\x1aD\n" +
	"\x0ePredictionItem\x12\x17\n" +
	"\aitem_id\x18\x01 \x01(\x04R\x06itemId\x12\x19\n" +
	"\bitem_def\x18\x02 \x01(\rR\aitemDef\x1a\xa8\x01\n" +
	"\x06Record\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x19\n" +
	"\bitem_ids\x18\x05 \x03(\x04R\aitemIds\x12d\n" +
	"\x10prediction_items\x18\x06 \x03(\v29.protocol.CMsgServerToGCVictoryPredictions.PredictionItemR\x0fpredictionItems\"\x1d\n" +
	"\x1bCMsgServerToGCRequestStatus\"B\n" +
	"$CMsgServerToGCRequestStatus_Response\x12\x1a\n" +
	"\bresponse\x18\x01 \x01(\rR\bresponse\"}\n" +
	"\x1fCMsgGCToServerEvaluateToxicChat\x12*\n" +
	"\x11target_account_id\x18\x01 \x01(\rR\x0ftargetAccountId\x12.\n" +
	"\x13reporter_account_id\x18\x02 \x01(\rR\x11reporterAccountId\"\xca\x01\n" +
	"\x1fCMsgServerToGCEvaluateToxicChat\x12*\n" +
	"\x11target_account_id\x18\x01 \x01(\rR\x0ftargetAccountId\x12.\n" +
	"\x13reporter_account_id\x18\x02 \x01(\rR\x11reporterAccountId\x12\x19\n" +
	"\bmatch_id\x18\x03 \x01(\x06R\amatchId\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x03(\rR\ttimestamp\x12\x12\n" +
	"\x04line\x18\x05 \x03(\tR\x04line\"\xee\x01\n" +
	"'CMsgServerToGCEvaluateToxicChatResponse\x12*\n" +
	"\x11target_account_id\x18\x01 \x01(\rR\x0ftargetAccountId\x12.\n" +
	"\x13reporter_account_id\x18\x02 \x01(\rR\x11reporterAccountId\x12\x1d\n" +
	"\n" +
	"ban_reason\x18\x03 \x01(\rR\tbanReason\x12!\n" +
	"\fban_duration\x18\x04 \x01(\rR\vbanDuration\x12%\n" +
	"\x0etoxicity_score\x18\x05 \x01(\x02R\rtoxicityScore\"\xe8\x02\n" +
	"\x1fCMsgSignOutAssassinMiniGameInfo\x12'\n" +
	"\x0fwinning_players\x18\x01 \x03(\x06R\x0ewinningPlayers\x12%\n" +
	"\x0elosing_players\x18\x02 \x03(\x06R\rlosingPlayers\x12#\n" +
	"\rarcana_owners\x18\x03 \x03(\x06R\farcanaOwners\x12!\n" +
	"\fassassin_won\x18\x04 \x01(\bR\vassassinWon\x12$\n" +
	"\x0etarget_hero_id\x18\x05 \x01(\x05R\ftargetHeroId\x12-\n" +
	"\x12contract_completed\x18\x06 \x01(\bR\x11contractCompleted\x124\n" +
	"\x16contract_complete_time\x18\a \x01(\x02R\x14contractCompleteTime\x12\"\n" +
	"\rpa_is_radiant\x18\b \x01(\bR\vpaIsRadiant\"\x8f\x02\n" +
	"\x1bCMsgServerToGCKillSummaries\x12%\n" +
	"\x0eingameevent_id\x18\x01 \x01(\rR\ringameeventId\x12O\n" +
	"\tsummaries\x18\x02 \x03(\v21.protocol.CMsgServerToGCKillSummaries.KillSummaryR\tsummaries\x1ax\n" +
	"\vKillSummary\x12$\n" +
	"\x0ekiller_hero_id\x18\x01 \x01(\rR\fkillerHeroId\x12$\n" +
	"\x0evictim_hero_id\x18\x02 \x01(\rR\fvictimHeroId\x12\x1d\n" +
	"\n" +
	"kill_count\x18\x03 \x01(\rR\tkillCount\"X\n" +
	"\x1eCMsgServerToGCLockCharmTrading\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x17\n" +
	"\aitem_id\x18\x02 \x01(\x04R\x06itemId\"\xe2\x03\n" +
	" CMsgSignOutUpdatePlayerChallenge\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12R\n" +
	"\tcompleted\x18\x02 \x03(\v24.protocol.CMsgSignOutUpdatePlayerChallenge.ChallengeR\tcompleted\x12P\n" +
	"\brerolled\x18\x03 \x03(\v24.protocol.CMsgSignOutUpdatePlayerChallenge.ChallengeR\brerolled\x12\x19\n" +
	"\bmatch_id\x18\x04 \x01(\x04R\amatchId\x12\x17\n" +
	"\ahero_id\x18\x05 \x01(\x05R\x06heroId\x1a\xc4\x01\n" +
	"\tChallenge\x12:\n" +
	"\bevent_id\x18\x01 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12\x17\n" +
	"\aslot_id\x18\x02 \x01(\rR\x06slotId\x12\x1f\n" +
	"\vsequence_id\x18\x03 \x01(\rR\n" +
	"sequenceId\x12\x1a\n" +
	"\bprogress\x18\x04 \x01(\rR\bprogress\x12%\n" +
	"\x0echallenge_rank\x18\x05 \x01(\rR\rchallengeRank\"\x92\x01\n" +
	"#CMsgServerToGCRerollPlayerChallenge\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12L\n" +
	"\n" +
	"reroll_msg\x18\x02 \x01(\v2-.protocol.CMsgClientToGCRerollPlayerChallengeR\trerollMsg\"\xd6\x02\n" +
	"\x0eCMsgSpendWager\x129\n" +
	"\aplayers\x18\x01 \x03(\v2\x1f.protocol.CMsgSpendWager.PlayerR\aplayers\x12:\n" +
	"\bevent_id\x18\x02 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\rR\ttimestamp\x12\x19\n" +
	"\bmatch_id\x18\x04 \x01(\x04R\amatchId\x12&\n" +
	"\x0fserver_steam_id\x18\x05 \x01(\x04R\rserverSteamId\x1al\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x14\n" +
	"\x05wager\x18\x02 \x01(\rR\x05wager\x12-\n" +
	"\x13wager_token_item_id\x18\x03 \x01(\x04R\x10wagerTokenItemId\"\xa1\x03\n" +
	"\x12CMsgSignOutXPCoins\x12=\n" +
	"\aplayers\x18\x01 \x03(\v2#.protocol.CMsgSignOutXPCoins.PlayerR\aplayers\x12:\n" +
	"\bevent_id\x18\x02 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12\x19\n" +
	"\bmatch_id\x18\x03 \x01(\x04R\amatchId\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\rR\ttimestamp\x1a\xd6\x01\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x1b\n" +
	"\txp_gained\x18\x02 \x01(\rR\bxpGained\x12\x1f\n" +
	"\vcoins_spent\x18\x03 \x01(\rR\n" +
	"coinsSpent\x12-\n" +
	"\x13wager_token_item_id\x18\x04 \x01(\x04R\x10wagerTokenItemId\x12\x1d\n" +
	"\n" +
	"rank_wager\x18\x05 \x01(\rR\trankWager\x12!\n" +
	"\fwager_streak\x18\x06 \x01(\rR\vwagerStreak\"\xe1\x02\n" +
	"\x13CMsgSignOutBounties\x12@\n" +
	"\bbounties\x18\x01 \x03(\v2$.protocol.CMsgSignOutBounties.BountyR\bbounties\x12:\n" +
	"\bevent_id\x18\x02 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12\x19\n" +
	"\bmatch_id\x18\x03 \x01(\x04R\amatchId\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\rR\ttimestamp\x1a\x92\x01\n" +
	"\x06Bounty\x12*\n" +
	"\x11issuer_account_id\x18\x01 \x01(\rR\x0fissuerAccountId\x120\n" +
	"\x14completer_account_id\x18\x02 \x01(\rR\x12completerAccountId\x12*\n" +
	"\x11target_account_id\x18\x03 \x01(\rR\x0ftargetAccountId\"\xad\x02\n" +
	" CMsgSignOutCommunityGoalProgress\x12:\n" +
	"\bevent_id\x18\x01 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12h\n" +
	"\x10event_increments\x18\x02 \x03(\v2=.protocol.CMsgSignOutCommunityGoalProgress.EventGoalIncrementR\x0feventIncrements\x1ac\n" +
	"\x12EventGoalIncrement\x12\"\n" +
	"\revent_goal_id\x18\x01 \x01(\rR\veventGoalId\x12)\n" +
	"\x10increment_amount\x18\x02 \x01(\rR\x0fincrementAmount\"\x8c\x01\n" +
	"3CMsgServerToGCCloseCompendiumInGamePredictionVoting\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12\x1d\n" +
	"\n" +
	"hltv_delay\x18\x02 \x01(\rR\thltvDelay\x12\x1b\n" +
	"\tleague_id\x18\x03 \x01(\rR\bleagueId\"U\n" +
	";CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\x93\x03\n" +
	"/CMsgServerToGCCompendiumInGamePredictionResults\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12d\n" +
	"\aresults\x18\x02 \x03(\v2J.protocol.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResultR\aresults\x12\x1b\n" +
	"\tleague_id\x18\x03 \x01(\rR\bleagueId\x12$\n" +
	"\x0eleague_node_id\x18\x04 \x01(\rR\fleagueNodeId\x1a\x9b\x01\n" +
	"\x10PredictionResult\x12#\n" +
	"\rprediction_id\x18\x01 \x01(\rR\fpredictionId\x12)\n" +
	"\x10prediction_value\x18\x02 \x01(\rR\x0fpredictionValue\x127\n" +
	"\x18prediction_value_is_mask\x18\x03 \x01(\bR\x15predictionValueIsMask\"\x91\x02\n" +
	"/CMsgServerToGCCompendiumChosenInGamePredictions\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12s\n" +
	"\x12predictions_chosen\x18\x02 \x03(\v2D.protocol.CMsgServerToGCCompendiumChosenInGamePredictions.PredictionR\x11predictionsChosen\x12\x1b\n" +
	"\tleague_id\x18\x03 \x01(\rR\bleagueId\x1a1\n" +
	"\n" +
	"Prediction\x12#\n" +
	"\rprediction_id\x18\x01 \x01(\rR\fpredictionId\"\x82\x01\n" +
	"+CMsgGCToGCCompendiumInGamePredictionResults\x12S\n" +
	"\aresults\x18\x01 \x01(\v29.protocol.CMsgServerToGCCompendiumInGamePredictionResultsR\aresults\"\xcc\x05\n" +
	",CMsgServerToGCMatchPlayerItemPurchaseHistory\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12\x10\n" +
	"\x03mmr\x18\x02 \x01(\rR\x03mmr\x12W\n" +
	"\aplayers\x18\x03 \x03(\v2=.protocol.CMsgServerToGCMatchPlayerItemPurchaseHistory.PlayerR\aplayers\x1a\xc6\x01\n" +
	"\fItemPurchase\x12\x16\n" +
	"\x04item\x18\x01 \x01(\x05:\x02-1R\x04item\x12\x12\n" +
	"\x04gold\x18\x02 \x01(\rR\x04gold\x12\x1b\n" +
	"\tnet_worth\x18\x03 \x01(\rR\bnetWorth\x12\x1b\n" +
	"\tgame_time\x18\x04 \x01(\rR\bgameTime\x12'\n" +
	"\x0finventory_items\x18\x05 \x03(\x05R\x0einventoryItems\x12'\n" +
	"\x0ftalents_skilled\x18\a \x03(\bR\x0etalentsSkilled\x1a\xcc\x02\n" +
	"\x06Player\x12\x1f\n" +
	"\vplayer_slot\x18\x01 \x01(\rR\n" +
	"playerSlot\x12\x1d\n" +
	"\n" +
	"account_id\x18\x02 \x01(\rR\taccountId\x12\x17\n" +
	"\ahero_id\x18\x03 \x01(\x05R\x06heroId\x12&\n" +
	"\x0fallied_hero_ids\x18\x04 \x03(\x05R\ralliedHeroIds\x12$\n" +
	"\x0eenemy_hero_ids\x18\x05 \x03(\x05R\fenemyHeroIds\x12j\n" +
	"\x0eitem_purchases\x18\x06 \x03(\v2C.protocol.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchaseR\ritemPurchases\x12\x12\n" +
	"\x04lane\x18\a \x01(\rR\x04lane\x12\x1b\n" +
	"\tis_winner\x18\b \x01(\bR\bisWinner\"\xf3\x04\n" +
	"0CMsgServerToGCMatchPlayerNeutralItemEquipHistory\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12[\n" +
	"\aplayers\x18\x02 \x03(\v2A.protocol.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.PlayerR\aplayers\x1a\xca\x01\n" +
	"\tItemEquip\x12\x16\n" +
	"\x04item\x18\x01 \x01(\x05:\x02-1R\x04item\x12\x1b\n" +
	"\tgame_time\x18\x02 \x01(\rR\bgameTime\x12'\n" +
	"\x0finventory_items\x18\x03 \x03(\x05R\x0einventoryItems\x12'\n" +
	"\x0ftalents_skilled\x18\x04 \x03(\bR\x0etalentsSkilled\x126\n" +
	"\x17available_neutral_items\x18\x05 \x03(\x05R\x15availableNeutralItems\x1a\xf9\x01\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12&\n" +
	"\x0fallied_hero_ids\x18\x02 \x03(\x05R\ralliedHeroIds\x12$\n" +
	"\x0eenemy_hero_ids\x18\x03 \x03(\x05R\fenemyHeroIds\x12e\n" +
	"\vitem_equips\x18\x04 \x03(\v2D.protocol.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquipR\n" +
	"itemEquips\x12\x1b\n" +
	"\tis_winner\x18\x05 \x01(\bR\bisWinner\"\x93\t\n" +
	"\x1fCMsgServerToGCMatchStateHistory\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12\x1f\n" +
	"\vradiant_won\x18\x02 \x01(\bR\n" +
	"radiantWon\x12\x10\n" +
	"\x03mmr\x18\x03 \x01(\rR\x03mmr\x12W\n" +
	"\fmatch_states\x18\x04 \x03(\v24.protocol.CMsgServerToGCMatchStateHistory.MatchStateR\vmatchStates\x1a\x8d\x02\n" +
	"\vPlayerState\x12\x17\n" +
	"\ahero_id\x18\x01 \x01(\x05R\x06heroId\x12\x1b\n" +
	"\tnet_worth\x18\x02 \x01(\rR\bnetWorth\x12\x14\n" +
	"\x05level\x18\x03 \x01(\rR\x05level\x12\x16\n" +
	"\x06deaths\x18\x04 \x01(\rR\x06deaths\x12!\n" +
	"\frespawn_time\x18\x05 \x01(\rR\vrespawnTime\x12\x1f\n" +
	"\vhas_buyback\x18\x06 \x01(\bR\n" +
	"hasBuyback\x12\x1b\n" +
	"\thas_aegis\x18\a \x01(\bR\bhasAegis\x12\x1d\n" +
	"\n" +
	"has_rapier\x18\b \x01(\bR\thasRapier\x12\x1a\n" +
	"\bdistance\x18\t \x01(\rR\bdistance\x1a\xde\x03\n" +
	"\tTeamState\x12\x12\n" +
	"\x04team\x18\x01 \x01(\rR\x04team\x12`\n" +
	"\rplayer_states\x18\x02 \x03(\v25.protocol.CMsgServerToGCMatchStateHistory.PlayerStateB\x04\xe0\xe4\x1d\x05R\fplayerStates\x12.\n" +
	"\x10tower_health_pct\x18\x03 \x03(\rB\x04\xe0\xe4\x1d\vR\x0etowerHealthPct\x124\n" +
	"\x13barracks_health_pct\x18\x04 \x03(\rB\x04\xe0\xe4\x1d\x03R\x11barracksHealthPct\x12,\n" +
	"\x12ancient_health_pct\x18\x05 \x01(\rR\x10ancientHealthPct\x12%\n" +
	"\x0eglyph_cooldown\x18\x06 \x01(\rR\rglyphCooldown\x12\x14\n" +
	"\x05kills\x18\a \x01(\rR\x05kills\x12.\n" +
	"\x13creep_distance_safe\x18\b \x01(\rR\x11creepDistanceSafe\x12,\n" +
	"\x12creep_distance_mid\x18\t \x01(\rR\x10creepDistanceMid\x12,\n" +
	"\x12creep_distance_off\x18\n" +
	" \x01(\rR\x10creepDistanceOff\x1a\xd7\x01\n" +
	"\n" +
	"MatchState\x12\x1b\n" +
	"\tgame_time\x18\x01 \x01(\rR\bgameTime\x12X\n" +
	"\rradiant_state\x18\x02 \x01(\v23.protocol.CMsgServerToGCMatchStateHistory.TeamStateR\fradiantState\x12R\n" +
	"\n" +
	"dire_state\x18\x03 \x01(\v23.protocol.CMsgServerToGCMatchStateHistory.TeamStateR\tdireState\"\xa6\x01\n" +
	"\x1aCMsgMatchStateSteamMLEntry\x12U\n" +
	"\vmatch_state\x18\x01 \x01(\v24.protocol.CMsgServerToGCMatchStateHistory.MatchStateR\n" +
	"matchState\x12\x10\n" +
	"\x03mmr\x18\x02 \x01(\rR\x03mmr\x12\x1f\n" +
	"\vradiant_won\x18\x03 \x01(\bR\n" +
	"radiantWon\"\\\n" +
	"\x1dCMsgLaneSelectionSteamMLEntry\x12\x1f\n" +
	"\bhero_ids\x18\x01 \x03(\x05B\x04\xe0\xe4\x1d\n" +
	"R\aheroIds\x12\x1a\n" +
	"\x05lanes\x18\x02 \x03(\rB\x04\xe0\xe4\x1d\x06R\x05lanes\"\xe0\x01\n" +
	" CMsgAbilitySelectionSteamMLEntry\x12\x10\n" +
	"\x03mmr\x18\x01 \x01(\rR\x03mmr\x12\x17\n" +
	"\ahero_id\x18\x02 \x01(\x05R\x06heroId\x12*\n" +
	"\x0eenemy_hero_ids\x18\x03 \x03(\x05B\x04\xe0\xe4\x1d\x04R\fenemyHeroIds\x12\x12\n" +
	"\x04lane\x18\x04 \x01(\rR\x04lane\x12\"\n" +
	"\tabilities\x18\x05 \x03(\x05B\x04\xe0\xe4\x1d\x19R\tabilities\x12-\n" +
	"\x10selected_ability\x18\x06 \x01(\x05:\x02-1R\x0fselectedAbility\"\xf4\x01\n" +
	"#CMsgItemPurchasePregameSteamMLEntry\x12\x10\n" +
	"\x03mmr\x18\x01 \x01(\rR\x03mmr\x12\x12\n" +
	"\x04lane\x18\x02 \x01(\rR\x04lane\x12\x18\n" +
	"\abalance\x18\x03 \x01(\x02R\abalance\x12\x17\n" +
	"\ahero_id\x18\x04 \x01(\x05R\x06heroId\x12,\n" +
	"\x0fallied_hero_ids\x18\x05 \x03(\x05B\x04\xe0\xe4\x1d\x04R\ralliedHeroIds\x12*\n" +
	"\x0eenemy_hero_ids\x18\x06 \x03(\x05B\x04\xe0\xe4\x1d\x05R\fenemyHeroIds\x12\x1a\n" +
	"\x05items\x18\a \x03(\x05B\x04\xe0\xe4\x1d\tR\x05items\"\x8c\x02\n" +
	"\x1cCMsgItemPurchaseSteamMLEntry\x12\x10\n" +
	"\x03mmr\x18\x01 \x01(\rR\x03mmr\x12\x12\n" +
	"\x04lane\x18\x02 \x01(\rR\x04lane\x12\x17\n" +
	"\ahero_id\x18\x03 \x01(\x05R\x06heroId\x12,\n" +
	"\x0fallied_hero_ids\x18\x04 \x03(\x05B\x04\xe0\xe4\x1d\x04R\ralliedHeroIds\x12*\n" +
	"\x0eenemy_hero_ids\x18\x05 \x03(\x05B\x04\xe0\xe4\x1d\x05R\fenemyHeroIds\x12\x1a\n" +
	"\x05items\x18\x06 \x03(\x05B\x04\xe0\xe4\x1d\x14R\x05items\x127\n" +
	"\x15items_to_be_purchased\x18\a \x03(\x05B\x04\xe0\xe4\x1d\x14R\x12itemsToBePurchased\"\x90\x02\n" +
	"$CMsgItemPurchaseSequenceSteamMLEntry\x12\x10\n" +
	"\x03mmr\x18\x01 \x01(\rR\x03mmr\x12\x12\n" +
	"\x04lane\x18\x02 \x01(\rR\x04lane\x12\x17\n" +
	"\ahero_id\x18\x03 \x01(\x05R\x06heroId\x12,\n" +
	"\x0fallied_hero_ids\x18\x04 \x03(\x05B\x04\xe0\xe4\x1d\x04R\ralliedHeroIds\x12*\n" +
	"\x0eenemy_hero_ids\x18\x05 \x03(\x05B\x04\xe0\xe4\x1d\x05R\fenemyHeroIds\x12\x1a\n" +
	"\x05items\x18\x06 \x03(\x05B\x04\xe0\xe4\x1d\x14R\x05items\x123\n" +
	"\x14item_to_be_purchased\x18\a \x01(\x05:\x02-1R\x11itemToBePurchased\"\xd2\x01\n" +
	"%CMsgServerToGCCavernCrawlIsHeroActive\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\rR\aeventId\x12\x1d\n" +
	"\n" +
	"account_id\x18\x02 \x01(\rR\taccountId\x127\n" +
	"\x15preferred_map_variant\x18\x03 \x01(\r:\x03255R\x13preferredMapVariant\x12\x17\n" +
	"\ahero_id\x18\x04 \x01(\x05R\x06heroId\x12\x1d\n" +
	"\n" +
	"turbo_mode\x18\x05 \x01(\bR\tturboMode\"\x9d\x05\n" +
	"$CMsgServerToGCPlayerChallengeHistory\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12!\n" +
	"\faverage_rank\x18\x02 \x01(\rR\vaverageRank\x12k\n" +
	"\x11challenge_records\x18\x03 \x03(\v2>.protocol.CMsgServerToGCPlayerChallengeHistory.PlayerChallengeR\x10challengeRecords\x1a\xc9\x03\n" +
	"\x0fPlayerChallenge\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12s\n" +
	"\x0echallenge_type\x18\x02 \x01(\x0e2%.protocol.EPlayerChallengeHistoryType:%k_EPlayerChallengeHistoryType_InvalidR\rchallengeType\x12#\n" +
	"\rchallenge_id1\x18\x03 \x01(\rR\fchallengeId1\x12#\n" +
	"\rchallenge_id2\x18\x04 \x01(\rR\fchallengeId2\x120\n" +
	"\x14progress_value_start\x18\x05 \x01(\rR\x12progressValueStart\x12,\n" +
	"\x12progress_value_end\x18\x06 \x01(\rR\x10progressValueEnd\x12\x19\n" +
	"\bteam_won\x18\a \x01(\bR\ateamWon\x12\x1d\n" +
	"\n" +
	"audit_data\x18\b \x01(\x04R\tauditData\x12\x17\n" +
	"\ahero_id\x18\t \x01(\x05R\x06heroId\x12%\n" +
	"\x0erank_completed\x18\n" +
	" \x01(\rR\rrankCompleted\"\xb0\x03\n" +
	"-CMsgServerToGCCavernCrawlIsHeroActiveResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\x12$\n" +
	"\vmap_variant\x18\x05 \x01(\r:\x03255R\n" +
	"mapVariant\x12-\n" +
	"\x12potential_winnings\x18\x02 \x01(\rR\x11potentialWinnings\x12c\n" +
	"\vmap_results\x18\x03 \x03(\v2B.protocol.CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResultsR\n" +
	"mapResults\x12A\n" +
	"\x1dpotential_plus_shard_winnings\x18\x04 \x01(\rR\x1apotentialPlusShardWinnings\x1aj\n" +
	"\n" +
	"MapResults\x12/\n" +
	"\x11path_id_completed\x18\x01 \x01(\r:\x03255R\x0fpathIdCompleted\x12+\n" +
	"\x0froom_id_claimed\x18\x02 \x01(\r:\x03255R\rroomIdClaimed\"\xd8\x02\n" +
	"\x14CMsgNeutralItemStats\x12O\n" +
	"\rneutral_items\x18\x01 \x03(\v2*.protocol.CMsgNeutralItemStats.NeutralItemR\fneutralItems\x1a\xee\x01\n" +
	"\vNeutralItem\x12\x1b\n" +
	"\aitem_id\x18\x01 \x01(\x05:\x02-1R\x06itemId\x12!\n" +
	"\ftime_dropped\x18\x02 \x01(\rR\vtimeDropped\x12\x12\n" +
	"\x04team\x18\x03 \x01(\rR\x04team\x12,\n" +
	"\x12time_last_equipped\x18\x04 \x01(\rR\x10timeLastEquipped\x120\n" +
	"\x14time_last_unequipped\x18\x05 \x01(\rR\x12timeLastUnequipped\x12+\n" +
	"\x11duration_equipped\x18\x06 \x01(\rR\x10durationEquipped\"\xd9\x01\n" +
	"\x1fCMsgGCToServerLobbyHeroBanRates\x12Q\n" +
	"\bban_data\x18\x01 \x03(\v26.protocol.CMsgGCToServerLobbyHeroBanRates.HeroBanEntryR\abanData\x1ac\n" +
	"\fHeroBanEntry\x12\x17\n" +
	"\ahero_id\x18\x01 \x01(\x05R\x06heroId\x12\x1b\n" +
	"\tban_count\x18\x02 \x01(\rR\bbanCount\x12\x1d\n" +
	"\n" +
	"pick_count\x18\x03 \x01(\rR\tpickCount\"\xa8\x03\n" +
	" CMsgSignOutGuildContractProgress\x12d\n" +
	"\x10player_contracts\x18\x01 \x03(\v29.protocol.CMsgSignOutGuildContractProgress.PlayerContractR\x0fplayerContracts\x1ar\n" +
	"\x1cCompletedGuildEventContracts\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\rR\aguildId\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\rR\aeventId\x12\x1c\n" +
	"\tcontracts\x18\x03 \x03(\x04R\tcontracts\x1a\xa9\x01\n" +
	"\x0ePlayerContract\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12x\n" +
	"\x13completed_contracts\x18\x02 \x03(\v2G.protocol.CMsgSignOutGuildContractProgress.CompletedGuildEventContractsR\x12completedContracts\"\xe9\x03\n" +
	"!CMsgSignOutGuildChallengeProgress\x12}\n" +
	"\x1bguild_challenges_progresses\x18\x01 \x03(\v2=.protocol.CMsgSignOutGuildChallengeProgress.ChallengeProgressR\x19guildChallengesProgresses\x1a\xc4\x02\n" +
	"\x11ChallengeProgress\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\rR\aguildId\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\rR\aeventId\x122\n" +
	"\x15challenge_instance_id\x18\x03 \x01(\rR\x13challengeInstanceId\x12@\n" +
	"\x1cchallenge_instance_timestamp\x18\x04 \x01(\rR\x1achallengeInstanceTimestamp\x126\n" +
	"\x17challenge_period_serial\x18\x05 \x01(\rR\x15challengePeriodSerial\x12\x1a\n" +
	"\bprogress\x18\x06 \x01(\rR\bprogress\x12/\n" +
	"\x13challenge_parameter\x18\a \x01(\rR\x12challengeParameter\"\x84\t\n" +
	"\x13CMsgSignOutMVPStats\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x04R\amatchId\x12\x1b\n" +
	"\tgame_mode\x18\x02 \x01(\rR\bgameMode\x12!\n" +
	"\fwinning_team\x18\x03 \x01(\rR\vwinningTeam\x12\x1b\n" +
	"\tgame_time\x18\x04 \x01(\x02R\bgameTime\x12>\n" +
	"\aplayers\x18\x05 \x03(\v2$.protocol.CMsgSignOutMVPStats.PlayerR\aplayers\x1a\xb4\a\n" +
	"\x06Player\x12\x17\n" +
	"\ateam_id\x18\x01 \x01(\rR\x06teamId\x12,\n" +
	"\x12team_networth_rank\x18\x02 \x01(\rR\x10teamNetworthRank\x12\x1d\n" +
	"\n" +
	"account_id\x18\x03 \x01(\rR\taccountId\x12\x1f\n" +
	"\vplayer_slot\x18  \x01(\rR\n" +
	"playerSlot\x12\x12\n" +
	"\x04rank\x18! \x01(\rR\x04rank\x12\x17\n" +
	"\ahero_id\x18\x04 \x01(\x05R\x06heroId\x12\x12\n" +
	"\x04role\x18\x05 \x01(\rR\x04role\x12\x14\n" +
	"\x05kills\x18\x06 \x01(\x05R\x05kills\x12\x16\n" +
	"\x06deaths\x18\a \x01(\x05R\x06deaths\x12\x18\n" +
	"\aassists\x18\b \x01(\x05R\aassists\x12\x0e\n" +
	"\x02xp\x18\t \x01(\x05R\x02xp\x12\x1b\n" +
	"\tnet_worth\x18\n" +
	" \x01(\x05R\bnetWorth\x12,\n" +
	"\x12support_gold_spent\x18\f \x01(\x05R\x10supportGoldSpent\x12!\n" +
	"\fwards_placed\x18\r \x01(\x05R\vwardsPlaced\x12=\n" +
	"\x1bwards_spotted_for_dewarding\x18\x0e \x01(\x05R\x18wardsSpottedForDewarding\x12#\n" +
	"\rcamps_stacked\x18\x0f \x01(\x05R\fcampsStacked\x12\x1b\n" +
	"\tlast_hits\x18\x10 \x01(\x05R\blastHits\x12\x16\n" +
	"\x06denies\x18\x11 \x01(\x05R\x06denies\x12'\n" +
	"\x0fbuilding_damage\x18\x13 \x01(\x05R\x0ebuildingDamage\x12!\n" +
	"\fother_damage\x18\x14 \x01(\x05R\votherDamage\x12!\n" +
	"\ftriple_kills\x18\x1a \x01(\x05R\vtripleKills\x12\x1a\n" +
	"\brampages\x18\x1c \x01(\x05R\brampages\x12\x1f\n" +
	"\vfirst_blood\x18\x1f \x01(\x05R\n" +
	"firstBlood\x12_\n" +
	"\x11kill_eater_events\x18\" \x03(\v23.protocol.CMsgSignOutMVPStats.Player.KillEaterEventR\x0fkillEaterEvents\x12-\n" +
	"\x12highest_killstreak\x18# \x01(\rR\x11highestKillstreak\x1aG\n" +
	"\x0eKillEaterEvent\x12\x1d\n" +
	"\n" +
	"event_type\x18\x01 \x02(\rR\teventType\x12\x16\n" +
	"\x06amount\x18\x02 \x02(\rR\x06amount\":\n" +
	" CMsgGCToServerRecordTrainingData\x12\x16\n" +
	"\x06enable\x18\x01 \x01(\bR\x06enable\"B\n" +
	"\x1fCMsgServerToGCGetGuildContracts\x12\x1f\n" +
	"\vaccount_ids\x18\x01 \x03(\rR\n" +
	"accountIds\"\xd6\x04\n" +
	"'CMsgServerToGCGetGuildContractsResponse\x12c\n" +
	"\x10player_contracts\x18\x01 \x03(\v28.protocol.CMsgServerToGCGetGuildContractsResponse.PlayerR\x0fplayerContracts\x1a\xe3\x01\n" +
	"\x0fContractDetails\x12\x1f\n" +
	"\vcontract_id\x18\x01 \x01(\x04R\n" +
	"contractId\x122\n" +
	"\x15challenge_instance_id\x18\x02 \x01(\rR\x13challengeInstanceId\x12/\n" +
	"\x13challenge_parameter\x18\x03 \x01(\rR\x12challengeParameter\x12%\n" +
	"\x0econtract_stars\x18\x04 \x01(\rR\rcontractStars\x12#\n" +
	"\rcontract_slot\x18\x05 \x01(\rR\fcontractSlot\x1a\xdf\x01\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12\x19\n" +
	"\bguild_id\x18\x02 \x01(\rR\aguildId\x12:\n" +
	"\bevent_id\x18\x03 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12_\n" +
	"\tcontracts\x18\x04 \x03(\v2A.protocol.CMsgServerToGCGetGuildContractsResponse.ContractDetailsR\tcontracts\"\xd4\x03\n" +
	"\x16CMsgMatchDiretideCandy\x12X\n" +
	"\x11player_candy_data\x18\x01 \x03(\v2,.protocol.CMsgMatchDiretideCandy.PlayerCandyR\x0fplayerCandyData\x12:\n" +
	"\bevent_id\x18\x02 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x1a<\n" +
	"\fCandyDetails\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\rR\x06amount\x12\x14\n" +
	"\x05audit\x18\x02 \x01(\rR\x05audit\x1a\xe5\x01\n" +
	"\vPlayerCandy\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12!\n" +
	"\fcandy_amount\x18\x03 \x01(\rR\vcandyAmount\x12<\n" +
	"\x1aconsumes_periodic_resource\x18\x04 \x01(\bR\x18consumesPeriodicResource\x12V\n" +
	"\x0fcandy_breakdown\x18\x05 \x03(\v2-.protocol.CMsgMatchDiretideCandy.CandyDetailsR\x0ecandyBreakdown\"\xbe\x01\n" +
	"\x17CMsgGCToServerCheerData\x12Q\n" +
	"\vcheer_types\x18\x01 \x03(\v20.protocol.CMsgGCToServerCheerData.CheerTypeCountR\n" +
	"cheerTypes\x1aP\n" +
	"\x0eCheerTypeCount\x12\x1d\n" +
	"\n" +
	"cheer_type\x18\x01 \x01(\rR\tcheerType\x12\x1f\n" +
	"\vcheer_count\x18\x02 \x01(\rR\n" +
	"cheerCount\"\x82\a\n" +
	"\x0fCMsgCheerConfig\x12%\n" +
	"\x0echeers_enabled\x18\x01 \x01(\bR\rcheersEnabled\x12+\n" +
	"\x12is_valid_league_id\x18\x02 \x01(\bR\x0fisValidLeagueId\x12'\n" +
	"\x0fwindow_duration\x18\x03 \x01(\x02R\x0ewindowDuration\x12.\n" +
	"\x13window_bucket_count\x18\x04 \x01(\rR\x11windowBucketCount\x121\n" +
	"\x15crowd_level_push_time\x18\x06 \x01(\x02R\x12crowdLevelPushTime\x12&\n" +
	"\x0fcrowd_level_low\x18\n" +
	" \x01(\rR\rcrowdLevelLow\x12,\n" +
	"\x12crowd_level_medium\x18\v \x01(\rR\x10crowdLevelMedium\x12(\n" +
	"\x10crowd_level_high\x18\f \x01(\rR\x0ecrowdLevelHigh\x12*\n" +
	"\x11cheer_scale_start\x18\r \x01(\x02R\x0fcheerScaleStart\x12*\n" +
	"\x11cheer_scale_speed\x18\x0e \x01(\x02R\x0fcheerScaleSpeed\x121\n" +
	"\x15cheer_scale_push_mark\x18\x0f \x01(\rR\x12cheerScalePushMark\x121\n" +
	"\x15cheer_scale_pull_mark\x18\x10 \x01(\rR\x12cheerScalePullMark\x12D\n" +
	" cheer_scale_pct_of_max_cps_clamp\x18\x11 \x01(\x02R\x1acheerScalePctOfMaxCpsClamp\x12;\n" +
	"\x1acheer_scale_dampener_value\x18\x15 \x01(\x02R\x17cheerScaleDampenerValue\x12B\n" +
	"\x1echeer_scale_dampener_lerp_time\x18\x16 \x01(\rR\x1acheerScaleDampenerLerpTime\x12.\n" +
	"\x13cheer_factor_bronze\x18\x12 \x01(\x02R\x11cheerFactorBronze\x12.\n" +
	"\x13cheer_factor_silver\x18\x13 \x01(\x02R\x11cheerFactorSilver\x12*\n" +
	"\x11cheer_factor_gold\x18\x14 \x01(\x02R\x0fcheerFactorGold\"Y\n" +
	"\x19CMsgGCToServerCheerConfig\x12<\n" +
	"\fcheer_config\x18\x01 \x01(\v2\x19.protocol.CMsgCheerConfigR\vcheerConfig\";\n" +
	"\x1cCMsgServerToGCGetCheerConfig\x12\x1b\n" +
	"\tleague_id\x18\x01 \x01(\rR\bleagueId\"d\n" +
	"$CMsgServerToGCGetCheerConfigResponse\x12<\n" +
	"\fcheer_config\x18\x02 \x01(\v2\x19.protocol.CMsgCheerConfigR\vcheerConfig\";\n" +
	"!CMsgGCToServerCheerScalesOverride\x12\x16\n" +
	"\x06scales\x18\x01 \x03(\x02R\x06scales\"\x1d\n" +
	"\x1bCMsgGCToServerGetCheerState\"\xa5\x01\n" +
	"\x12CMsgCheerTypeState\x12!\n" +
	"\fcheer_counts\x18\x01 \x03(\rR\vcheerCounts\x12$\n" +
	"\x0emax_per_second\x18\x02 \x01(\x02R\fmaxPerSecond\x12\x1f\n" +
	"\vcheer_scale\x18\x03 \x01(\x02R\n" +
	"cheerScale\x12%\n" +
	"\x0eoverride_scale\x18\x04 \x01(\x02R\roverrideScale\"\xa9\x01\n" +
	"\x0eCMsgCheerState\x12=\n" +
	"\vcheer_types\x18\x01 \x03(\v2\x1c.protocol.CMsgCheerTypeStateR\n" +
	"cheerTypes\x12.\n" +
	"\x13radiant_crowd_level\x18\x02 \x01(\rR\x11radiantCrowdLevel\x12(\n" +
	"\x10dire_crowd_level\x18\x03 \x01(\rR\x0edireCrowdLevel\"\x99\x01\n" +
	"\x1eCMsgServerToGCReportCheerState\x12<\n" +
	"\fcheer_config\x18\x01 \x01(\v2\x19.protocol.CMsgCheerConfigR\vcheerConfig\x129\n" +
	"\vcheer_state\x18\x02 \x01(\v2\x18.protocol.CMsgCheerStateR\n" +
	"cheerState\"A\n" +
	"\x1eCMsgServerToGCGetStickerHeroes\x12\x1f\n" +
	"\vaccount_ids\x18\x01 \x03(\rR\n" +
	"accountIds\"\xdd\x01\n" +
	"&CMsgServerToGCGetStickerHeroesResponse\x12Q\n" +
	"\aplayers\x18\x01 \x03(\v27.protocol.CMsgServerToGCGetStickerHeroesResponse.PlayerR\aplayers\x1a`\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x127\n" +
	"\bstickers\x18\x02 \x01(\v2\x1b.protocol.CMsgStickerHeroesR\bstickers\"\xb3\x01\n" +
	"\x17CMsgSteamLearnMatchInfo\x12\x1f\n" +
	"\vaverage_mmr\x18\x01 \x01(\rR\n" +
	"averageMmr\x12\x1f\n" +
	"\vradiant_won\x18\x02 \x01(\bR\n" +
	"radiantWon\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\rR\bduration\x12\x1b\n" +
	"\tgame_mode\x18\x04 \x01(\rR\bgameMode\x12\x1d\n" +
	"\n" +
	"lobby_type\x18\x05 \x01(\rR\tlobbyType\"\xd2\x01\n" +
	"\x1dCMsgSteamLearnMatchInfoPlayer\x12\x1f\n" +
	"\vaverage_mmr\x18\x01 \x01(\rR\n" +
	"averageMmr\x12\x19\n" +
	"\bteam_won\x18\x02 \x01(\bR\ateamWon\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\rR\bduration\x12\x1b\n" +
	"\tgame_mode\x18\x04 \x01(\rR\bgameMode\x12\x1d\n" +
	"\n" +
	"lobby_type\x18\x05 \x01(\rR\tlobbyType\x12\x1d\n" +
	"\n" +
	"player_mmr\x18\x06 \x01(\rR\tplayerMmr\"\xfe\x03\n" +
	"\x1bCMsgSteamLearnMatchInfoTeam\x12[\n" +
	"\x0fradiant_players\x18\x01 \x03(\v2,.protocol.CMsgSteamLearnMatchInfoTeam.PlayerB\x04\xf0\xe4\x1d\x05R\x0eradiantPlayers\x12U\n" +
	"\fdire_players\x18\x02 \x03(\v2,.protocol.CMsgSteamLearnMatchInfoTeam.PlayerB\x04\xf0\xe4\x1d\x05R\vdirePlayers\x12(\n" +
	"\x10radiant_team_won\x18\x03 \x01(\bR\x0eradiantTeamWon\x1a\x80\x02\n" +
	"\x06Player\x12!\n" +
	"\fprematch_mmr\x18\x01 \x01(\rR\vprematchMmr\x12:\n" +
	"\x19prematch_rank_uncertainty\x18\x02 \x01(\rR\x17prematchRankUncertainty\x126\n" +
	"\x17prematch_behavior_score\x18\x03 \x01(\rR\x15prematchBehaviorScore\x12.\n" +
	"\x13prematch_comm_score\x18\x04 \x01(\rR\x11prematchCommScore\x12/\n" +
	"\x14num_players_in_party\x18\x05 \x01(\rR\x11numPlayersInParty\"\x8d\x03\n" +
	"\x1bCMsgSteamLearnMatchHeroesV3\x12.\n" +
	"\x10radiant_hero_ids\x18\x01 \x03(\x05B\x04\xf0\xe4\x1d\x05R\x0eradiantHeroIds\x12(\n" +
	"\rdire_hero_ids\x18\x02 \x03(\x05B\x04\xf0\xe4\x1d\x05R\vdireHeroIds\x12)\n" +
	"\rradiant_lanes\x18\x03 \x03(\rB\x04\xf0\xe4\x1d\x05R\fradiantLanes\x12#\n" +
	"\n" +
	"dire_lanes\x18\x04 \x03(\rB\x04\xf0\xe4\x1d\x05R\tdireLanes\x124\n" +
	"\x13radiant_hero_facets\x18\x05 \x03(\rB\x04\xf0\xe4\x1d\x05R\x11radiantHeroFacets\x12.\n" +
	"\x10dire_hero_facets\x18\x06 \x03(\rB\x04\xf0\xe4\x1d\x05R\x0edireHeroFacets\x121\n" +
	"\x11radiant_positions\x18\a \x03(\rB\x04\xf0\xe4\x1d\x05R\x10radiantPositions\x12+\n" +
	"\x0edire_positions\x18\b \x03(\rB\x04\xf0\xe4\x1d\x05R\rdirePositions\"\xc2\x02\n" +
	"\x19CMsgSteamLearnMatchHeroV3\x12\x17\n" +
	"\ahero_id\x18\x01 \x01(\x05R\x06heroId\x12\x12\n" +
	"\x04lane\x18\x02 \x01(\rR\x04lane\x12\x1a\n" +
	"\bposition\x18\b \x01(\rR\bposition\x12,\n" +
	"\x0fallied_hero_ids\x18\x03 \x03(\x05B\x04\xf0\xe4\x1d\x04R\ralliedHeroIds\x12*\n" +
	"\x0eenemy_hero_ids\x18\x04 \x03(\x05B\x04\xf0\xe4\x1d\x05R\fenemyHeroIds\x12\x1d\n" +
	"\n" +
	"hero_facet\x18\x05 \x01(\rR\theroFacet\x122\n" +
	"\x12allied_hero_facets\x18\x06 \x03(\rB\x04\xf0\xe4\x1d\x04R\x10alliedHeroFacets\x12/\n" +
	"\x10enemy_herofacets\x18\a \x03(\rB\x04\xf0\xe4\x1d\x05R\x0fenemyHerofacets\"\x8e\x04\n" +
	"\x1eCMsgSteamLearnPlayerTimedStats\x12\\\n" +
	"\fstat_buckets\x18\x01 \x03(\v23.protocol.CMsgSteamLearnPlayerTimedStats.StatBucketB\x04\xf0\xe4\x1dZR\vstatBuckets\x1a\x8d\x03\n" +
	"\n" +
	"StatBucket\x12\x1b\n" +
	"\tgame_time\x18\x01 \x01(\x02R\bgameTime\x12\x14\n" +
	"\x05kills\x18\x02 \x01(\rR\x05kills\x12\x16\n" +
	"\x06deaths\x18\x03 \x01(\rR\x06deaths\x12\x18\n" +
	"\aassists\x18\x04 \x01(\rR\aassists\x12\x1e\n" +
	"\n" +
	"experience\x18\x05 \x01(\rR\n" +
	"experience\x12\x1b\n" +
	"\tlast_hits\x18\x06 \x01(\rR\blastHits\x12\x16\n" +
	"\x06denies\x18\a \x01(\rR\x06denies\x12\x1b\n" +
	"\tnet_worth\x18\b \x01(\rR\bnetWorth\x12\x1b\n" +
	"\tidle_time\x18\t \x01(\x02R\bidleTime\x12'\n" +
	"\x0fcommands_issued\x18\n" +
	" \x01(\rR\x0ecommandsIssued\x12.\n" +
	"\x13sentry_wards_placed\x18\v \x01(\rR\x11sentryWardsPlaced\x122\n" +
	"\x15observer_wards_placed\x18\f \x01(\rR\x13observerWardsPlaced\"\xe8\a\n" +
	"\x1aCMsgSteamLearnMatchStateV5\x12\x1b\n" +
	"\tgame_time\x18\x01 \x01(\x02R\bgameTime\x12S\n" +
	"\rradiant_state\x18\x02 \x01(\v2..protocol.CMsgSteamLearnMatchStateV5.TeamStateR\fradiantState\x12M\n" +
	"\n" +
	"dire_state\x18\x03 \x01(\v2..protocol.CMsgSteamLearnMatchStateV5.TeamStateR\tdireState\x1a\xac\x02\n" +
	"\vPlayerState\x12\x17\n" +
	"\ahero_id\x18\x01 \x01(\x05R\x06heroId\x12\x1b\n" +
	"\tnet_worth\x18\x02 \x01(\rR\bnetWorth\x12\x14\n" +
	"\x05level\x18\x03 \x01(\rR\x05level\x12\x16\n" +
	"\x06deaths\x18\x04 \x01(\rR\x06deaths\x12!\n" +
	"\frespawn_time\x18\x05 \x01(\rR\vrespawnTime\x12\x1f\n" +
	"\vhas_buyback\x18\x06 \x01(\bR\n" +
	"hasBuyback\x12\x1b\n" +
	"\thas_aegis\x18\a \x01(\bR\bhasAegis\x12\x1d\n" +
	"\n" +
	"has_rapier\x18\b \x01(\bR\thasRapier\x12\x1a\n" +
	"\bdistance\x18\t \x01(\rR\bdistance\x12\x1d\n" +
	"\n" +
	"hero_facet\x18\n" +
	" \x01(\rR\theroFacet\x1a\xd9\x03\n" +
	"\tTeamState\x12\x12\n" +
	"\x04team\x18\x01 \x01(\rR\x04team\x12[\n" +
	"\rplayer_states\x18\x02 \x03(\v20.protocol.CMsgSteamLearnMatchStateV5.PlayerStateB\x04\xf0\xe4\x1d\x05R\fplayerStates\x12.\n" +
	"\x10tower_health_pct\x18\x03 \x03(\rB\x04\xf0\xe4\x1d\vR\x0etowerHealthPct\x124\n" +
	"\x13barracks_health_pct\x18\x04 \x03(\rB\x04\xf0\xe4\x1d\x06R\x11barracksHealthPct\x12,\n" +
	"\x12ancient_health_pct\x18\x05 \x01(\rR\x10ancientHealthPct\x12%\n" +
	"\x0eglyph_cooldown\x18\x06 \x01(\rR\rglyphCooldown\x12\x14\n" +
	"\x05kills\x18\a \x01(\rR\x05kills\x12.\n" +
	"\x13creep_distance_safe\x18\b \x01(\rR\x11creepDistanceSafe\x12,\n" +
	"\x12creep_distance_mid\x18\t \x01(\rR\x10creepDistanceMid\x12,\n" +
	"\x12creep_distance_off\x18\n" +
	" \x01(\rR\x10creepDistanceOff\"\xbc\x02\n" +
	"\x1aCMsgSteamLearnItemPurchase\x12\x1b\n" +
	"\aitem_id\x18\x01 \x01(\x05:\x02-1R\x06itemId\x12-\n" +
	"\x0finventory_items\x18\x02 \x03(\x05B\x04\xf0\xe4\x1d\x14R\x0einventoryItems\x12/\n" +
	"\x10purchase_history\x18\x03 \x03(\x05B\x04\xf0\xe4\x1d\x14R\x0fpurchaseHistory\x12\x12\n" +
	"\x04gold\x18\x04 \x01(\rR\x04gold\x12\x1b\n" +
	"\tnet_worth\x18\x05 \x01(\rR\bnetWorth\x12&\n" +
	"\x0fis_radiant_team\x18\x06 \x01(\rR\risRadiantTeam\x12\x1b\n" +
	"\tgame_time\x18\a \x01(\x02R\bgameTime\x12+\n" +
	"\x12is_using_dota_plus\x18\b \x01(\bR\x0fisUsingDotaPlus\"\x9a\x01\n" +
	"\"CMsgSteamLearnPreGameItemPurchases\x12\x1f\n" +
	"\bitem_ids\x18\x01 \x03(\x05B\x04\xf0\xe4\x1d\n" +
	"R\aitemIds\x12&\n" +
	"\x0fis_radiant_team\x18\x02 \x01(\rR\risRadiantTeam\x12+\n" +
	"\x12is_using_dota_plus\x18\x03 \x01(\bR\x0fisUsingDotaPlus\"\xa9\x01\n" +
	"!CMsgSteamLearnNeutralItemPurchase\x12\x1b\n" +
	"\aitem_id\x18\x01 \x01(\x05:\x02-1R\x06itemId\x12\x12\n" +
	"\x04tier\x18\x02 \x01(\rR\x04tier\x12&\n" +
	"\x0fis_radiant_team\x18\x03 \x01(\rR\risRadiantTeam\x12+\n" +
	"\x12is_using_dota_plus\x18\x04 \x01(\bR\x0fisUsingDotaPlus\"\xbb\x01\n" +
	"#CMsgSteamLearnNeutralItemPurchaseV2\x12\x12\n" +
	"\x04tier\x18\x01 \x01(\rR\x04tier\x12!\n" +
	"\n" +
	"trinket_id\x18\x02 \x01(\x05:\x02-1R\ttrinketId\x12)\n" +
	"\x0eenhancement_id\x18\x03 \x01(\x05:\x02-1R\renhancementId\x122\n" +
	"\x13previous_trinket_id\x18\x04 \x01(\x05:\x02-1R\x11previousTrinketId\"\xed\x01\n" +
	"#CMsgSteamLearnNeutralItemPurchaseV4\x12\x12\n" +
	"\x04tier\x18\x01 \x01(\rR\x04tier\x12-\n" +
	"\x0ftrinket_options\x18\x02 \x03(\x05B\x04\xf0\xe4\x1d\x04R\x0etrinketOptions\x125\n" +
	"\x13enhancement_options\x18\x03 \x03(\x05B\x04\xf0\xe4\x1d\x04R\x12enhancementOptions\x12!\n" +
	"\n" +
	"trinket_id\x18\x04 \x01(\x05:\x02-1R\ttrinketId\x12)\n" +
	"\x0eenhancement_id\x18\x05 \x01(\x05:\x02-1R\renhancementId\"\xbc\x01\n" +
	"\x1aCMsgSteamLearnAbilitySkill\x12!\n" +
	"\n" +
	"ability_id\x18\x01 \x01(\x05:\x02-1R\tabilityId\x121\n" +
	"\x11skilled_abilities\x18\x02 \x03(\x05B\x04\xf0\xe4\x1d\x1eR\x10skilledAbilities\x12\x1b\n" +
	"\tgame_time\x18\x03 \x01(\x02R\bgameTime\x12+\n" +
	"\x12is_using_dota_plus\x18\x04 \x01(\bR\x0fisUsingDotaPlus\"u\n" +
	"&CMsgSteamLearnEarlyGameItemPurchasesV2\x12\x1f\n" +
	"\bitem_ids\x18\x01 \x03(\x05B\x04\xf0\xe4\x1d\n" +
	"R\aitemIds\x12*\n" +
	"\x0eother_item_ids\x18\x02 \x03(\x05B\x04\xf0\xe4\x1d\x1eR\fotherItemIds\"t\n" +
	"%CMsgSteamLearnLateGameItemPurchasesV2\x12\x1f\n" +
	"\bitem_ids\x18\x01 \x03(\x05B\x04\xf0\xe4\x1d\n" +
	"R\aitemIds\x12*\n" +
	"\x0eother_item_ids\x18\x02 \x03(\x05B\x04\xf0\xe4\x1d\x1eR\fotherItemIds\"F\n" +
	"#CMsgSteamLearnMainGameItemPurchases\x12\x1f\n" +
	"\bitem_ids\x18\x01 \x03(\x05B\x04\xf0\xe4\x1d\n" +
	"R\aitemIds\"\x88\x02\n" +
	"\x1bCMsgSteamLearnWardPlacement\x12I\n" +
	"\bward_loc\x18\x01 \x01(\v2..protocol.CMsgSteamLearnWardPlacement.LocationR\awardLoc\x12b\n" +
	"\x12existing_ward_locs\x18\x02 \x03(\v2..protocol.CMsgSteamLearnWardPlacement.LocationB\x04\xf0\xe4\x1d\x06R\x10existingWardLocs\x12\x12\n" +
	"\x04team\x18\x03 \x01(\rR\x04team\x1a&\n" +
	"\bLocation\x12\f\n" +
	"\x01x\x18\x01 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x02R\x01y\"\xa8\x03\n" +
	"\x1eCMsgSteamLearnPlayerMatchState\x12\x1b\n" +
	"\tnet_worth\x18\x01 \x01(\rR\bnetWorth\x12\x14\n" +
	"\x05level\x18\x02 \x01(\rR\x05level\x12\x16\n" +
	"\x06deaths\x18\x03 \x01(\rR\x06deaths\x12!\n" +
	"\frespawn_time\x18\x04 \x01(\rR\vrespawnTime\x12\x1f\n" +
	"\vhas_buyback\x18\x05 \x01(\bR\n" +
	"hasBuyback\x12\x1b\n" +
	"\thas_aegis\x18\x06 \x01(\bR\bhasAegis\x12\x1d\n" +
	"\n" +
	"has_rapier\x18\a \x01(\bR\thasRapier\x12$\n" +
	"\x0eteam_net_worth\x18\b \x01(\rR\fteamNetWorth\x12/\n" +
	"\x14enemy_team_net_worth\x18\t \x01(\rR\x11enemyTeamNetWorth\x12\x1d\n" +
	"\n" +
	"team_kills\x18\n" +
	" \x01(\rR\tteamKills\x12(\n" +
	"\x10enemy_team_kills\x18\v \x01(\rR\x0eenemyTeamKills\x12\x1b\n" +
	"\tgame_time\x18\f \x01(\x02R\bgameTime\"C\n" +
	"\x19CMsgSignOutMuertaMinigame\x12&\n" +
	"\x0fevent_game_data\x18\x01 \x01(\fR\reventGameData\"\x88\x02\n" +
	"\x13CMsgSignOutMapStats\x12>\n" +
	"\aplayers\x18\x01 \x03(\v2$.protocol.CMsgSignOutMapStats.PlayerR\aplayers\x12A\n" +
	"\fglobal_stats\x18\x02 \x01(\v2\x1e.protocol.CMsgMapStatsSnapshotR\vglobalStats\x1an\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12E\n" +
	"\x0epersonal_stats\x18\x02 \x01(\v2\x1e.protocol.CMsgMapStatsSnapshotR\rpersonalStats\"\x92\x01\n" +
	"\x1aCMsgServerToGCNewBloomGift\x12\x1a\n" +
	"\bdefindex\x18\x01 \x01(\rR\bdefindex\x12*\n" +
	"\x11gifter_account_id\x18\x02 \x01(\rR\x0fgifterAccountId\x12,\n" +
	"\x12target_account_ids\x18\x03 \x03(\rR\x10targetAccountIds\"\xb4\x01\n" +
	"\"CMsgServerToGCNewBloomGiftResponse\x12\\\n" +
	"\x06result\x18\x01 \x01(\x0e2\".protocol.ENewBloomGiftingResponse: kENewBloomGifting_UnknownFailureR\x06result\x120\n" +
	"\x14received_account_ids\x18\x02 \x03(\rR\x12receivedAccountIds\"\x93\x02\n" +
	"\x14CMsgSignOutOverworld\x12?\n" +
	"\aplayers\x18\x01 \x03(\v2%.protocol.CMsgSignOutOverworld.PlayerR\aplayers\x12:\n" +
	"\bevent_id\x18\x02 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x1a~\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12!\n" +
	"\foverworld_id\x18\x02 \x01(\rR\voverworldId\x122\n" +
	"\x15desired_token_rewards\x18\x03 \x03(\rR\x13desiredTokenRewards\"\x82\x02\n" +
	"\x15CMsgSignOutCraftworks\x12@\n" +
	"\aplayers\x18\x01 \x03(\v2&.protocol.CMsgSignOutCraftworks.PlayerR\aplayers\x12:\n" +
	"\bevent_id\x18\x02 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x1ak\n" +
	"\x06Player\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\rR\taccountId\x12B\n" +
	"\n" +
	"components\x18\x02 \x01(\v2\".protocol.CMsgCraftworksComponentsR\n" +
	"components*\xc6\x01\n" +
	"\x1aEPoorNetworkConditionsType\x12!\n" +
	"\x1dk_EPoorNetworkConditions_None\x10\x00\x12$\n" +
	" k_EPoorNetworkConditions_Unknown\x10\x01\x12+\n" +
	"'k_EPoorNetworkConditions_MassDisconnect\x10\x02\x122\n" +
	".k_EPoorNetworkConditions_ExcessBadQosIntervals\x10\x03"

var (
	file_dota_gcmessages_server_proto_rawDescOnce sync.Once
	file_dota_gcmessages_server_proto_rawDescData []byte
)

func file_dota_gcmessages_server_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_server_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dota_gcmessages_server_proto_rawDesc), len(file_dota_gcmessages_server_proto_rawDesc)))
	})
	return file_dota_gcmessages_server_proto_rawDescData
}

var file_dota_gcmessages_server_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_dota_gcmessages_server_proto_msgTypes = make([]protoimpl.MessageInfo, 185)
var file_dota_gcmessages_server_proto_goTypes = []any{
	(EPoorNetworkConditionsType)(0),                                          // 0: protocol.EPoorNetworkConditionsType
	(CMsgConnectedPlayers_SendReason)(0),                                     // 1: protocol.CMsgConnectedPlayers.SendReason
	(CMsgGameServerInfo_ServerType)(0),                                       // 2: protocol.CMsgGameServerInfo.ServerType
	(CMsgGameServerInfo_CustomGames)(0),                                      // 3: protocol.CMsgGameServerInfo.CustomGames
	(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType)(0),                   // 4: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType
	(CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState)(0),          // 5: protocol.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState
	(*CMsgPoorNetworkConditions)(nil),                                        // 6: protocol.CMsgPoorNetworkConditions
	(*CMsgGameserverCrash)(nil),                                              // 7: protocol.CMsgGameserverCrash
	(*CMsgConnectedPlayers)(nil),                                             // 8: protocol.CMsgConnectedPlayers
	(*CMsgGameServerInfo)(nil),                                               // 9: protocol.CMsgGameServerInfo
	(*CMsgLeaverDetected)(nil),                                               // 10: protocol.CMsgLeaverDetected
	(*CMsgLeaverDetectedResponse)(nil),                                       // 11: protocol.CMsgLeaverDetectedResponse
	(*CMsgDOTAFantasyFinalPlayerStats)(nil),                                  // 12: protocol.CMsgDOTAFantasyFinalPlayerStats
	(*CMsgDOTAFantasyLivePlayerStats)(nil),                                   // 13: protocol.CMsgDOTAFantasyLivePlayerStats
	(*CMsgServerToGCRealtimeStats)(nil),                                      // 14: protocol.CMsgServerToGCRealtimeStats
	(*CMsgGCToServerRealtimeStatsStartStop)(nil),                             // 15: protocol.CMsgGCToServerRealtimeStatsStartStop
	(*CMsgGCToServerUpdateSteamBroadcasting)(nil),                            // 16: protocol.CMsgGCToServerUpdateSteamBroadcasting
	(*CMsgSignOutGameplayStats)(nil),                                         // 17: protocol.CMsgSignOutGameplayStats
	(*CMsgGameMatchSignOut)(nil),                                             // 18: protocol.CMsgGameMatchSignOut
	(*CMsgSignOutDraftInfo)(nil),                                             // 19: protocol.CMsgSignOutDraftInfo
	(*CMsgSignOutBotInfo)(nil),                                               // 20: protocol.CMsgSignOutBotInfo
	(*CMsgSignOutTextMuteInfo)(nil),                                          // 21: protocol.CMsgSignOutTextMuteInfo
	(*CMsgSignOutPlayerStats)(nil),                                           // 22: protocol.CMsgSignOutPlayerStats
	(*CMsgSignOutCommunicationSummary)(nil),                                  // 23: protocol.CMsgSignOutCommunicationSummary
	(*CMsgGameMatchSignoutResponse)(nil),                                     // 24: protocol.CMsgGameMatchSignoutResponse
	(*CMsgGameMatchSignOutPermissionRequest)(nil),                            // 25: protocol.CMsgGameMatchSignOutPermissionRequest
	(*CMsgGameMatchSignOutPermissionResponse)(nil),                           // 26: protocol.CMsgGameMatchSignOutPermissionResponse
	(*CMsgGameMatchSignOutEventGameData)(nil),                                // 27: protocol.CMsgGameMatchSignOutEventGameData
	(*CMsgGameMatchSignOutPerfData)(nil),                                     // 28: protocol.CMsgGameMatchSignOutPerfData
	(*CMsgGameMatchSignOutBanData)(nil),                                      // 29: protocol.CMsgGameMatchSignOutBanData
	(*CMsgDOTALiveScoreboardUpdate)(nil),                                     // 30: protocol.CMsgDOTALiveScoreboardUpdate
	(*CMsgServerToGCRequestBatchPlayerResources)(nil),                        // 31: protocol.CMsgServerToGCRequestBatchPlayerResources
	(*CMsgServerToGCRequestBatchPlayerResourcesResponse)(nil),                // 32: protocol.CMsgServerToGCRequestBatchPlayerResourcesResponse
	(*CMsgDOTAPlayerFailedToConnect)(nil),                                    // 33: protocol.CMsgDOTAPlayerFailedToConnect
	(*CMsgGCToRelayConnect)(nil),                                             // 34: protocol.CMsgGCToRelayConnect
	(*CMsgGCGCToLANServerRelayConnect)(nil),                                  // 35: protocol.CMsgGCGCToLANServerRelayConnect
	(*CMsgGCBanStatusRequest)(nil),                                           // 36: protocol.CMsgGCBanStatusRequest
	(*CMsgGCBanStatusResponse)(nil),                                          // 37: protocol.CMsgGCBanStatusResponse
	(*CMsgTournamentItemEvent)(nil),                                          // 38: protocol.CMsgTournamentItemEvent
	(*CMsgTournamentItemEventResponse)(nil),                                  // 39: protocol.CMsgTournamentItemEventResponse
	(*CMsgTeamFanfare)(nil),                                                  // 40: protocol.CMsgTeamFanfare
	(*CMsgResponseTeamFanfare)(nil),                                          // 41: protocol.CMsgResponseTeamFanfare
	(*CMsgDOTAAwardEventPoints)(nil),                                         // 42: protocol.CMsgDOTAAwardEventPoints
	(*CMsgGCToServerPingRequest)(nil),                                        // 43: protocol.CMsgGCToServerPingRequest
	(*CMsgGCToServerPingResponse)(nil),                                       // 44: protocol.CMsgGCToServerPingResponse
	(*CMsgServerToGCMatchConnectionStats)(nil),                               // 45: protocol.CMsgServerToGCMatchConnectionStats
	(*CMsgServerGCUpdateSpectatorCount)(nil),                                 // 46: protocol.CMsgServerGCUpdateSpectatorCount
	(*CSerializedCombatLog)(nil),                                             // 47: protocol.CSerializedCombatLog
	(*CMsgServerToGCVictoryPredictions)(nil),                                 // 48: protocol.CMsgServerToGCVictoryPredictions
	(*CMsgServerToGCRequestStatus)(nil),                                      // 49: protocol.CMsgServerToGCRequestStatus
	(*CMsgServerToGCRequestStatus_Response)(nil),                             // 50: protocol.CMsgServerToGCRequestStatus_Response
	(*CMsgGCToServerEvaluateToxicChat)(nil),                                  // 51: protocol.CMsgGCToServerEvaluateToxicChat
	(*CMsgServerToGCEvaluateToxicChat)(nil),                                  // 52: protocol.CMsgServerToGCEvaluateToxicChat
	(*CMsgServerToGCEvaluateToxicChatResponse)(nil),                          // 53: protocol.CMsgServerToGCEvaluateToxicChatResponse
	(*CMsgSignOutAssassinMiniGameInfo)(nil),                                  // 54: protocol.CMsgSignOutAssassinMiniGameInfo
	(*CMsgServerToGCKillSummaries)(nil),                                      // 55: protocol.CMsgServerToGCKillSummaries
	(*CMsgServerToGCLockCharmTrading)(nil),                                   // 56: protocol.CMsgServerToGCLockCharmTrading
	(*CMsgSignOutUpdatePlayerChallenge)(nil),                                 // 57: protocol.CMsgSignOutUpdatePlayerChallenge
	(*CMsgServerToGCRerollPlayerChallenge)(nil),                              // 58: protocol.CMsgServerToGCRerollPlayerChallenge
	(*CMsgSpendWager)(nil),                                                   // 59: protocol.CMsgSpendWager
	(*CMsgSignOutXPCoins)(nil),                                               // 60: protocol.CMsgSignOutXPCoins
	(*CMsgSignOutBounties)(nil),                                              // 61: protocol.CMsgSignOutBounties
	(*CMsgSignOutCommunityGoalProgress)(nil),                                 // 62: protocol.CMsgSignOutCommunityGoalProgress
	(*CMsgServerToGCCloseCompendiumInGamePredictionVoting)(nil),              // 63: protocol.CMsgServerToGCCloseCompendiumInGamePredictionVoting
	(*CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)(nil),      // 64: protocol.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse
	(*CMsgServerToGCCompendiumInGamePredictionResults)(nil),                  // 65: protocol.CMsgServerToGCCompendiumInGamePredictionResults
	(*CMsgServerToGCCompendiumChosenInGamePredictions)(nil),                  // 66: protocol.CMsgServerToGCCompendiumChosenInGamePredictions
	(*CMsgGCToGCCompendiumInGamePredictionResults)(nil),                      // 67: protocol.CMsgGCToGCCompendiumInGamePredictionResults
	(*CMsgServerToGCMatchPlayerItemPurchaseHistory)(nil),                     // 68: protocol.CMsgServerToGCMatchPlayerItemPurchaseHistory
	(*CMsgServerToGCMatchPlayerNeutralItemEquipHistory)(nil),                 // 69: protocol.CMsgServerToGCMatchPlayerNeutralItemEquipHistory
	(*CMsgServerToGCMatchStateHistory)(nil),                                  // 70: protocol.CMsgServerToGCMatchStateHistory
	(*CMsgMatchStateSteamMLEntry)(nil),                                       // 71: protocol.CMsgMatchStateSteamMLEntry
	(*CMsgLaneSelectionSteamMLEntry)(nil),                                    // 72: protocol.CMsgLaneSelectionSteamMLEntry
	(*CMsgAbilitySelectionSteamMLEntry)(nil),                                 // 73: protocol.CMsgAbilitySelectionSteamMLEntry
	(*CMsgItemPurchasePregameSteamMLEntry)(nil),                              // 74: protocol.CMsgItemPurchasePregameSteamMLEntry
	(*CMsgItemPurchaseSteamMLEntry)(nil),                                     // 75: protocol.CMsgItemPurchaseSteamMLEntry
	(*CMsgItemPurchaseSequenceSteamMLEntry)(nil),                             // 76: protocol.CMsgItemPurchaseSequenceSteamMLEntry
	(*CMsgServerToGCCavernCrawlIsHeroActive)(nil),                            // 77: protocol.CMsgServerToGCCavernCrawlIsHeroActive
	(*CMsgServerToGCPlayerChallengeHistory)(nil),                             // 78: protocol.CMsgServerToGCPlayerChallengeHistory
	(*CMsgServerToGCCavernCrawlIsHeroActiveResponse)(nil),                    // 79: protocol.CMsgServerToGCCavernCrawlIsHeroActiveResponse
	(*CMsgNeutralItemStats)(nil),                                             // 80: protocol.CMsgNeutralItemStats
	(*CMsgGCToServerLobbyHeroBanRates)(nil),                                  // 81: protocol.CMsgGCToServerLobbyHeroBanRates
	(*CMsgSignOutGuildContractProgress)(nil),                                 // 82: protocol.CMsgSignOutGuildContractProgress
	(*CMsgSignOutGuildChallengeProgress)(nil),                                // 83: protocol.CMsgSignOutGuildChallengeProgress
	(*CMsgSignOutMVPStats)(nil),                                              // 84: protocol.CMsgSignOutMVPStats
	(*CMsgGCToServerRecordTrainingData)(nil),                                 // 85: protocol.CMsgGCToServerRecordTrainingData
	(*CMsgServerToGCGetGuildContracts)(nil),                                  // 86: protocol.CMsgServerToGCGetGuildContracts
	(*CMsgServerToGCGetGuildContractsResponse)(nil),                          // 87: protocol.CMsgServerToGCGetGuildContractsResponse
	(*CMsgMatchDiretideCandy)(nil),                                           // 88: protocol.CMsgMatchDiretideCandy
	(*CMsgGCToServerCheerData)(nil),                                          // 89: protocol.CMsgGCToServerCheerData
	(*CMsgCheerConfig)(nil),                                                  // 90: protocol.CMsgCheerConfig
	(*CMsgGCToServerCheerConfig)(nil),                                        // 91: protocol.CMsgGCToServerCheerConfig
	(*CMsgServerToGCGetCheerConfig)(nil),                                     // 92: protocol.CMsgServerToGCGetCheerConfig
	(*CMsgServerToGCGetCheerConfigResponse)(nil),                             // 93: protocol.CMsgServerToGCGetCheerConfigResponse
	(*CMsgGCToServerCheerScalesOverride)(nil),                                // 94: protocol.CMsgGCToServerCheerScalesOverride
	(*CMsgGCToServerGetCheerState)(nil),                                      // 95: protocol.CMsgGCToServerGetCheerState
	(*CMsgCheerTypeState)(nil),                                               // 96: protocol.CMsgCheerTypeState
	(*CMsgCheerState)(nil),                                                   // 97: protocol.CMsgCheerState
	(*CMsgServerToGCReportCheerState)(nil),                                   // 98: protocol.CMsgServerToGCReportCheerState
	(*CMsgServerToGCGetStickerHeroes)(nil),                                   // 99: protocol.CMsgServerToGCGetStickerHeroes
	(*CMsgServerToGCGetStickerHeroesResponse)(nil),                           // 100: protocol.CMsgServerToGCGetStickerHeroesResponse
	(*CMsgSteamLearnMatchInfo)(nil),                                          // 101: protocol.CMsgSteamLearnMatchInfo
	(*CMsgSteamLearnMatchInfoPlayer)(nil),                                    // 102: protocol.CMsgSteamLearnMatchInfoPlayer
	(*CMsgSteamLearnMatchInfoTeam)(nil),                                      // 103: protocol.CMsgSteamLearnMatchInfoTeam
	(*CMsgSteamLearnMatchHeroesV3)(nil),                                      // 104: protocol.CMsgSteamLearnMatchHeroesV3
	(*CMsgSteamLearnMatchHeroV3)(nil),                                        // 105: protocol.CMsgSteamLearnMatchHeroV3
	(*CMsgSteamLearnPlayerTimedStats)(nil),                                   // 106: protocol.CMsgSteamLearnPlayerTimedStats
	(*CMsgSteamLearnMatchStateV5)(nil),                                       // 107: protocol.CMsgSteamLearnMatchStateV5
	(*CMsgSteamLearnItemPurchase)(nil),                                       // 108: protocol.CMsgSteamLearnItemPurchase
	(*CMsgSteamLearnPreGameItemPurchases)(nil),                               // 109: protocol.CMsgSteamLearnPreGameItemPurchases
	(*CMsgSteamLearnNeutralItemPurchase)(nil),                                // 110: protocol.CMsgSteamLearnNeutralItemPurchase
	(*CMsgSteamLearnNeutralItemPurchaseV2)(nil),                              // 111: protocol.CMsgSteamLearnNeutralItemPurchaseV2
	(*CMsgSteamLearnNeutralItemPurchaseV4)(nil),                              // 112: protocol.CMsgSteamLearnNeutralItemPurchaseV4
	(*CMsgSteamLearnAbilitySkill)(nil),                                       // 113: protocol.CMsgSteamLearnAbilitySkill
	(*CMsgSteamLearnEarlyGameItemPurchasesV2)(nil),                           // 114: protocol.CMsgSteamLearnEarlyGameItemPurchasesV2
	(*CMsgSteamLearnLateGameItemPurchasesV2)(nil),                            // 115: protocol.CMsgSteamLearnLateGameItemPurchasesV2
	(*CMsgSteamLearnMainGameItemPurchases)(nil),                              // 116: protocol.CMsgSteamLearnMainGameItemPurchases
	(*CMsgSteamLearnWardPlacement)(nil),                                      // 117: protocol.CMsgSteamLearnWardPlacement
	(*CMsgSteamLearnPlayerMatchState)(nil),                                   // 118: protocol.CMsgSteamLearnPlayerMatchState
	(*CMsgSignOutMuertaMinigame)(nil),                                        // 119: protocol.CMsgSignOutMuertaMinigame
	(*CMsgSignOutMapStats)(nil),                                              // 120: protocol.CMsgSignOutMapStats
	(*CMsgServerToGCNewBloomGift)(nil),                                       // 121: protocol.CMsgServerToGCNewBloomGift
	(*CMsgServerToGCNewBloomGiftResponse)(nil),                               // 122: protocol.CMsgServerToGCNewBloomGiftResponse
	(*CMsgSignOutOverworld)(nil),                                             // 123: protocol.CMsgSignOutOverworld
	(*CMsgSignOutCraftworks)(nil),                                            // 124: protocol.CMsgSignOutCraftworks
	(*CMsgPoorNetworkConditions_Player)(nil),                                 // 125: protocol.CMsgPoorNetworkConditions.Player
	(*CMsgConnectedPlayers_Player)(nil),                                      // 126: protocol.CMsgConnectedPlayers.Player
	(*CMsgConnectedPlayers_PlayerDraft)(nil),                                 // 127: protocol.CMsgConnectedPlayers.PlayerDraft
	(*CMsgSignOutGameplayStats_CPlayer)(nil),                                 // 128: protocol.CMsgSignOutGameplayStats.CPlayer
	(*CMsgSignOutGameplayStats_CTeam)(nil),                                   // 129: protocol.CMsgSignOutGameplayStats.CTeam
	(*CMsgGameMatchSignOut_CTeam)(nil),                                       // 130: protocol.CMsgGameMatchSignOut.CTeam
	(*CMsgGameMatchSignOut_CAdditionalSignoutMsg)(nil),                       // 131: protocol.CMsgGameMatchSignOut.CAdditionalSignoutMsg
	(*CMsgGameMatchSignOut_CSocialFeedMatchEvent)(nil),                       // 132: protocol.CMsgGameMatchSignOut.CSocialFeedMatchEvent
	(*CMsgGameMatchSignOut_CCustomGameData)(nil),                             // 133: protocol.CMsgGameMatchSignOut.CCustomGameData
	(*CMsgGameMatchSignOut_EventGameLeaderboardEntry)(nil),                   // 134: protocol.CMsgGameMatchSignOut.EventGameLeaderboardEntry
	(*CMsgGameMatchSignOut_WardPlacement)(nil),                               // 135: protocol.CMsgGameMatchSignOut.WardPlacement
	(*CMsgGameMatchSignOut_CTeam_CPlayer)(nil),                               // 136: protocol.CMsgGameMatchSignOut.CTeam.CPlayer
	(*CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData)(nil),               // 137: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData
	(*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived)(nil),            // 138: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived
	(*CMsgSignOutTextMuteInfo_TextMuteMessage)(nil),                          // 139: protocol.CMsgSignOutTextMuteInfo.TextMuteMessage
	(*CMsgSignOutCommunicationSummary_PlayerCommunication)(nil),              // 140: protocol.CMsgSignOutCommunicationSummary.PlayerCommunication
	(*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail)(nil),   // 141: protocol.CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail
	(*CMsgGameMatchSignoutResponse_PlayerMetadata)(nil),                      // 142: protocol.CMsgGameMatchSignoutResponse.PlayerMetadata
	(*CMsgDOTALiveScoreboardUpdate_Team)(nil),                                // 143: protocol.CMsgDOTALiveScoreboardUpdate.Team
	(*CMsgDOTALiveScoreboardUpdate_Team_Player)(nil),                         // 144: protocol.CMsgDOTALiveScoreboardUpdate.Team.Player
	(*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility)(nil),             // 145: protocol.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility
	(*CMsgServerToGCRequestBatchPlayerResourcesResponse_Result)(nil),         // 146: protocol.CMsgServerToGCRequestBatchPlayerResourcesResponse.Result
	(*CMsgDOTAAwardEventPoints_AwardPoints)(nil),                             // 147: protocol.CMsgDOTAAwardEventPoints.AwardPoints
	(*CMsgServerToGCMatchConnectionStats_Player)(nil),                        // 148: protocol.CMsgServerToGCMatchConnectionStats.Player
	(*CSerializedCombatLog_Dictionary)(nil),                                  // 149: protocol.CSerializedCombatLog.Dictionary
	(*CSerializedCombatLog_Dictionary_DictString)(nil),                       // 150: protocol.CSerializedCombatLog.Dictionary.DictString
	(*CMsgServerToGCVictoryPredictions_PredictionItem)(nil),                  // 151: protocol.CMsgServerToGCVictoryPredictions.PredictionItem
	(*CMsgServerToGCVictoryPredictions_Record)(nil),                          // 152: protocol.CMsgServerToGCVictoryPredictions.Record
	(*CMsgServerToGCKillSummaries_KillSummary)(nil),                          // 153: protocol.CMsgServerToGCKillSummaries.KillSummary
	(*CMsgSignOutUpdatePlayerChallenge_Challenge)(nil),                       // 154: protocol.CMsgSignOutUpdatePlayerChallenge.Challenge
	(*CMsgSpendWager_Player)(nil),                                            // 155: protocol.CMsgSpendWager.Player
	(*CMsgSignOutXPCoins_Player)(nil),                                        // 156: protocol.CMsgSignOutXPCoins.Player
	(*CMsgSignOutBounties_Bounty)(nil),                                       // 157: protocol.CMsgSignOutBounties.Bounty
	(*CMsgSignOutCommunityGoalProgress_EventGoalIncrement)(nil),              // 158: protocol.CMsgSignOutCommunityGoalProgress.EventGoalIncrement
	(*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult)(nil), // 159: protocol.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult
	(*CMsgServerToGCCompendiumChosenInGamePredictions_Prediction)(nil),       // 160: protocol.CMsgServerToGCCompendiumChosenInGamePredictions.Prediction
	(*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase)(nil),        // 161: protocol.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase
	(*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player)(nil),              // 162: protocol.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player
	(*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip)(nil),       // 163: protocol.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip
	(*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player)(nil),          // 164: protocol.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player
	(*CMsgServerToGCMatchStateHistory_PlayerState)(nil),                      // 165: protocol.CMsgServerToGCMatchStateHistory.PlayerState
	(*CMsgServerToGCMatchStateHistory_TeamState)(nil),                        // 166: protocol.CMsgServerToGCMatchStateHistory.TeamState
	(*CMsgServerToGCMatchStateHistory_MatchState)(nil),                       // 167: protocol.CMsgServerToGCMatchStateHistory.MatchState
	(*CMsgServerToGCPlayerChallengeHistory_PlayerChallenge)(nil),             // 168: protocol.CMsgServerToGCPlayerChallengeHistory.PlayerChallenge
	(*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults)(nil),         // 169: protocol.CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults
	(*CMsgNeutralItemStats_NeutralItem)(nil),                                 // 170: protocol.CMsgNeutralItemStats.NeutralItem
	(*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry)(nil),                     // 171: protocol.CMsgGCToServerLobbyHeroBanRates.HeroBanEntry
	(*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts)(nil),    // 172: protocol.CMsgSignOutGuildContractProgress.CompletedGuildEventContracts
	(*CMsgSignOutGuildContractProgress_PlayerContract)(nil),                  // 173: protocol.CMsgSignOutGuildContractProgress.PlayerContract
	(*CMsgSignOutGuildChallengeProgress_ChallengeProgress)(nil),              // 174: protocol.CMsgSignOutGuildChallengeProgress.ChallengeProgress
	(*CMsgSignOutMVPStats_Player)(nil),                                       // 175: protocol.CMsgSignOutMVPStats.Player
	(*CMsgSignOutMVPStats_Player_KillEaterEvent)(nil),                        // 176: protocol.CMsgSignOutMVPStats.Player.KillEaterEvent
	(*CMsgServerToGCGetGuildContractsResponse_ContractDetails)(nil),          // 177: protocol.CMsgServerToGCGetGuildContractsResponse.ContractDetails
	(*CMsgServerToGCGetGuildContractsResponse_Player)(nil),                   // 178: protocol.CMsgServerToGCGetGuildContractsResponse.Player
	(*CMsgMatchDiretideCandy_CandyDetails)(nil),                              // 179: protocol.CMsgMatchDiretideCandy.CandyDetails
	(*CMsgMatchDiretideCandy_PlayerCandy)(nil),                               // 180: protocol.CMsgMatchDiretideCandy.PlayerCandy
	(*CMsgGCToServerCheerData_CheerTypeCount)(nil),                           // 181: protocol.CMsgGCToServerCheerData.CheerTypeCount
	(*CMsgServerToGCGetStickerHeroesResponse_Player)(nil),                    // 182: protocol.CMsgServerToGCGetStickerHeroesResponse.Player
	(*CMsgSteamLearnMatchInfoTeam_Player)(nil),                               // 183: protocol.CMsgSteamLearnMatchInfoTeam.Player
	(*CMsgSteamLearnPlayerTimedStats_StatBucket)(nil),                        // 184: protocol.CMsgSteamLearnPlayerTimedStats.StatBucket
	(*CMsgSteamLearnMatchStateV5_PlayerState)(nil),                           // 185: protocol.CMsgSteamLearnMatchStateV5.PlayerState
	(*CMsgSteamLearnMatchStateV5_TeamState)(nil),                             // 186: protocol.CMsgSteamLearnMatchStateV5.TeamState
	(*CMsgSteamLearnWardPlacement_Location)(nil),                             // 187: protocol.CMsgSteamLearnWardPlacement.Location
	(*CMsgSignOutMapStats_Player)(nil),                                       // 188: protocol.CMsgSignOutMapStats.Player
	(*CMsgSignOutOverworld_Player)(nil),                                      // 189: protocol.CMsgSignOutOverworld.Player
	(*CMsgSignOutCraftworks_Player)(nil),                                     // 190: protocol.CMsgSignOutCraftworks.Player
	(DOTA_GameState)(0),                                                      // 191: protocol.DOTA_GameState
	(DOTALeaverStatusT)(0),                                                   // 192: protocol.DOTALeaverStatus_t
	(*CMsgLeaverState)(nil),                                                  // 193: protocol.CMsgLeaverState
	(ENetworkDisconnectionReason)(0),                                         // 194: protocol.ENetworkDisconnectionReason
	(*CMsgDOTAFantasyPlayerStats)(nil),                                       // 195: protocol.CMsgDOTAFantasyPlayerStats
	(*CMsgDOTARealtimeGameStatsTerse)(nil),                                   // 196: protocol.CMsgDOTARealtimeGameStatsTerse
	(*CMsgEconPlayerStrangeCountAdjustment)(nil),                             // 197: protocol.CMsgEconPlayerStrangeCountAdjustment
	(*CExtraMsgBlock)(nil),                                                   // 198: protocol.CExtraMsgBlock
	(DOTA_GC_TEAM)(0),                                                        // 199: protocol.DOTA_GC_TEAM
	(*CMsgTrackedStat)(nil),                                                  // 200: protocol.CMsgTrackedStat
	(*CMatchHeroSelectEvent)(nil),                                            // 201: protocol.CMatchHeroSelectEvent
	(DOTABotDifficulty)(0),                                                   // 202: protocol.DOTABotDifficulty
	(*CMsgDOTAMatch)(nil),                                                    // 203: protocol.CMsgDOTAMatch
	(*CMvpData)(nil),                                                         // 204: protocol.CMvpData
	(*CMsgOverworldMatchRewards)(nil),                                        // 205: protocol.CMsgOverworldMatchRewards
	(EEvent)(0),                                                              // 206: protocol.EEvent
	(DOTA_TournamentEvents)(0),                                               // 207: protocol.DOTA_TournamentEvents
	(*CProtoItemHeroStatue)(nil),                                             // 208: protocol.CProtoItemHeroStatue
	(*CMsgDOTACombatLogEntry)(nil),                                           // 209: protocol.CMsgDOTACombatLogEntry
	(*CMsgClientToGCRerollPlayerChallenge)(nil),                              // 210: protocol.CMsgClientToGCRerollPlayerChallenge
	(*CMsgMapStatsSnapshot)(nil),                                             // 211: protocol.CMsgMapStatsSnapshot
	(ENewBloomGiftingResponse)(0),                                            // 212: protocol.ENewBloomGiftingResponse
	(*CMatchPlayerTimedStats)(nil),                                           // 213: protocol.CMatchPlayerTimedStats
	(*CMatchTeamTimedStats)(nil),                                             // 214: protocol.CMatchTeamTimedStats
	(*CMatchPlayerAbilityUpgrade)(nil),                                       // 215: protocol.CMatchPlayerAbilityUpgrade
	(*CMatchAdditionalUnitInventory)(nil),                                    // 216: protocol.CMatchAdditionalUnitInventory
	(*CMatchPlayerPermanentBuff)(nil),                                        // 217: protocol.CMatchPlayerPermanentBuff
	(EPlayerChallengeHistoryType)(0),                                         // 218: protocol.EPlayerChallengeHistoryType
	(*CMsgStickerHeroes)(nil),                                                // 219: protocol.CMsgStickerHeroes
	(*CMsgCraftworksComponents)(nil),                                         // 220: protocol.CMsgCraftworksComponents
}
var file_dota_gcmessages_server_proto_depIdxs = []int32{
	0,   // 0: protocol.CMsgPoorNetworkConditions.detection_type:type_name -> protocol.EPoorNetworkConditionsType
	125, // 1: protocol.CMsgPoorNetworkConditions.players:type_name -> protocol.CMsgPoorNetworkConditions.Player
	191, // 2: protocol.CMsgGameserverCrash.game_state:type_name -> protocol.DOTA_GameState
	126, // 3: protocol.CMsgConnectedPlayers.connected_players:type_name -> protocol.CMsgConnectedPlayers.Player
	126, // 4: protocol.CMsgConnectedPlayers.disconnected_players:type_name -> protocol.CMsgConnectedPlayers.Player
	191, // 5: protocol.CMsgConnectedPlayers.game_state:type_name -> protocol.DOTA_GameState
	6,   // 6: protocol.CMsgConnectedPlayers.poor_network_conditions:type_name -> protocol.CMsgPoorNetworkConditions
	1,   // 7: protocol.CMsgConnectedPlayers.send_reason:type_name -> protocol.CMsgConnectedPlayers.SendReason
	127, // 8: protocol.CMsgConnectedPlayers.player_draft:type_name -> protocol.CMsgConnectedPlayers.PlayerDraft
	2,   // 9: protocol.CMsgGameServerInfo.server_type:type_name -> protocol.CMsgGameServerInfo.ServerType
	3,   // 10: protocol.CMsgGameServerInfo.allow_custom_games:type_name -> protocol.CMsgGameServerInfo.CustomGames
	192, // 11: protocol.CMsgLeaverDetected.leaver_status:type_name -> protocol.DOTALeaverStatus_t
	193, // 12: protocol.CMsgLeaverDetected.leaver_state:type_name -> protocol.CMsgLeaverState
	194, // 13: protocol.CMsgLeaverDetected.disconnect_reason:type_name -> protocol.ENetworkDisconnectionReason
	6,   // 14: protocol.CMsgLeaverDetected.poor_network_conditions:type_name -> protocol.CMsgPoorNetworkConditions
	195, // 15: protocol.CMsgDOTAFantasyFinalPlayerStats.stats:type_name -> protocol.CMsgDOTAFantasyPlayerStats
	195, // 16: protocol.CMsgDOTAFantasyLivePlayerStats.stats:type_name -> protocol.CMsgDOTAFantasyPlayerStats
	196, // 17: protocol.CMsgServerToGCRealtimeStats.delayed:type_name -> protocol.CMsgDOTARealtimeGameStatsTerse
	129, // 18: protocol.CMsgSignOutGameplayStats.teams:type_name -> protocol.CMsgSignOutGameplayStats.CTeam
	130, // 19: protocol.CMsgGameMatchSignOut.teams:type_name -> protocol.CMsgGameMatchSignOut.CTeam
	195, // 20: protocol.CMsgGameMatchSignOut.fantasy_stats:type_name -> protocol.CMsgDOTAFantasyPlayerStats
	197, // 21: protocol.CMsgGameMatchSignOut.player_strange_count_adjustments:type_name -> protocol.CMsgEconPlayerStrangeCountAdjustment
	6,   // 22: protocol.CMsgGameMatchSignOut.poor_network_conditions:type_name -> protocol.CMsgPoorNetworkConditions
	131, // 23: protocol.CMsgGameMatchSignOut.additional_msgs:type_name -> protocol.CMsgGameMatchSignOut.CAdditionalSignoutMsg
	132, // 24: protocol.CMsgGameMatchSignOut.social_feed_events:type_name -> protocol.CMsgGameMatchSignOut.CSocialFeedMatchEvent
	133, // 25: protocol.CMsgGameMatchSignOut.custom_game_data:type_name -> protocol.CMsgGameMatchSignOut.CCustomGameData
	134, // 26: protocol.CMsgGameMatchSignOut.event_game_leaderboard_entries:type_name -> protocol.CMsgGameMatchSignOut.EventGameLeaderboardEntry
	135, // 27: protocol.CMsgGameMatchSignOut.ward_placements:type_name -> protocol.CMsgGameMatchSignOut.WardPlacement
	17,  // 28: protocol.CMsgGameMatchSignOut.gameplay_stats:type_name -> protocol.CMsgSignOutGameplayStats
	198, // 29: protocol.CMsgGameMatchSignOut.extra_messages:type_name -> protocol.CExtraMsgBlock
	199, // 30: protocol.CMsgGameMatchSignOut.winning_team:type_name -> protocol.DOTA_GC_TEAM
	200, // 31: protocol.CMsgGameMatchSignOut.match_tracked_stats:type_name -> protocol.CMsgTrackedStat
	201, // 32: protocol.CMsgSignOutDraftInfo.picks_bans:type_name -> protocol.CMatchHeroSelectEvent
	202, // 33: protocol.CMsgSignOutBotInfo.bot_difficulty_radiant:type_name -> protocol.DOTABotDifficulty
	202, // 34: protocol.CMsgSignOutBotInfo.bot_difficulty_dire:type_name -> protocol.DOTABotDifficulty
	139, // 35: protocol.CMsgSignOutTextMuteInfo.text_mute_messages:type_name -> protocol.CMsgSignOutTextMuteInfo.TextMuteMessage
	140, // 36: protocol.CMsgSignOutCommunicationSummary.players:type_name -> protocol.CMsgSignOutCommunicationSummary.PlayerCommunication
	203, // 37: protocol.CMsgGameMatchSignoutResponse.match_details:type_name -> protocol.CMsgDOTAMatch
	142, // 38: protocol.CMsgGameMatchSignoutResponse.players_metadata:type_name -> protocol.CMsgGameMatchSignoutResponse.PlayerMetadata
	204, // 39: protocol.CMsgGameMatchSignoutResponse.mvp_data:type_name -> protocol.CMvpData
	205, // 40: protocol.CMsgGameMatchSignoutResponse.overworld_rewards:type_name -> protocol.CMsgOverworldMatchRewards
	206, // 41: protocol.CMsgGameMatchSignOutEventGameData.event_id:type_name -> protocol.EEvent
	143, // 42: protocol.CMsgDOTALiveScoreboardUpdate.team_good:type_name -> protocol.CMsgDOTALiveScoreboardUpdate.Team
	143, // 43: protocol.CMsgDOTALiveScoreboardUpdate.team_bad:type_name -> protocol.CMsgDOTALiveScoreboardUpdate.Team
	146, // 44: protocol.CMsgServerToGCRequestBatchPlayerResourcesResponse.results:type_name -> protocol.CMsgServerToGCRequestBatchPlayerResourcesResponse.Result
	207, // 45: protocol.CMsgTournamentItemEvent.event_type:type_name -> protocol.DOTA_TournamentEvents
	208, // 46: protocol.CMsgTournamentItemEvent.hero_statues:type_name -> protocol.CProtoItemHeroStatue
	207, // 47: protocol.CMsgTournamentItemEventResponse.event_type:type_name -> protocol.DOTA_TournamentEvents
	147, // 48: protocol.CMsgDOTAAwardEventPoints.award_points:type_name -> protocol.CMsgDOTAAwardEventPoints.AwardPoints
	206, // 49: protocol.CMsgDOTAAwardEventPoints.event_id:type_name -> protocol.EEvent
	148, // 50: protocol.CMsgServerToGCMatchConnectionStats.players:type_name -> protocol.CMsgServerToGCMatchConnectionStats.Player
	149, // 51: protocol.CSerializedCombatLog.dictionary:type_name -> protocol.CSerializedCombatLog.Dictionary
	209, // 52: protocol.CSerializedCombatLog.entries:type_name -> protocol.CMsgDOTACombatLogEntry
	152, // 53: protocol.CMsgServerToGCVictoryPredictions.records:type_name -> protocol.CMsgServerToGCVictoryPredictions.Record
	153, // 54: protocol.CMsgServerToGCKillSummaries.summaries:type_name -> protocol.CMsgServerToGCKillSummaries.KillSummary
	154, // 55: protocol.CMsgSignOutUpdatePlayerChallenge.completed:type_name -> protocol.CMsgSignOutUpdatePlayerChallenge.Challenge
	154, // 56: protocol.CMsgSignOutUpdatePlayerChallenge.rerolled:type_name -> protocol.CMsgSignOutUpdatePlayerChallenge.Challenge
	210, // 57: protocol.CMsgServerToGCRerollPlayerChallenge.reroll_msg:type_name -> protocol.CMsgClientToGCRerollPlayerChallenge
	155, // 58: protocol.CMsgSpendWager.players:type_name -> protocol.CMsgSpendWager.Player
	206, // 59: protocol.CMsgSpendWager.event_id:type_name -> protocol.EEvent
	156, // 60: protocol.CMsgSignOutXPCoins.players:type_name -> protocol.CMsgSignOutXPCoins.Player
	206, // 61: protocol.CMsgSignOutXPCoins.event_id:type_name -> protocol.EEvent
	157, // 62: protocol.CMsgSignOutBounties.bounties:type_name -> protocol.CMsgSignOutBounties.Bounty
	206, // 63: protocol.CMsgSignOutBounties.event_id:type_name -> protocol.EEvent
	206, // 64: protocol.CMsgSignOutCommunityGoalProgress.event_id:type_name -> protocol.EEvent
	158, // 65: protocol.CMsgSignOutCommunityGoalProgress.event_increments:type_name -> protocol.CMsgSignOutCommunityGoalProgress.EventGoalIncrement
	159, // 66: protocol.CMsgServerToGCCompendiumInGamePredictionResults.results:type_name -> protocol.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult
	160, // 67: protocol.CMsgServerToGCCompendiumChosenInGamePredictions.predictions_chosen:type_name -> protocol.CMsgServerToGCCompendiumChosenInGamePredictions.Prediction
	65,  // 68: protocol.CMsgGCToGCCompendiumInGamePredictionResults.results:type_name -> protocol.CMsgServerToGCCompendiumInGamePredictionResults
	162, // 69: protocol.CMsgServerToGCMatchPlayerItemPurchaseHistory.players:type_name -> protocol.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player
	164, // 70: protocol.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.players:type_name -> protocol.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player
	167, // 71: protocol.CMsgServerToGCMatchStateHistory.match_states:type_name -> protocol.CMsgServerToGCMatchStateHistory.MatchState
	167, // 72: protocol.CMsgMatchStateSteamMLEntry.match_state:type_name -> protocol.CMsgServerToGCMatchStateHistory.MatchState
	168, // 73: protocol.CMsgServerToGCPlayerChallengeHistory.challenge_records:type_name -> protocol.CMsgServerToGCPlayerChallengeHistory.PlayerChallenge
	169, // 74: protocol.CMsgServerToGCCavernCrawlIsHeroActiveResponse.map_results:type_name -> protocol.CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults
	170, // 75: protocol.CMsgNeutralItemStats.neutral_items:type_name -> protocol.CMsgNeutralItemStats.NeutralItem
	171, // 76: protocol.CMsgGCToServerLobbyHeroBanRates.ban_data:type_name -> protocol.CMsgGCToServerLobbyHeroBanRates.HeroBanEntry
	173, // 77: protocol.CMsgSignOutGuildContractProgress.player_contracts:type_name -> protocol.CMsgSignOutGuildContractProgress.PlayerContract
	174, // 78: protocol.CMsgSignOutGuildChallengeProgress.guild_challenges_progresses:type_name -> protocol.CMsgSignOutGuildChallengeProgress.ChallengeProgress
	175, // 79: protocol.CMsgSignOutMVPStats.players:type_name -> protocol.CMsgSignOutMVPStats.Player
	178, // 80: protocol.CMsgServerToGCGetGuildContractsResponse.player_contracts:type_name -> protocol.CMsgServerToGCGetGuildContractsResponse.Player
	180, // 81: protocol.CMsgMatchDiretideCandy.player_candy_data:type_name -> protocol.CMsgMatchDiretideCandy.PlayerCandy
	206, // 82: protocol.CMsgMatchDiretideCandy.event_id:type_name -> protocol.EEvent
	181, // 83: protocol.CMsgGCToServerCheerData.cheer_types:type_name -> protocol.CMsgGCToServerCheerData.CheerTypeCount
	90,  // 84: protocol.CMsgGCToServerCheerConfig.cheer_config:type_name -> protocol.CMsgCheerConfig
	90,  // 85: protocol.CMsgServerToGCGetCheerConfigResponse.cheer_config:type_name -> protocol.CMsgCheerConfig
	96,  // 86: protocol.CMsgCheerState.cheer_types:type_name -> protocol.CMsgCheerTypeState
	90,  // 87: protocol.CMsgServerToGCReportCheerState.cheer_config:type_name -> protocol.CMsgCheerConfig
	97,  // 88: protocol.CMsgServerToGCReportCheerState.cheer_state:type_name -> protocol.CMsgCheerState
	182, // 89: protocol.CMsgServerToGCGetStickerHeroesResponse.players:type_name -> protocol.CMsgServerToGCGetStickerHeroesResponse.Player
	183, // 90: protocol.CMsgSteamLearnMatchInfoTeam.radiant_players:type_name -> protocol.CMsgSteamLearnMatchInfoTeam.Player
	183, // 91: protocol.CMsgSteamLearnMatchInfoTeam.dire_players:type_name -> protocol.CMsgSteamLearnMatchInfoTeam.Player
	184, // 92: protocol.CMsgSteamLearnPlayerTimedStats.stat_buckets:type_name -> protocol.CMsgSteamLearnPlayerTimedStats.StatBucket
	186, // 93: protocol.CMsgSteamLearnMatchStateV5.radiant_state:type_name -> protocol.CMsgSteamLearnMatchStateV5.TeamState
	186, // 94: protocol.CMsgSteamLearnMatchStateV5.dire_state:type_name -> protocol.CMsgSteamLearnMatchStateV5.TeamState
	187, // 95: protocol.CMsgSteamLearnWardPlacement.ward_loc:type_name -> protocol.CMsgSteamLearnWardPlacement.Location
	187, // 96: protocol.CMsgSteamLearnWardPlacement.existing_ward_locs:type_name -> protocol.CMsgSteamLearnWardPlacement.Location
	188, // 97: protocol.CMsgSignOutMapStats.players:type_name -> protocol.CMsgSignOutMapStats.Player
	211, // 98: protocol.CMsgSignOutMapStats.global_stats:type_name -> protocol.CMsgMapStatsSnapshot
	212, // 99: protocol.CMsgServerToGCNewBloomGiftResponse.result:type_name -> protocol.ENewBloomGiftingResponse
	189, // 100: protocol.CMsgSignOutOverworld.players:type_name -> protocol.CMsgSignOutOverworld.Player
	206, // 101: protocol.CMsgSignOutOverworld.event_id:type_name -> protocol.EEvent
	190, // 102: protocol.CMsgSignOutCraftworks.players:type_name -> protocol.CMsgSignOutCraftworks.Player
	206, // 103: protocol.CMsgSignOutCraftworks.event_id:type_name -> protocol.EEvent
	194, // 104: protocol.CMsgPoorNetworkConditions.Player.disconnect_reason:type_name -> protocol.ENetworkDisconnectionReason
	193, // 105: protocol.CMsgConnectedPlayers.Player.leaver_state:type_name -> protocol.CMsgLeaverState
	194, // 106: protocol.CMsgConnectedPlayers.Player.disconnect_reason:type_name -> protocol.ENetworkDisconnectionReason
	199, // 107: protocol.CMsgConnectedPlayers.PlayerDraft.team:type_name -> protocol.DOTA_GC_TEAM
	213, // 108: protocol.CMsgSignOutGameplayStats.CPlayer.timed_player_stats:type_name -> protocol.CMatchPlayerTimedStats
	214, // 109: protocol.CMsgSignOutGameplayStats.CTeam.timed_team_stats:type_name -> protocol.CMatchTeamTimedStats
	128, // 110: protocol.CMsgSignOutGameplayStats.CTeam.players:type_name -> protocol.CMsgSignOutGameplayStats.CPlayer
	136, // 111: protocol.CMsgGameMatchSignOut.CTeam.players:type_name -> protocol.CMsgGameMatchSignOut.CTeam.CPlayer
	200, // 112: protocol.CMsgGameMatchSignOut.CTeam.team_tracked_stats:type_name -> protocol.CMsgTrackedStat
	215, // 113: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades:type_name -> protocol.CMatchPlayerAbilityUpgrade
	216, // 114: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory:type_name -> protocol.CMatchAdditionalUnitInventory
	217, // 115: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs:type_name -> protocol.CMatchPlayerPermanentBuff
	137, // 116: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data:type_name -> protocol.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData
	138, // 117: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_received:type_name -> protocol.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived
	138, // 118: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_dealt:type_name -> protocol.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived
	199, // 119: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.team_number:type_name -> protocol.DOTA_GC_TEAM
	200, // 120: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.player_tracked_stats:type_name -> protocol.CMsgTrackedStat
	4,   // 121: protocol.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived.damage_type:type_name -> protocol.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType
	141, // 122: protocol.CMsgSignOutCommunicationSummary.PlayerCommunication.ping_details:type_name -> protocol.CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail
	144, // 123: protocol.CMsgDOTALiveScoreboardUpdate.Team.players:type_name -> protocol.CMsgDOTALiveScoreboardUpdate.Team.Player
	5,   // 124: protocol.CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_state:type_name -> protocol.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState
	145, // 125: protocol.CMsgDOTALiveScoreboardUpdate.Team.Player.abilities:type_name -> protocol.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility
	150, // 126: protocol.CSerializedCombatLog.Dictionary.strings:type_name -> protocol.CSerializedCombatLog.Dictionary.DictString
	151, // 127: protocol.CMsgServerToGCVictoryPredictions.Record.prediction_items:type_name -> protocol.CMsgServerToGCVictoryPredictions.PredictionItem
	206, // 128: protocol.CMsgSignOutUpdatePlayerChallenge.Challenge.event_id:type_name -> protocol.EEvent
	161, // 129: protocol.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases:type_name -> protocol.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase
	163, // 130: protocol.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.item_equips:type_name -> protocol.CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip
	165, // 131: protocol.CMsgServerToGCMatchStateHistory.TeamState.player_states:type_name -> protocol.CMsgServerToGCMatchStateHistory.PlayerState
	166, // 132: protocol.CMsgServerToGCMatchStateHistory.MatchState.radiant_state:type_name -> protocol.CMsgServerToGCMatchStateHistory.TeamState
	166, // 133: protocol.CMsgServerToGCMatchStateHistory.MatchState.dire_state:type_name -> protocol.CMsgServerToGCMatchStateHistory.TeamState
	218, // 134: protocol.CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.challenge_type:type_name -> protocol.EPlayerChallengeHistoryType
	172, // 135: protocol.CMsgSignOutGuildContractProgress.PlayerContract.completed_contracts:type_name -> protocol.CMsgSignOutGuildContractProgress.CompletedGuildEventContracts
	176, // 136: protocol.CMsgSignOutMVPStats.Player.kill_eater_events:type_name -> protocol.CMsgSignOutMVPStats.Player.KillEaterEvent
	206, // 137: protocol.CMsgServerToGCGetGuildContractsResponse.Player.event_id:type_name -> protocol.EEvent
	177, // 138: protocol.CMsgServerToGCGetGuildContractsResponse.Player.contracts:type_name -> protocol.CMsgServerToGCGetGuildContractsResponse.ContractDetails
	179, // 139: protocol.CMsgMatchDiretideCandy.PlayerCandy.candy_breakdown:type_name -> protocol.CMsgMatchDiretideCandy.CandyDetails
	219, // 140: protocol.CMsgServerToGCGetStickerHeroesResponse.Player.stickers:type_name -> protocol.CMsgStickerHeroes
	185, // 141: protocol.CMsgSteamLearnMatchStateV5.TeamState.player_states:type_name -> protocol.CMsgSteamLearnMatchStateV5.PlayerState
	211, // 142: protocol.CMsgSignOutMapStats.Player.personal_stats:type_name -> protocol.CMsgMapStatsSnapshot
	220, // 143: protocol.CMsgSignOutCraftworks.Player.components:type_name -> protocol.CMsgCraftworksComponents
	144, // [144:144] is the sub-list for method output_type
	144, // [144:144] is the sub-list for method input_type
	144, // [144:144] is the sub-list for extension type_name
	144, // [144:144] is the sub-list for extension extendee
	0,   // [0:144] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_server_proto_init() }
func file_dota_gcmessages_server_proto_init() {
	if File_dota_gcmessages_server_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_valveextensions_proto_init()
	file_dota_shared_enums_proto_init()
	file_dota_gcmessages_common_proto_init()
	file_econ_gcmessages_proto_init()
	file_base_gcmessages_proto_init()
	file_network_connection_proto_init()
	file_dota_gcmessages_common_lobby_proto_init()
	file_dota_gcmessages_common_match_management_proto_init()
	file_dota_gcmessages_common_overworld_proto_init()
	file_dota_gcmessages_common_craftworks_proto_init()
	file_gcsdk_gcmessages_proto_init()
	file_steammessages_steamlearn_steamworkssdk_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dota_gcmessages_server_proto_rawDesc), len(file_dota_gcmessages_server_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   185,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_server_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_server_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_server_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_server_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_server_proto = out.File
	file_dota_gcmessages_server_proto_goTypes = nil
	file_dota_gcmessages_server_proto_depIdxs = nil
}
