// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dota_match_metadata.proto

package protocol

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CDOTAMatchMetadataFile struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Version         *int32                 `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	MatchId         *uint64                `protobuf:"varint,2,req,name=match_id,json=matchId" json:"match_id,omitempty"`
	Metadata        *CDOTAMatchMetadata    `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	PrivateMetadata []byte                 `protobuf:"bytes,5,opt,name=private_metadata,json=privateMetadata" json:"private_metadata,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDOTAMatchMetadataFile) Reset() {
	*x = CDOTAMatchMetadataFile{}
	mi := &file_dota_match_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadataFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadataFile) ProtoMessage() {}

func (x *CDOTAMatchMetadataFile) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadataFile.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadataFile) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *CDOTAMatchMetadataFile) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CDOTAMatchMetadataFile) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CDOTAMatchMetadataFile) GetMetadata() *CDOTAMatchMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CDOTAMatchMetadataFile) GetPrivateMetadata() []byte {
	if x != nil {
		return x.PrivateMetadata
	}
	return nil
}

type CDOTAMatchMetadata struct {
	state                  protoimpl.MessageState                       `protogen:"open.v1"`
	Teams                  []*CDOTAMatchMetadata_Team                   `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	LobbyId                *uint64                                      `protobuf:"fixed64,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ReportUntilTime        *uint64                                      `protobuf:"fixed64,4,opt,name=report_until_time,json=reportUntilTime" json:"report_until_time,omitempty"`
	EventGameCustomTable   []byte                                       `protobuf:"bytes,5,opt,name=event_game_custom_table,json=eventGameCustomTable" json:"event_game_custom_table,omitempty"`
	PrimaryEventId         *uint32                                      `protobuf:"varint,6,opt,name=primary_event_id,json=primaryEventId" json:"primary_event_id,omitempty"`
	MatchmakingStats       *CMsgMatchMatchmakingStats                   `protobuf:"bytes,8,opt,name=matchmaking_stats,json=matchmakingStats" json:"matchmaking_stats,omitempty"`
	MvpData                *CMvpData                                    `protobuf:"bytes,9,opt,name=mvp_data,json=mvpData" json:"mvp_data,omitempty"`
	GuildChallengeProgress []*CDOTAMatchMetadata_GuildChallengeProgress `protobuf:"bytes,10,rep,name=guild_challenge_progress,json=guildChallengeProgress" json:"guild_challenge_progress,omitempty"`
	CustomPostGameTable    []byte                                       `protobuf:"bytes,11,opt,name=custom_post_game_table,json=customPostGameTable" json:"custom_post_game_table,omitempty"`
	MatchTips              []*CDOTAMatchMetadata_Tip                    `protobuf:"bytes,12,rep,name=match_tips,json=matchTips" json:"match_tips,omitempty"`
	MatchTrackedStats      []*CMsgTrackedStat                           `protobuf:"bytes,13,rep,name=match_tracked_stats,json=matchTrackedStats" json:"match_tracked_stats,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata) Reset() {
	*x = CDOTAMatchMetadata{}
	mi := &file_dota_match_metadata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata) ProtoMessage() {}

func (x *CDOTAMatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *CDOTAMatchMetadata) GetTeams() []*CDOTAMatchMetadata_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CDOTAMatchMetadata) GetReportUntilTime() uint64 {
	if x != nil && x.ReportUntilTime != nil {
		return *x.ReportUntilTime
	}
	return 0
}

func (x *CDOTAMatchMetadata) GetEventGameCustomTable() []byte {
	if x != nil {
		return x.EventGameCustomTable
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetPrimaryEventId() uint32 {
	if x != nil && x.PrimaryEventId != nil {
		return *x.PrimaryEventId
	}
	return 0
}

func (x *CDOTAMatchMetadata) GetMatchmakingStats() *CMsgMatchMatchmakingStats {
	if x != nil {
		return x.MatchmakingStats
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetMvpData() *CMvpData {
	if x != nil {
		return x.MvpData
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetGuildChallengeProgress() []*CDOTAMatchMetadata_GuildChallengeProgress {
	if x != nil {
		return x.GuildChallengeProgress
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetCustomPostGameTable() []byte {
	if x != nil {
		return x.CustomPostGameTable
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetMatchTips() []*CDOTAMatchMetadata_Tip {
	if x != nil {
		return x.MatchTips
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetMatchTrackedStats() []*CMsgTrackedStat {
	if x != nil {
		return x.MatchTrackedStats
	}
	return nil
}

type CDOTAMatchPrivateMetadata struct {
	state               protoimpl.MessageState                  `protogen:"open.v1"`
	Teams               []*CDOTAMatchPrivateMetadata_Team       `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	GraphWinProbability []float32                               `protobuf:"fixed32,2,rep,name=graph_win_probability,json=graphWinProbability" json:"graph_win_probability,omitempty"`
	StringNames         []*CDOTAMatchPrivateMetadata_StringName `protobuf:"bytes,3,rep,name=string_names,json=stringNames" json:"string_names,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata) Reset() {
	*x = CDOTAMatchPrivateMetadata{}
	mi := &file_dota_match_metadata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *CDOTAMatchPrivateMetadata) GetTeams() []*CDOTAMatchPrivateMetadata_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata) GetGraphWinProbability() []float32 {
	if x != nil {
		return x.GraphWinProbability
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata) GetStringNames() []*CDOTAMatchPrivateMetadata_StringName {
	if x != nil {
		return x.StringNames
	}
	return nil
}

type CDOTAMatchMetadata_EconItem struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	DefIndex      *uint32                 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Quality       *uint32                 `protobuf:"varint,2,opt,name=quality,def=4" json:"quality,omitempty"`
	Attribute     []*CSOEconItemAttribute `protobuf:"bytes,3,rep,name=attribute" json:"attribute,omitempty"`
	Style         *uint32                 `protobuf:"varint,4,opt,name=style,def=0" json:"style,omitempty"`
	EquippedState []*CSOEconItemEquipped  `protobuf:"bytes,5,rep,name=equipped_state,json=equippedState" json:"equipped_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CDOTAMatchMetadata_EconItem fields.
const (
	Default_CDOTAMatchMetadata_EconItem_Quality = uint32(4)
	Default_CDOTAMatchMetadata_EconItem_Style   = uint32(0)
)

func (x *CDOTAMatchMetadata_EconItem) Reset() {
	*x = CDOTAMatchMetadata_EconItem{}
	mi := &file_dota_match_metadata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_EconItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_EconItem) ProtoMessage() {}

func (x *CDOTAMatchMetadata_EconItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_EconItem.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_EconItem) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CDOTAMatchMetadata_EconItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CDOTAMatchMetadata_EconItem) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return Default_CDOTAMatchMetadata_EconItem_Quality
}

func (x *CDOTAMatchMetadata_EconItem) GetAttribute() []*CSOEconItemAttribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *CDOTAMatchMetadata_EconItem) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return Default_CDOTAMatchMetadata_EconItem_Style
}

func (x *CDOTAMatchMetadata_EconItem) GetEquippedState() []*CSOEconItemEquipped {
	if x != nil {
		return x.EquippedState
	}
	return nil
}

type CDOTAMatchMetadata_Team struct {
	state             protoimpl.MessageState            `protogen:"open.v1"`
	DotaTeam          *uint32                           `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Players           []*CDOTAMatchMetadata_Team_Player `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	GraphExperience   []float32                         `protobuf:"fixed32,3,rep,name=graph_experience,json=graphExperience" json:"graph_experience,omitempty"`
	GraphGoldEarned   []float32                         `protobuf:"fixed32,4,rep,name=graph_gold_earned,json=graphGoldEarned" json:"graph_gold_earned,omitempty"`
	GraphNetWorth     []float32                         `protobuf:"fixed32,5,rep,name=graph_net_worth,json=graphNetWorth" json:"graph_net_worth,omitempty"`
	CmFirstPick       *bool                             `protobuf:"varint,6,opt,name=cm_first_pick,json=cmFirstPick" json:"cm_first_pick,omitempty"`
	CmCaptainPlayerId *int32                            `protobuf:"varint,7,opt,name=cm_captain_player_id,json=cmCaptainPlayerId,def=-1" json:"cm_captain_player_id,omitempty"`
	CmPenalty         *uint32                           `protobuf:"varint,10,opt,name=cm_penalty,json=cmPenalty" json:"cm_penalty,omitempty"`
	TeamTrackedStats  []*CMsgTrackedStat                `protobuf:"bytes,11,rep,name=team_tracked_stats,json=teamTrackedStats" json:"team_tracked_stats,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CDOTAMatchMetadata_Team fields.
const (
	Default_CDOTAMatchMetadata_Team_CmCaptainPlayerId = int32(-1)
)

func (x *CDOTAMatchMetadata_Team) Reset() {
	*x = CDOTAMatchMetadata_Team{}
	mi := &file_dota_match_metadata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CDOTAMatchMetadata_Team) GetDotaTeam() uint32 {
	if x != nil && x.DotaTeam != nil {
		return *x.DotaTeam
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team) GetPlayers() []*CDOTAMatchMetadata_Team_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetGraphExperience() []float32 {
	if x != nil {
		return x.GraphExperience
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetGraphGoldEarned() []float32 {
	if x != nil {
		return x.GraphGoldEarned
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetGraphNetWorth() []float32 {
	if x != nil {
		return x.GraphNetWorth
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetCmFirstPick() bool {
	if x != nil && x.CmFirstPick != nil {
		return *x.CmFirstPick
	}
	return false
}

func (x *CDOTAMatchMetadata_Team) GetCmCaptainPlayerId() int32 {
	if x != nil && x.CmCaptainPlayerId != nil {
		return *x.CmCaptainPlayerId
	}
	return Default_CDOTAMatchMetadata_Team_CmCaptainPlayerId
}

func (x *CDOTAMatchMetadata_Team) GetCmPenalty() uint32 {
	if x != nil && x.CmPenalty != nil {
		return *x.CmPenalty
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team) GetTeamTrackedStats() []*CMsgTrackedStat {
	if x != nil {
		return x.TeamTrackedStats
	}
	return nil
}

type CDOTAMatchMetadata_GuildChallengeProgress struct {
	state                        protoimpl.MessageState                                          `protogen:"open.v1"`
	GuildId                      *uint32                                                         `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId                      *EEvent                                                         `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	ChallengeInstanceId          *uint32                                                         `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter           *uint32                                                         `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ChallengeTimestamp           *uint32                                                         `protobuf:"varint,5,opt,name=challenge_timestamp,json=challengeTimestamp" json:"challenge_timestamp,omitempty"`
	ChallengeProgressAtStart     *uint32                                                         `protobuf:"varint,6,opt,name=challenge_progress_at_start,json=challengeProgressAtStart" json:"challenge_progress_at_start,omitempty"`
	ChallengeProgressAccumulated *uint32                                                         `protobuf:"varint,7,opt,name=challenge_progress_accumulated,json=challengeProgressAccumulated" json:"challenge_progress_accumulated,omitempty"`
	IndividualProgress           []*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress `protobuf:"bytes,8,rep,name=individual_progress,json=individualProgress" json:"individual_progress,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

// Default values for CDOTAMatchMetadata_GuildChallengeProgress fields.
const (
	Default_CDOTAMatchMetadata_GuildChallengeProgress_EventId = EEvent_EVENT_ID_NONE
)

func (x *CDOTAMatchMetadata_GuildChallengeProgress) Reset() {
	*x = CDOTAMatchMetadata_GuildChallengeProgress{}
	mi := &file_dota_match_metadata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_GuildChallengeProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_GuildChallengeProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_GuildChallengeProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CDOTAMatchMetadata_GuildChallengeProgress_EventId
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeTimestamp() uint32 {
	if x != nil && x.ChallengeTimestamp != nil {
		return *x.ChallengeTimestamp
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeProgressAtStart() uint32 {
	if x != nil && x.ChallengeProgressAtStart != nil {
		return *x.ChallengeProgressAtStart
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeProgressAccumulated() uint32 {
	if x != nil && x.ChallengeProgressAccumulated != nil {
		return *x.ChallengeProgressAccumulated
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetIndividualProgress() []*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress {
	if x != nil {
		return x.IndividualProgress
	}
	return nil
}

type CDOTAMatchMetadata_Tip struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SourcePlayerSlot *uint32                `protobuf:"varint,1,opt,name=source_player_slot,json=sourcePlayerSlot" json:"source_player_slot,omitempty"`
	TargetPlayerSlot *uint32                `protobuf:"varint,2,opt,name=target_player_slot,json=targetPlayerSlot" json:"target_player_slot,omitempty"`
	TipAmount        *uint32                `protobuf:"varint,3,opt,name=tip_amount,json=tipAmount" json:"tip_amount,omitempty"`
	EventId          *EEvent                `protobuf:"varint,4,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CDOTAMatchMetadata_Tip fields.
const (
	Default_CDOTAMatchMetadata_Tip_EventId = EEvent_EVENT_ID_NONE
)

func (x *CDOTAMatchMetadata_Tip) Reset() {
	*x = CDOTAMatchMetadata_Tip{}
	mi := &file_dota_match_metadata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Tip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Tip) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Tip) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Tip.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Tip) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 3}
}

func (x *CDOTAMatchMetadata_Tip) GetSourcePlayerSlot() uint32 {
	if x != nil && x.SourcePlayerSlot != nil {
		return *x.SourcePlayerSlot
	}
	return 0
}

func (x *CDOTAMatchMetadata_Tip) GetTargetPlayerSlot() uint32 {
	if x != nil && x.TargetPlayerSlot != nil {
		return *x.TargetPlayerSlot
	}
	return 0
}

func (x *CDOTAMatchMetadata_Tip) GetTipAmount() uint32 {
	if x != nil && x.TipAmount != nil {
		return *x.TipAmount
	}
	return 0
}

func (x *CDOTAMatchMetadata_Tip) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CDOTAMatchMetadata_Tip_EventId
}

type CDOTAMatchMetadata_Team_PlayerKill struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VictimSlot    *uint32                `protobuf:"varint,1,opt,name=victim_slot,json=victimSlot" json:"victim_slot,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_PlayerKill) Reset() {
	*x = CDOTAMatchMetadata_Team_PlayerKill{}
	mi := &file_dota_match_metadata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_PlayerKill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_PlayerKill) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_PlayerKill) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_PlayerKill.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_PlayerKill) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *CDOTAMatchMetadata_Team_PlayerKill) GetVictimSlot() uint32 {
	if x != nil && x.VictimSlot != nil {
		return *x.VictimSlot
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_PlayerKill) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CDOTAMatchMetadata_Team_ItemPurchase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        *int32                 `protobuf:"varint,1,opt,name=item_id,json=itemId,def=-1" json:"item_id,omitempty"`
	PurchaseTime  *int32                 `protobuf:"varint,2,opt,name=purchase_time,json=purchaseTime" json:"purchase_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CDOTAMatchMetadata_Team_ItemPurchase fields.
const (
	Default_CDOTAMatchMetadata_Team_ItemPurchase_ItemId = int32(-1)
)

func (x *CDOTAMatchMetadata_Team_ItemPurchase) Reset() {
	*x = CDOTAMatchMetadata_Team_ItemPurchase{}
	mi := &file_dota_match_metadata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_ItemPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_ItemPurchase) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_ItemPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_ItemPurchase.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_ItemPurchase) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *CDOTAMatchMetadata_Team_ItemPurchase) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return Default_CDOTAMatchMetadata_Team_ItemPurchase_ItemId
}

func (x *CDOTAMatchMetadata_Team_ItemPurchase) GetPurchaseTime() int32 {
	if x != nil && x.PurchaseTime != nil {
		return *x.PurchaseTime
	}
	return 0
}

type CDOTAMatchMetadata_Team_InventorySnapshot struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ItemId               []int32                `protobuf:"varint,1,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
	GameTime             *int32                 `protobuf:"varint,2,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Kills                *uint32                `protobuf:"varint,3,opt,name=kills" json:"kills,omitempty"`
	Deaths               *uint32                `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists              *uint32                `protobuf:"varint,5,opt,name=assists" json:"assists,omitempty"`
	Level                *uint32                `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
	BackpackItemId       []int32                `protobuf:"varint,7,rep,name=backpack_item_id,json=backpackItemId" json:"backpack_item_id,omitempty"`
	NeutralItemId        *int32                 `protobuf:"varint,8,opt,name=neutral_item_id,json=neutralItemId,def=-1" json:"neutral_item_id,omitempty"`
	NeutralEnhancementId *int32                 `protobuf:"varint,9,opt,name=neutral_enhancement_id,json=neutralEnhancementId,def=-1" json:"neutral_enhancement_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for CDOTAMatchMetadata_Team_InventorySnapshot fields.
const (
	Default_CDOTAMatchMetadata_Team_InventorySnapshot_NeutralItemId        = int32(-1)
	Default_CDOTAMatchMetadata_Team_InventorySnapshot_NeutralEnhancementId = int32(-1)
)

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) Reset() {
	*x = CDOTAMatchMetadata_Team_InventorySnapshot{}
	mi := &file_dota_match_metadata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_InventorySnapshot) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_InventorySnapshot.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_InventorySnapshot) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 2}
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetItemId() []int32 {
	if x != nil {
		return x.ItemId
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetBackpackItemId() []int32 {
	if x != nil {
		return x.BackpackItemId
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetNeutralItemId() int32 {
	if x != nil && x.NeutralItemId != nil {
		return *x.NeutralItemId
	}
	return Default_CDOTAMatchMetadata_Team_InventorySnapshot_NeutralItemId
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetNeutralEnhancementId() int32 {
	if x != nil && x.NeutralEnhancementId != nil {
		return *x.NeutralEnhancementId
	}
	return Default_CDOTAMatchMetadata_Team_InventorySnapshot_NeutralEnhancementId
}

type CDOTAMatchMetadata_Team_AutoStyleCriteria struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NameToken     *uint32                `protobuf:"varint,1,opt,name=name_token,json=nameToken" json:"name_token,omitempty"`
	Value         *float32               `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) Reset() {
	*x = CDOTAMatchMetadata_Team_AutoStyleCriteria{}
	mi := &file_dota_match_metadata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_AutoStyleCriteria) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_AutoStyleCriteria.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_AutoStyleCriteria) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 3}
}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) GetNameToken() uint32 {
	if x != nil && x.NameToken != nil {
		return *x.NameToken
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CDOTAMatchMetadata_Team_StrangeGemProgress struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	KillEaterType     *uint32                `protobuf:"varint,1,opt,name=kill_eater_type,json=killEaterType" json:"kill_eater_type,omitempty"`
	GemItemDefIndex   *uint32                `protobuf:"varint,2,opt,name=gem_item_def_index,json=gemItemDefIndex" json:"gem_item_def_index,omitempty"`
	RequiredHeroId    *int32                 `protobuf:"varint,3,opt,name=required_hero_id,json=requiredHeroId" json:"required_hero_id,omitempty"`
	StartingValue     *uint32                `protobuf:"varint,4,opt,name=starting_value,json=startingValue" json:"starting_value,omitempty"`
	EndingValue       *uint32                `protobuf:"varint,5,opt,name=ending_value,json=endingValue" json:"ending_value,omitempty"`
	OwnerItemDefIndex *uint32                `protobuf:"varint,6,opt,name=owner_item_def_index,json=ownerItemDefIndex" json:"owner_item_def_index,omitempty"`
	OwnerItemId       *uint64                `protobuf:"varint,7,opt,name=owner_item_id,json=ownerItemId" json:"owner_item_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) Reset() {
	*x = CDOTAMatchMetadata_Team_StrangeGemProgress{}
	mi := &file_dota_match_metadata_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_StrangeGemProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_StrangeGemProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_StrangeGemProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 4}
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetKillEaterType() uint32 {
	if x != nil && x.KillEaterType != nil {
		return *x.KillEaterType
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetGemItemDefIndex() uint32 {
	if x != nil && x.GemItemDefIndex != nil {
		return *x.GemItemDefIndex
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetRequiredHeroId() int32 {
	if x != nil && x.RequiredHeroId != nil {
		return *x.RequiredHeroId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetStartingValue() uint32 {
	if x != nil && x.StartingValue != nil {
		return *x.StartingValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetEndingValue() uint32 {
	if x != nil && x.EndingValue != nil {
		return *x.EndingValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetOwnerItemDefIndex() uint32 {
	if x != nil && x.OwnerItemDefIndex != nil {
		return *x.OwnerItemDefIndex
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetOwnerItemId() uint64 {
	if x != nil && x.OwnerItemId != nil {
		return *x.OwnerItemId
	}
	return 0
}

type CDOTAMatchMetadata_Team_VictoryPrediction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        *uint64                `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemDefIndex  *uint32                `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	StartingValue *uint32                `protobuf:"varint,3,opt,name=starting_value,json=startingValue" json:"starting_value,omitempty"`
	IsVictory     *bool                  `protobuf:"varint,4,opt,name=is_victory,json=isVictory" json:"is_victory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) Reset() {
	*x = CDOTAMatchMetadata_Team_VictoryPrediction{}
	mi := &file_dota_match_metadata_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_VictoryPrediction) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_VictoryPrediction.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_VictoryPrediction) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 5}
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) GetItemDefIndex() uint32 {
	if x != nil && x.ItemDefIndex != nil {
		return *x.ItemDefIndex
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) GetStartingValue() uint32 {
	if x != nil && x.StartingValue != nil {
		return *x.StartingValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) GetIsVictory() bool {
	if x != nil && x.IsVictory != nil {
		return *x.IsVictory
	}
	return false
}

type CDOTAMatchMetadata_Team_SubChallenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SlotId        *uint32                `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	StartValue    *uint32                `protobuf:"varint,2,opt,name=start_value,json=startValue" json:"start_value,omitempty"`
	EndValue      *uint32                `protobuf:"varint,3,opt,name=end_value,json=endValue" json:"end_value,omitempty"`
	Completed     *bool                  `protobuf:"varint,4,opt,name=completed" json:"completed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) Reset() {
	*x = CDOTAMatchMetadata_Team_SubChallenge{}
	mi := &file_dota_match_metadata_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_SubChallenge) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_SubChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_SubChallenge.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_SubChallenge) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 6}
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) GetStartValue() uint32 {
	if x != nil && x.StartValue != nil {
		return *x.StartValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) GetEndValue() uint32 {
	if x != nil && x.EndValue != nil {
		return *x.EndValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) GetCompleted() bool {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return false
}

type CDOTAMatchMetadata_Team_CavernChallengeResult struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CompletedPathId *uint32                `protobuf:"varint,1,opt,name=completed_path_id,json=completedPathId,def=255" json:"completed_path_id,omitempty"`
	ClaimedRoomId   *uint32                `protobuf:"varint,2,opt,name=claimed_room_id,json=claimedRoomId,def=255" json:"claimed_room_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CDOTAMatchMetadata_Team_CavernChallengeResult fields.
const (
	Default_CDOTAMatchMetadata_Team_CavernChallengeResult_CompletedPathId = uint32(255)
	Default_CDOTAMatchMetadata_Team_CavernChallengeResult_ClaimedRoomId   = uint32(255)
)

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) Reset() {
	*x = CDOTAMatchMetadata_Team_CavernChallengeResult{}
	mi := &file_dota_match_metadata_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_CavernChallengeResult) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_CavernChallengeResult.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_CavernChallengeResult) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 7}
}

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) GetCompletedPathId() uint32 {
	if x != nil && x.CompletedPathId != nil {
		return *x.CompletedPathId
	}
	return Default_CDOTAMatchMetadata_Team_CavernChallengeResult_CompletedPathId
}

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) GetClaimedRoomId() uint32 {
	if x != nil && x.ClaimedRoomId != nil {
		return *x.ClaimedRoomId
	}
	return Default_CDOTAMatchMetadata_Team_CavernChallengeResult_ClaimedRoomId
}

type CDOTAMatchMetadata_Team_ActionGrant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActionId      *uint32                `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	Quantity      *uint32                `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	Audit         *uint32                `protobuf:"varint,3,opt,name=audit" json:"audit,omitempty"`
	AuditData     *uint64                `protobuf:"varint,5,opt,name=audit_data,json=auditData" json:"audit_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) Reset() {
	*x = CDOTAMatchMetadata_Team_ActionGrant{}
	mi := &file_dota_match_metadata_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_ActionGrant) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_ActionGrant) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_ActionGrant.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_ActionGrant) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 8}
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) GetAudit() uint32 {
	if x != nil && x.Audit != nil {
		return *x.Audit
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) GetAuditData() uint64 {
	if x != nil && x.AuditData != nil {
		return *x.AuditData
	}
	return 0
}

type CDOTAMatchMetadata_Team_CandyGrant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Points        *uint32                `protobuf:"varint,1,opt,name=points" json:"points,omitempty"`
	Reason        *uint32                `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_CandyGrant) Reset() {
	*x = CDOTAMatchMetadata_Team_CandyGrant{}
	mi := &file_dota_match_metadata_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_CandyGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_CandyGrant) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_CandyGrant) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_CandyGrant.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_CandyGrant) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 9}
}

func (x *CDOTAMatchMetadata_Team_CandyGrant) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_CandyGrant) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CDOTAMatchMetadata_Team_PeriodicResourceData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PeriodicResourceId *uint32                `protobuf:"varint,1,opt,name=periodic_resource_id,json=periodicResourceId" json:"periodic_resource_id,omitempty"`
	Remaining          *uint32                `protobuf:"varint,2,opt,name=remaining" json:"remaining,omitempty"`
	Max                *uint32                `protobuf:"varint,3,opt,name=max" json:"max,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_PeriodicResourceData) Reset() {
	*x = CDOTAMatchMetadata_Team_PeriodicResourceData{}
	mi := &file_dota_match_metadata_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_PeriodicResourceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_PeriodicResourceData) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_PeriodicResourceData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_PeriodicResourceData.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_PeriodicResourceData) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 10}
}

func (x *CDOTAMatchMetadata_Team_PeriodicResourceData) GetPeriodicResourceId() uint32 {
	if x != nil && x.PeriodicResourceId != nil {
		return *x.PeriodicResourceId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_PeriodicResourceData) GetRemaining() uint32 {
	if x != nil && x.Remaining != nil {
		return *x.Remaining
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_PeriodicResourceData) GetMax() uint32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type CDOTAMatchMetadata_Team_EventData struct {
	state                            protoimpl.MessageState                           `protogen:"open.v1"`
	EventId                          *uint32                                          `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventPoints                      *uint32                                          `protobuf:"varint,2,opt,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	ChallengeInstanceId              *uint32                                          `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeQuestId                 *uint32                                          `protobuf:"varint,4,opt,name=challenge_quest_id,json=challengeQuestId" json:"challenge_quest_id,omitempty"`
	ChallengeQuestChallengeId        *uint32                                          `protobuf:"varint,5,opt,name=challenge_quest_challenge_id,json=challengeQuestChallengeId" json:"challenge_quest_challenge_id,omitempty"`
	ChallengeCompleted               *bool                                            `protobuf:"varint,6,opt,name=challenge_completed,json=challengeCompleted" json:"challenge_completed,omitempty"`
	ChallengeRankCompleted           *uint32                                          `protobuf:"varint,7,opt,name=challenge_rank_completed,json=challengeRankCompleted" json:"challenge_rank_completed,omitempty"`
	ChallengeRankPreviouslyCompleted *uint32                                          `protobuf:"varint,8,opt,name=challenge_rank_previously_completed,json=challengeRankPreviouslyCompleted" json:"challenge_rank_previously_completed,omitempty"`
	EventOwned                       *bool                                            `protobuf:"varint,9,opt,name=event_owned,json=eventOwned" json:"event_owned,omitempty"`
	SubChallengesWithProgress        []*CDOTAMatchMetadata_Team_SubChallenge          `protobuf:"bytes,10,rep,name=sub_challenges_with_progress,json=subChallengesWithProgress" json:"sub_challenges_with_progress,omitempty"`
	WagerWinnings                    *uint32                                          `protobuf:"varint,11,opt,name=wager_winnings,json=wagerWinnings" json:"wager_winnings,omitempty"`
	CavernChallengeActive            *bool                                            `protobuf:"varint,12,opt,name=cavern_challenge_active,json=cavernChallengeActive" json:"cavern_challenge_active,omitempty"`
	CavernChallengeWinnings          *uint32                                          `protobuf:"varint,13,opt,name=cavern_challenge_winnings,json=cavernChallengeWinnings" json:"cavern_challenge_winnings,omitempty"`
	AmountWagered                    *uint32                                          `protobuf:"varint,14,opt,name=amount_wagered,json=amountWagered" json:"amount_wagered,omitempty"`
	PeriodicPointAdjustments         *uint32                                          `protobuf:"varint,16,opt,name=periodic_point_adjustments,json=periodicPointAdjustments" json:"periodic_point_adjustments,omitempty"`
	CavernChallengeMapResults        []*CDOTAMatchMetadata_Team_CavernChallengeResult `protobuf:"bytes,17,rep,name=cavern_challenge_map_results,json=cavernChallengeMapResults" json:"cavern_challenge_map_results,omitempty"`
	CavernChallengePlusShardWinnings *uint32                                          `protobuf:"varint,18,opt,name=cavern_challenge_plus_shard_winnings,json=cavernChallengePlusShardWinnings" json:"cavern_challenge_plus_shard_winnings,omitempty"`
	ActionsGranted                   []*CDOTAMatchMetadata_Team_ActionGrant           `protobuf:"bytes,19,rep,name=actions_granted,json=actionsGranted" json:"actions_granted,omitempty"`
	CavernCrawlMapVariant            *uint32                                          `protobuf:"varint,20,opt,name=cavern_crawl_map_variant,json=cavernCrawlMapVariant,def=255" json:"cavern_crawl_map_variant,omitempty"`
	TeamWagerBonusPct                *uint32                                          `protobuf:"varint,21,opt,name=team_wager_bonus_pct,json=teamWagerBonusPct" json:"team_wager_bonus_pct,omitempty"`
	WagerStreakPct                   *uint32                                          `protobuf:"varint,22,opt,name=wager_streak_pct,json=wagerStreakPct" json:"wager_streak_pct,omitempty"`
	CandyPointsGranted               []*CDOTAMatchMetadata_Team_CandyGrant            `protobuf:"bytes,23,rep,name=candy_points_granted,json=candyPointsGranted" json:"candy_points_granted,omitempty"`
	ActiveSeasonId                   *uint32                                          `protobuf:"varint,24,opt,name=active_season_id,json=activeSeasonId" json:"active_season_id,omitempty"`
	CavernCrawlHalfCredit            *bool                                            `protobuf:"varint,25,opt,name=cavern_crawl_half_credit,json=cavernCrawlHalfCredit" json:"cavern_crawl_half_credit,omitempty"`
	PeriodicResources                []*CDOTAMatchMetadata_Team_PeriodicResourceData  `protobuf:"bytes,26,rep,name=periodic_resources,json=periodicResources" json:"periodic_resources,omitempty"`
	ExtraEventMessages               []*CExtraMsgBlock                                `protobuf:"bytes,27,rep,name=extra_event_messages,json=extraEventMessages" json:"extra_event_messages,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

// Default values for CDOTAMatchMetadata_Team_EventData fields.
const (
	Default_CDOTAMatchMetadata_Team_EventData_CavernCrawlMapVariant = uint32(255)
)

func (x *CDOTAMatchMetadata_Team_EventData) Reset() {
	*x = CDOTAMatchMetadata_Team_EventData{}
	mi := &file_dota_match_metadata_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_EventData) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_EventData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_EventData.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_EventData) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 11}
}

func (x *CDOTAMatchMetadata_Team_EventData) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetEventPoints() uint32 {
	if x != nil && x.EventPoints != nil {
		return *x.EventPoints
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeQuestId() uint32 {
	if x != nil && x.ChallengeQuestId != nil {
		return *x.ChallengeQuestId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeQuestChallengeId() uint32 {
	if x != nil && x.ChallengeQuestChallengeId != nil {
		return *x.ChallengeQuestChallengeId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeCompleted() bool {
	if x != nil && x.ChallengeCompleted != nil {
		return *x.ChallengeCompleted
	}
	return false
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeRankCompleted() uint32 {
	if x != nil && x.ChallengeRankCompleted != nil {
		return *x.ChallengeRankCompleted
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeRankPreviouslyCompleted() uint32 {
	if x != nil && x.ChallengeRankPreviouslyCompleted != nil {
		return *x.ChallengeRankPreviouslyCompleted
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetEventOwned() bool {
	if x != nil && x.EventOwned != nil {
		return *x.EventOwned
	}
	return false
}

func (x *CDOTAMatchMetadata_Team_EventData) GetSubChallengesWithProgress() []*CDOTAMatchMetadata_Team_SubChallenge {
	if x != nil {
		return x.SubChallengesWithProgress
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_EventData) GetWagerWinnings() uint32 {
	if x != nil && x.WagerWinnings != nil {
		return *x.WagerWinnings
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernChallengeActive() bool {
	if x != nil && x.CavernChallengeActive != nil {
		return *x.CavernChallengeActive
	}
	return false
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernChallengeWinnings() uint32 {
	if x != nil && x.CavernChallengeWinnings != nil {
		return *x.CavernChallengeWinnings
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetAmountWagered() uint32 {
	if x != nil && x.AmountWagered != nil {
		return *x.AmountWagered
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetPeriodicPointAdjustments() uint32 {
	if x != nil && x.PeriodicPointAdjustments != nil {
		return *x.PeriodicPointAdjustments
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernChallengeMapResults() []*CDOTAMatchMetadata_Team_CavernChallengeResult {
	if x != nil {
		return x.CavernChallengeMapResults
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernChallengePlusShardWinnings() uint32 {
	if x != nil && x.CavernChallengePlusShardWinnings != nil {
		return *x.CavernChallengePlusShardWinnings
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetActionsGranted() []*CDOTAMatchMetadata_Team_ActionGrant {
	if x != nil {
		return x.ActionsGranted
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernCrawlMapVariant() uint32 {
	if x != nil && x.CavernCrawlMapVariant != nil {
		return *x.CavernCrawlMapVariant
	}
	return Default_CDOTAMatchMetadata_Team_EventData_CavernCrawlMapVariant
}

func (x *CDOTAMatchMetadata_Team_EventData) GetTeamWagerBonusPct() uint32 {
	if x != nil && x.TeamWagerBonusPct != nil {
		return *x.TeamWagerBonusPct
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetWagerStreakPct() uint32 {
	if x != nil && x.WagerStreakPct != nil {
		return *x.WagerStreakPct
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCandyPointsGranted() []*CDOTAMatchMetadata_Team_CandyGrant {
	if x != nil {
		return x.CandyPointsGranted
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_EventData) GetActiveSeasonId() uint32 {
	if x != nil && x.ActiveSeasonId != nil {
		return *x.ActiveSeasonId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernCrawlHalfCredit() bool {
	if x != nil && x.CavernCrawlHalfCredit != nil {
		return *x.CavernCrawlHalfCredit
	}
	return false
}

func (x *CDOTAMatchMetadata_Team_EventData) GetPeriodicResources() []*CDOTAMatchMetadata_Team_PeriodicResourceData {
	if x != nil {
		return x.PeriodicResources
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_EventData) GetExtraEventMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraEventMessages
	}
	return nil
}

type CDOTAMatchMetadata_Team_FeaturedGamemodeProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartValue    *uint32                `protobuf:"varint,1,opt,name=start_value,json=startValue" json:"start_value,omitempty"`
	EndValue      *uint32                `protobuf:"varint,2,opt,name=end_value,json=endValue" json:"end_value,omitempty"`
	MaxValue      *uint32                `protobuf:"varint,3,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_FeaturedGamemodeProgress) Reset() {
	*x = CDOTAMatchMetadata_Team_FeaturedGamemodeProgress{}
	mi := &file_dota_match_metadata_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_FeaturedGamemodeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_FeaturedGamemodeProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_FeaturedGamemodeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_FeaturedGamemodeProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_FeaturedGamemodeProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 12}
}

func (x *CDOTAMatchMetadata_Team_FeaturedGamemodeProgress) GetStartValue() uint32 {
	if x != nil && x.StartValue != nil {
		return *x.StartValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_FeaturedGamemodeProgress) GetEndValue() uint32 {
	if x != nil && x.EndValue != nil {
		return *x.EndValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_FeaturedGamemodeProgress) GetMaxValue() uint32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

type CDOTAMatchMetadata_Team_Player struct {
	state                      protoimpl.MessageState                             `protogen:"open.v1"`
	AbilityUpgrades            []int32                                            `protobuf:"varint,2,rep,name=ability_upgrades,json=abilityUpgrades" json:"ability_upgrades,omitempty"`
	PlayerSlot                 *uint32                                            `protobuf:"varint,3,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	Kills                      []*CDOTAMatchMetadata_Team_PlayerKill              `protobuf:"bytes,5,rep,name=kills" json:"kills,omitempty"`
	Items                      []*CDOTAMatchMetadata_Team_ItemPurchase            `protobuf:"bytes,6,rep,name=items" json:"items,omitempty"`
	AvgKillsX16                *uint32                                            `protobuf:"varint,7,opt,name=avg_kills_x16,json=avgKillsX16" json:"avg_kills_x16,omitempty"`
	AvgDeathsX16               *uint32                                            `protobuf:"varint,8,opt,name=avg_deaths_x16,json=avgDeathsX16" json:"avg_deaths_x16,omitempty"`
	AvgAssistsX16              *uint32                                            `protobuf:"varint,9,opt,name=avg_assists_x16,json=avgAssistsX16" json:"avg_assists_x16,omitempty"`
	AvgGpmX16                  *uint32                                            `protobuf:"varint,10,opt,name=avg_gpm_x16,json=avgGpmX16" json:"avg_gpm_x16,omitempty"`
	AvgXpmX16                  *uint32                                            `protobuf:"varint,11,opt,name=avg_xpm_x16,json=avgXpmX16" json:"avg_xpm_x16,omitempty"`
	BestKillsX16               *uint32                                            `protobuf:"varint,12,opt,name=best_kills_x16,json=bestKillsX16" json:"best_kills_x16,omitempty"`
	BestAssistsX16             *uint32                                            `protobuf:"varint,13,opt,name=best_assists_x16,json=bestAssistsX16" json:"best_assists_x16,omitempty"`
	BestGpmX16                 *uint32                                            `protobuf:"varint,14,opt,name=best_gpm_x16,json=bestGpmX16" json:"best_gpm_x16,omitempty"`
	BestXpmX16                 *uint32                                            `protobuf:"varint,15,opt,name=best_xpm_x16,json=bestXpmX16" json:"best_xpm_x16,omitempty"`
	WinStreak                  *uint32                                            `protobuf:"varint,16,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	BestWinStreak              *uint32                                            `protobuf:"varint,17,opt,name=best_win_streak,json=bestWinStreak" json:"best_win_streak,omitempty"`
	FightScore                 *float32                                           `protobuf:"fixed32,18,opt,name=fight_score,json=fightScore" json:"fight_score,omitempty"`
	FarmScore                  *float32                                           `protobuf:"fixed32,19,opt,name=farm_score,json=farmScore" json:"farm_score,omitempty"`
	SupportScore               *float32                                           `protobuf:"fixed32,20,opt,name=support_score,json=supportScore" json:"support_score,omitempty"`
	PushScore                  *float32                                           `protobuf:"fixed32,21,opt,name=push_score,json=pushScore" json:"push_score,omitempty"`
	LevelUpTimes               []uint32                                           `protobuf:"varint,22,rep,name=level_up_times,json=levelUpTimes" json:"level_up_times,omitempty"`
	GraphNetWorth              []float32                                          `protobuf:"fixed32,23,rep,name=graph_net_worth,json=graphNetWorth" json:"graph_net_worth,omitempty"`
	InventorySnapshot          []*CDOTAMatchMetadata_Team_InventorySnapshot       `protobuf:"bytes,24,rep,name=inventory_snapshot,json=inventorySnapshot" json:"inventory_snapshot,omitempty"`
	AvgStatsCalibrated         *bool                                              `protobuf:"varint,25,opt,name=avg_stats_calibrated,json=avgStatsCalibrated" json:"avg_stats_calibrated,omitempty"`
	AutoStyleCriteria          []*CDOTAMatchMetadata_Team_AutoStyleCriteria       `protobuf:"bytes,26,rep,name=auto_style_criteria,json=autoStyleCriteria" json:"auto_style_criteria,omitempty"`
	EventData                  []*CDOTAMatchMetadata_Team_EventData               `protobuf:"bytes,29,rep,name=event_data,json=eventData" json:"event_data,omitempty"`
	StrangeGemProgress         []*CDOTAMatchMetadata_Team_StrangeGemProgress      `protobuf:"bytes,30,rep,name=strange_gem_progress,json=strangeGemProgress" json:"strange_gem_progress,omitempty"`
	HeroXp                     *uint32                                            `protobuf:"varint,31,opt,name=hero_xp,json=heroXp" json:"hero_xp,omitempty"`
	CampsStacked               *uint32                                            `protobuf:"varint,32,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	VictoryPrediction          []*CDOTAMatchMetadata_Team_VictoryPrediction       `protobuf:"bytes,33,rep,name=victory_prediction,json=victoryPrediction" json:"victory_prediction,omitempty"`
	LaneSelectionFlags         *uint32                                            `protobuf:"varint,34,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	Rampages                   *uint32                                            `protobuf:"varint,35,opt,name=rampages" json:"rampages,omitempty"`
	TripleKills                *uint32                                            `protobuf:"varint,36,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	AegisSnatched              *uint32                                            `protobuf:"varint,37,opt,name=aegis_snatched,json=aegisSnatched" json:"aegis_snatched,omitempty"`
	RapiersPurchased           *uint32                                            `protobuf:"varint,38,opt,name=rapiers_purchased,json=rapiersPurchased" json:"rapiers_purchased,omitempty"`
	CouriersKilled             *uint32                                            `protobuf:"varint,39,opt,name=couriers_killed,json=couriersKilled" json:"couriers_killed,omitempty"`
	NetWorthRank               *uint32                                            `protobuf:"varint,40,opt,name=net_worth_rank,json=netWorthRank" json:"net_worth_rank,omitempty"`
	SupportGoldSpent           *uint32                                            `protobuf:"varint,41,opt,name=support_gold_spent,json=supportGoldSpent" json:"support_gold_spent,omitempty"`
	ObserverWardsPlaced        *uint32                                            `protobuf:"varint,42,opt,name=observer_wards_placed,json=observerWardsPlaced" json:"observer_wards_placed,omitempty"`
	SentryWardsPlaced          *uint32                                            `protobuf:"varint,43,opt,name=sentry_wards_placed,json=sentryWardsPlaced" json:"sentry_wards_placed,omitempty"`
	WardsDewarded              *uint32                                            `protobuf:"varint,44,opt,name=wards_dewarded,json=wardsDewarded" json:"wards_dewarded,omitempty"`
	StunDuration               *float32                                           `protobuf:"fixed32,45,opt,name=stun_duration,json=stunDuration" json:"stun_duration,omitempty"`
	RankMmrBoostType           *EDOTAMMRBoostType                                 `protobuf:"varint,46,opt,name=rank_mmr_boost_type,json=rankMmrBoostType,enum=protocol.EDOTAMMRBoostType,def=0" json:"rank_mmr_boost_type,omitempty"`
	ContractProgress           []*CDOTAMatchMetadata_Team_Player_ContractProgress `protobuf:"bytes,48,rep,name=contract_progress,json=contractProgress" json:"contract_progress,omitempty"`
	GuildIds                   []uint32                                           `protobuf:"varint,49,rep,name=guild_ids,json=guildIds" json:"guild_ids,omitempty"`
	GraphHeroDamage            []float32                                          `protobuf:"fixed32,50,rep,name=graph_hero_damage,json=graphHeroDamage" json:"graph_hero_damage,omitempty"`
	TeamNumber                 *DOTA_GC_TEAM                                      `protobuf:"varint,51,opt,name=team_number,json=teamNumber,enum=protocol.DOTA_GC_TEAM,def=0" json:"team_number,omitempty"`
	TeamSlot                   *uint32                                            `protobuf:"varint,52,opt,name=team_slot,json=teamSlot" json:"team_slot,omitempty"`
	FeaturedGamemodeProgress   *CDOTAMatchMetadata_Team_FeaturedGamemodeProgress  `protobuf:"bytes,53,opt,name=featured_gamemode_progress,json=featuredGamemodeProgress" json:"featured_gamemode_progress,omitempty"`
	FeaturedHeroStickerIndex   *uint32                                            `protobuf:"varint,54,opt,name=featured_hero_sticker_index,json=featuredHeroStickerIndex" json:"featured_hero_sticker_index,omitempty"`
	FeaturedHeroStickerQuality *uint32                                            `protobuf:"varint,55,opt,name=featured_hero_sticker_quality,json=featuredHeroStickerQuality" json:"featured_hero_sticker_quality,omitempty"`
	EquippedEconItems          []*CDOTAMatchMetadata_EconItem                     `protobuf:"bytes,56,rep,name=equipped_econ_items,json=equippedEconItems" json:"equipped_econ_items,omitempty"`
	GamePlayerId               *int32                                             `protobuf:"varint,57,opt,name=game_player_id,json=gamePlayerId,def=-1" json:"game_player_id,omitempty"`
	PlayerTrackedStats         []*CMsgTrackedStat                                 `protobuf:"bytes,58,rep,name=player_tracked_stats,json=playerTrackedStats" json:"player_tracked_stats,omitempty"`
	OverworldRewards           *CDOTAMatchMetadata_Team_Player_OverworldRewards   `protobuf:"bytes,59,opt,name=overworld_rewards,json=overworldRewards" json:"overworld_rewards,omitempty"`
	CraftworksQuestRewards     []*CMsgCraftworksQuestReward                       `protobuf:"bytes,60,rep,name=craftworks_quest_rewards,json=craftworksQuestRewards" json:"craftworks_quest_rewards,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for CDOTAMatchMetadata_Team_Player fields.
const (
	Default_CDOTAMatchMetadata_Team_Player_RankMmrBoostType = EDOTAMMRBoostType_k_EDOTAMMRBoostType_None
	Default_CDOTAMatchMetadata_Team_Player_TeamNumber       = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
	Default_CDOTAMatchMetadata_Team_Player_GamePlayerId     = int32(-1)
)

func (x *CDOTAMatchMetadata_Team_Player) Reset() {
	*x = CDOTAMatchMetadata_Team_Player{}
	mi := &file_dota_match_metadata_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_Player) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_Player.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_Player) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 13}
}

func (x *CDOTAMatchMetadata_Team_Player) GetAbilityUpgrades() []int32 {
	if x != nil {
		return x.AbilityUpgrades
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetKills() []*CDOTAMatchMetadata_Team_PlayerKill {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetItems() []*CDOTAMatchMetadata_Team_ItemPurchase {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgKillsX16() uint32 {
	if x != nil && x.AvgKillsX16 != nil {
		return *x.AvgKillsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgDeathsX16() uint32 {
	if x != nil && x.AvgDeathsX16 != nil {
		return *x.AvgDeathsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgAssistsX16() uint32 {
	if x != nil && x.AvgAssistsX16 != nil {
		return *x.AvgAssistsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgGpmX16() uint32 {
	if x != nil && x.AvgGpmX16 != nil {
		return *x.AvgGpmX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgXpmX16() uint32 {
	if x != nil && x.AvgXpmX16 != nil {
		return *x.AvgXpmX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestKillsX16() uint32 {
	if x != nil && x.BestKillsX16 != nil {
		return *x.BestKillsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestAssistsX16() uint32 {
	if x != nil && x.BestAssistsX16 != nil {
		return *x.BestAssistsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestGpmX16() uint32 {
	if x != nil && x.BestGpmX16 != nil {
		return *x.BestGpmX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestXpmX16() uint32 {
	if x != nil && x.BestXpmX16 != nil {
		return *x.BestXpmX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetWinStreak() uint32 {
	if x != nil && x.WinStreak != nil {
		return *x.WinStreak
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestWinStreak() uint32 {
	if x != nil && x.BestWinStreak != nil {
		return *x.BestWinStreak
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetFightScore() float32 {
	if x != nil && x.FightScore != nil {
		return *x.FightScore
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetFarmScore() float32 {
	if x != nil && x.FarmScore != nil {
		return *x.FarmScore
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetSupportScore() float32 {
	if x != nil && x.SupportScore != nil {
		return *x.SupportScore
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetPushScore() float32 {
	if x != nil && x.PushScore != nil {
		return *x.PushScore
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetLevelUpTimes() []uint32 {
	if x != nil {
		return x.LevelUpTimes
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetGraphNetWorth() []float32 {
	if x != nil {
		return x.GraphNetWorth
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetInventorySnapshot() []*CDOTAMatchMetadata_Team_InventorySnapshot {
	if x != nil {
		return x.InventorySnapshot
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgStatsCalibrated() bool {
	if x != nil && x.AvgStatsCalibrated != nil {
		return *x.AvgStatsCalibrated
	}
	return false
}

func (x *CDOTAMatchMetadata_Team_Player) GetAutoStyleCriteria() []*CDOTAMatchMetadata_Team_AutoStyleCriteria {
	if x != nil {
		return x.AutoStyleCriteria
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetEventData() []*CDOTAMatchMetadata_Team_EventData {
	if x != nil {
		return x.EventData
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetStrangeGemProgress() []*CDOTAMatchMetadata_Team_StrangeGemProgress {
	if x != nil {
		return x.StrangeGemProgress
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetHeroXp() uint32 {
	if x != nil && x.HeroXp != nil {
		return *x.HeroXp
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetCampsStacked() uint32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetVictoryPrediction() []*CDOTAMatchMetadata_Team_VictoryPrediction {
	if x != nil {
		return x.VictoryPrediction
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetRampages() uint32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetTripleKills() uint32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAegisSnatched() uint32 {
	if x != nil && x.AegisSnatched != nil {
		return *x.AegisSnatched
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetRapiersPurchased() uint32 {
	if x != nil && x.RapiersPurchased != nil {
		return *x.RapiersPurchased
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetCouriersKilled() uint32 {
	if x != nil && x.CouriersKilled != nil {
		return *x.CouriersKilled
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetNetWorthRank() uint32 {
	if x != nil && x.NetWorthRank != nil {
		return *x.NetWorthRank
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetSupportGoldSpent() uint32 {
	if x != nil && x.SupportGoldSpent != nil {
		return *x.SupportGoldSpent
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetObserverWardsPlaced() uint32 {
	if x != nil && x.ObserverWardsPlaced != nil {
		return *x.ObserverWardsPlaced
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetSentryWardsPlaced() uint32 {
	if x != nil && x.SentryWardsPlaced != nil {
		return *x.SentryWardsPlaced
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetWardsDewarded() uint32 {
	if x != nil && x.WardsDewarded != nil {
		return *x.WardsDewarded
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetStunDuration() float32 {
	if x != nil && x.StunDuration != nil {
		return *x.StunDuration
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetRankMmrBoostType() EDOTAMMRBoostType {
	if x != nil && x.RankMmrBoostType != nil {
		return *x.RankMmrBoostType
	}
	return Default_CDOTAMatchMetadata_Team_Player_RankMmrBoostType
}

func (x *CDOTAMatchMetadata_Team_Player) GetContractProgress() []*CDOTAMatchMetadata_Team_Player_ContractProgress {
	if x != nil {
		return x.ContractProgress
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetGuildIds() []uint32 {
	if x != nil {
		return x.GuildIds
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetGraphHeroDamage() []float32 {
	if x != nil {
		return x.GraphHeroDamage
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetTeamNumber() DOTA_GC_TEAM {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return Default_CDOTAMatchMetadata_Team_Player_TeamNumber
}

func (x *CDOTAMatchMetadata_Team_Player) GetTeamSlot() uint32 {
	if x != nil && x.TeamSlot != nil {
		return *x.TeamSlot
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetFeaturedGamemodeProgress() *CDOTAMatchMetadata_Team_FeaturedGamemodeProgress {
	if x != nil {
		return x.FeaturedGamemodeProgress
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetFeaturedHeroStickerIndex() uint32 {
	if x != nil && x.FeaturedHeroStickerIndex != nil {
		return *x.FeaturedHeroStickerIndex
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetFeaturedHeroStickerQuality() uint32 {
	if x != nil && x.FeaturedHeroStickerQuality != nil {
		return *x.FeaturedHeroStickerQuality
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetEquippedEconItems() []*CDOTAMatchMetadata_EconItem {
	if x != nil {
		return x.EquippedEconItems
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetGamePlayerId() int32 {
	if x != nil && x.GamePlayerId != nil {
		return *x.GamePlayerId
	}
	return Default_CDOTAMatchMetadata_Team_Player_GamePlayerId
}

func (x *CDOTAMatchMetadata_Team_Player) GetPlayerTrackedStats() []*CMsgTrackedStat {
	if x != nil {
		return x.PlayerTrackedStats
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetOverworldRewards() *CDOTAMatchMetadata_Team_Player_OverworldRewards {
	if x != nil {
		return x.OverworldRewards
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetCraftworksQuestRewards() []*CMsgCraftworksQuestReward {
	if x != nil {
		return x.CraftworksQuestRewards
	}
	return nil
}

type CDOTAMatchMetadata_Team_Player_ContractProgress struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	GuildId             *uint32                `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId             *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ChallengeInstanceId *uint32                `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter  *uint32                `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ContractStars       *uint32                `protobuf:"varint,5,opt,name=contract_stars,json=contractStars" json:"contract_stars,omitempty"`
	ContractSlot        *uint32                `protobuf:"varint,6,opt,name=contract_slot,json=contractSlot" json:"contract_slot,omitempty"`
	Completed           *bool                  `protobuf:"varint,7,opt,name=completed" json:"completed,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) Reset() {
	*x = CDOTAMatchMetadata_Team_Player_ContractProgress{}
	mi := &file_dota_match_metadata_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_Player_ContractProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_Player_ContractProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_Player_ContractProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 13, 0}
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetContractStars() uint32 {
	if x != nil && x.ContractStars != nil {
		return *x.ContractStars
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetContractSlot() uint32 {
	if x != nil && x.ContractSlot != nil {
		return *x.ContractSlot
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetCompleted() bool {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return false
}

type CDOTAMatchMetadata_Team_Player_OverworldRewards struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	OverworldId   *uint32                     `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	Tokens        *CMsgOverworldTokenQuantity `protobuf:"bytes,2,opt,name=tokens" json:"tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_Team_Player_OverworldRewards) Reset() {
	*x = CDOTAMatchMetadata_Team_Player_OverworldRewards{}
	mi := &file_dota_match_metadata_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_Team_Player_OverworldRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_Player_OverworldRewards) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_Player_OverworldRewards) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_Player_OverworldRewards.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_Player_OverworldRewards) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 13, 1}
}

func (x *CDOTAMatchMetadata_Team_Player_OverworldRewards) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_OverworldRewards) GetTokens() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      *uint32                `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	PlayerSlot    *uint32                `protobuf:"varint,3,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) Reset() {
	*x = CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress{}
	mi := &file_dota_match_metadata_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

type CDOTAMatchPrivateMetadata_StringName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata_StringName) Reset() {
	*x = CDOTAMatchPrivateMetadata_StringName{}
	mi := &file_dota_match_metadata_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_StringName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_StringName) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_StringName) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_StringName.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_StringName) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CDOTAMatchPrivateMetadata_StringName) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_StringName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CDOTAMatchPrivateMetadata_Team struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	DotaTeam      *uint32                                    `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Players       []*CDOTAMatchPrivateMetadata_Team_Player   `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	Buildings     []*CDOTAMatchPrivateMetadata_Team_Building `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata_Team) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team{}
	mi := &file_dota_match_metadata_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CDOTAMatchPrivateMetadata_Team) GetDotaTeam() uint32 {
	if x != nil && x.DotaTeam != nil {
		return *x.DotaTeam
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team) GetPlayers() []*CDOTAMatchPrivateMetadata_Team_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team) GetBuildings() []*CDOTAMatchPrivateMetadata_Team_Building {
	if x != nil {
		return x.Buildings
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player struct {
	state           protoimpl.MessageState                                 `protogen:"open.v1"`
	PlayerSlot      *uint32                                                `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	PositionStream  []byte                                                 `protobuf:"bytes,3,opt,name=position_stream,json=positionStream" json:"position_stream,omitempty"`
	CombatSegments  []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment `protobuf:"bytes,4,rep,name=combat_segments,json=combatSegments" json:"combat_segments,omitempty"`
	DamageUnitNames []string                                               `protobuf:"bytes,5,rep,name=damage_unit_names,json=damageUnitNames" json:"damage_unit_names,omitempty"`
	BuffRecords     []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord    `protobuf:"bytes,6,rep,name=buff_records,json=buffRecords" json:"buff_records,omitempty"`
	GraphKills      []float32                                              `protobuf:"fixed32,7,rep,name=graph_kills,json=graphKills" json:"graph_kills,omitempty"`
	GraphDeaths     []float32                                              `protobuf:"fixed32,8,rep,name=graph_deaths,json=graphDeaths" json:"graph_deaths,omitempty"`
	GraphAssists    []float32                                              `protobuf:"fixed32,9,rep,name=graph_assists,json=graphAssists" json:"graph_assists,omitempty"`
	GraphLasthits   []float32                                              `protobuf:"fixed32,10,rep,name=graph_lasthits,json=graphLasthits" json:"graph_lasthits,omitempty"`
	GraphDenies     []float32                                              `protobuf:"fixed32,11,rep,name=graph_denies,json=graphDenies" json:"graph_denies,omitempty"`
	GoldReceived    *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived    `protobuf:"bytes,12,opt,name=gold_received,json=goldReceived" json:"gold_received,omitempty"`
	XpReceived      *CDOTAMatchPrivateMetadata_Team_Player_XPReceived      `protobuf:"bytes,13,opt,name=xp_received,json=xpReceived" json:"xp_received,omitempty"`
	TeamNumber      *DOTA_GC_TEAM                                          `protobuf:"varint,14,opt,name=team_number,json=teamNumber,enum=protocol.DOTA_GC_TEAM,def=0" json:"team_number,omitempty"`
	TeamSlot        *uint32                                                `protobuf:"varint,15,opt,name=team_slot,json=teamSlot" json:"team_slot,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CDOTAMatchPrivateMetadata_Team_Player fields.
const (
	Default_CDOTAMatchPrivateMetadata_Team_Player_TeamNumber = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
)

func (x *CDOTAMatchPrivateMetadata_Team_Player) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player{}
	mi := &file_dota_match_metadata_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetPositionStream() []byte {
	if x != nil {
		return x.PositionStream
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetCombatSegments() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment {
	if x != nil {
		return x.CombatSegments
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetDamageUnitNames() []string {
	if x != nil {
		return x.DamageUnitNames
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetBuffRecords() []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord {
	if x != nil {
		return x.BuffRecords
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphKills() []float32 {
	if x != nil {
		return x.GraphKills
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphDeaths() []float32 {
	if x != nil {
		return x.GraphDeaths
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphAssists() []float32 {
	if x != nil {
		return x.GraphAssists
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphLasthits() []float32 {
	if x != nil {
		return x.GraphLasthits
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphDenies() []float32 {
	if x != nil {
		return x.GraphDenies
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGoldReceived() *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived {
	if x != nil {
		return x.GoldReceived
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetXpReceived() *CDOTAMatchPrivateMetadata_Team_Player_XPReceived {
	if x != nil {
		return x.XpReceived
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetTeamNumber() DOTA_GC_TEAM {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return Default_CDOTAMatchPrivateMetadata_Team_Player_TeamNumber
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetTeamSlot() uint32 {
	if x != nil && x.TeamSlot != nil {
		return *x.TeamSlot
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Building struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UnitName       *string                `protobuf:"bytes,1,opt,name=unit_name,json=unitName" json:"unit_name,omitempty"`
	PositionQuantX *uint32                `protobuf:"varint,2,opt,name=position_quant_x,json=positionQuantX" json:"position_quant_x,omitempty"`
	PositionQuantY *uint32                `protobuf:"varint,3,opt,name=position_quant_y,json=positionQuantY" json:"position_quant_y,omitempty"`
	DeathTime      *float32               `protobuf:"fixed32,4,opt,name=death_time,json=deathTime" json:"death_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Building{}
	mi := &file_dota_match_metadata_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Building) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Building) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Building.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Building) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) GetPositionQuantX() uint32 {
	if x != nil && x.PositionQuantX != nil {
		return *x.PositionQuantX
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) GetPositionQuantY() uint32 {
	if x != nil && x.PositionQuantY != nil {
		return *x.PositionQuantY
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) GetDeathTime() float32 {
	if x != nil && x.DeathTime != nil {
		return *x.DeathTime
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment struct {
	state            protoimpl.MessageState                                                  `protogen:"open.v1"`
	GameTime         *int32                                                                  `protobuf:"varint,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	DamageByAbility  []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility  `protobuf:"bytes,2,rep,name=damage_by_ability,json=damageByAbility" json:"damage_by_ability,omitempty"`
	HealingByAbility []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility `protobuf:"bytes,3,rep,name=healing_by_ability,json=healingByAbility" json:"healing_by_ability,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment{}
	mi := &file_dota_match_metadata_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) GetDamageByAbility() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility {
	if x != nil {
		return x.DamageByAbility
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) GetHealingByAbility() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility {
	if x != nil {
		return x.HealingByAbility
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_BuffRecord struct {
	state            protoimpl.MessageState                                           `protogen:"open.v1"`
	BuffAbilityId    *int32                                                           `protobuf:"varint,1,opt,name=buff_ability_id,json=buffAbilityId,def=-1" json:"buff_ability_id,omitempty"`
	BuffModifierName *string                                                          `protobuf:"bytes,3,opt,name=buff_modifier_name,json=buffModifierName" json:"buff_modifier_name,omitempty"`
	ByHeroTargets    []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget `protobuf:"bytes,2,rep,name=by_hero_targets,json=byHeroTargets" json:"by_hero_targets,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CDOTAMatchPrivateMetadata_Team_Player_BuffRecord fields.
const (
	Default_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_BuffAbilityId = int32(-1)
)

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_BuffRecord{}
	mi := &file_dota_match_metadata_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_BuffRecord.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 1}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) GetBuffAbilityId() int32 {
	if x != nil && x.BuffAbilityId != nil {
		return *x.BuffAbilityId
	}
	return Default_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_BuffAbilityId
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) GetBuffModifierName() string {
	if x != nil && x.BuffModifierName != nil {
		return *x.BuffModifierName
	}
	return ""
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) GetByHeroTargets() []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget {
	if x != nil {
		return x.ByHeroTargets
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_GoldReceived struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Creep         *uint32                `protobuf:"varint,1,opt,name=creep" json:"creep,omitempty"`
	Heroes        *uint32                `protobuf:"varint,2,opt,name=heroes" json:"heroes,omitempty"`
	BountyRunes   *uint32                `protobuf:"varint,3,opt,name=bounty_runes,json=bountyRunes" json:"bounty_runes,omitempty"`
	Passive       *uint32                `protobuf:"varint,4,opt,name=passive" json:"passive,omitempty"`
	Buildings     *uint32                `protobuf:"varint,5,opt,name=buildings" json:"buildings,omitempty"`
	Abilities     *uint32                `protobuf:"varint,6,opt,name=abilities" json:"abilities,omitempty"`
	Wards         *uint32                `protobuf:"varint,7,opt,name=wards" json:"wards,omitempty"`
	Other         *uint32                `protobuf:"varint,8,opt,name=other" json:"other,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_GoldReceived{}
	mi := &file_dota_match_metadata_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_GoldReceived.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 2}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetCreep() uint32 {
	if x != nil && x.Creep != nil {
		return *x.Creep
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetHeroes() uint32 {
	if x != nil && x.Heroes != nil {
		return *x.Heroes
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetBountyRunes() uint32 {
	if x != nil && x.BountyRunes != nil {
		return *x.BountyRunes
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetPassive() uint32 {
	if x != nil && x.Passive != nil {
		return *x.Passive
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetBuildings() uint32 {
	if x != nil && x.Buildings != nil {
		return *x.Buildings
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetAbilities() uint32 {
	if x != nil && x.Abilities != nil {
		return *x.Abilities
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetWards() uint32 {
	if x != nil && x.Wards != nil {
		return *x.Wards
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetOther() uint32 {
	if x != nil && x.Other != nil {
		return *x.Other
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_XPReceived struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Creep           *uint32                `protobuf:"varint,1,opt,name=creep" json:"creep,omitempty"`
	Heroes          *uint32                `protobuf:"varint,2,opt,name=heroes" json:"heroes,omitempty"`
	Roshan          *uint32                `protobuf:"varint,3,opt,name=roshan" json:"roshan,omitempty"`
	TomeOfKnowledge *uint32                `protobuf:"varint,4,opt,name=tome_of_knowledge,json=tomeOfKnowledge" json:"tome_of_knowledge,omitempty"`
	Outpost         *uint32                `protobuf:"varint,5,opt,name=outpost" json:"outpost,omitempty"`
	Other           *uint32                `protobuf:"varint,6,opt,name=other" json:"other,omitempty"`
	Abilities       *uint32                `protobuf:"varint,7,opt,name=abilities" json:"abilities,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_XPReceived{}
	mi := &file_dota_match_metadata_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_XPReceived) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_XPReceived.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_XPReceived) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 3}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetCreep() uint32 {
	if x != nil && x.Creep != nil {
		return *x.Creep
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetHeroes() uint32 {
	if x != nil && x.Heroes != nil {
		return *x.Heroes
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetRoshan() uint32 {
	if x != nil && x.Roshan != nil {
		return *x.Roshan
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetTomeOfKnowledge() uint32 {
	if x != nil && x.TomeOfKnowledge != nil {
		return *x.TomeOfKnowledge
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetOutpost() uint32 {
	if x != nil && x.Outpost != nil {
		return *x.Outpost
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetOther() uint32 {
	if x != nil && x.Other != nil {
		return *x.Other
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetAbilities() uint32 {
	if x != nil && x.Abilities != nil {
		return *x.Abilities
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility struct {
	state           protoimpl.MessageState                                                              `protogen:"open.v1"`
	SourceUnitIndex *uint32                                                                             `protobuf:"varint,3,opt,name=source_unit_index,json=sourceUnitIndex" json:"source_unit_index,omitempty"`
	AbilityId       *int32                                                                              `protobuf:"varint,1,opt,name=ability_id,json=abilityId,def=-1" json:"ability_id,omitempty"`
	ByHeroTargets   []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget `protobuf:"bytes,2,rep,name=by_hero_targets,json=byHeroTargets" json:"by_hero_targets,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility fields.
const (
	Default_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_AbilityId = int32(-1)
)

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility{}
	mi := &file_dota_match_metadata_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) GetSourceUnitIndex() uint32 {
	if x != nil && x.SourceUnitIndex != nil {
		return *x.SourceUnitIndex
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) GetAbilityId() int32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return Default_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_AbilityId
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) GetByHeroTargets() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget {
	if x != nil {
		return x.ByHeroTargets
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility struct {
	state           protoimpl.MessageState                                                               `protogen:"open.v1"`
	SourceUnitIndex *uint32                                                                              `protobuf:"varint,3,opt,name=source_unit_index,json=sourceUnitIndex" json:"source_unit_index,omitempty"`
	AbilityId       *int32                                                                               `protobuf:"varint,1,opt,name=ability_id,json=abilityId,def=-1" json:"ability_id,omitempty"`
	ByHeroTargets   []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget `protobuf:"bytes,2,rep,name=by_hero_targets,json=byHeroTargets" json:"by_hero_targets,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility fields.
const (
	Default_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_AbilityId = int32(-1)
)

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility{}
	mi := &file_dota_match_metadata_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0, 1}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) GetSourceUnitIndex() uint32 {
	if x != nil && x.SourceUnitIndex != nil {
		return *x.SourceUnitIndex
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) GetAbilityId() int32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return Default_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_AbilityId
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) GetByHeroTargets() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget {
	if x != nil {
		return x.ByHeroTargets
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Damage        *uint32                `protobuf:"varint,2,opt,name=damage" json:"damage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget{}
	mi := &file_dota_match_metadata_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) ProtoMessage() {
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0, 0, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Healing       *uint32                `protobuf:"varint,2,opt,name=healing" json:"healing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget{}
	mi := &file_dota_match_metadata_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) ProtoMessage() {
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0, 1, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) GetHealing() uint32 {
	if x != nil && x.Healing != nil {
		return *x.Healing
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	HeroId          *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	ElapsedDuration *float32               `protobuf:"fixed32,2,opt,name=elapsed_duration,json=elapsedDuration" json:"elapsed_duration,omitempty"`
	IsHidden        *bool                  `protobuf:"varint,3,opt,name=is_hidden,json=isHidden" json:"is_hidden,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget{}
	mi := &file_dota_match_metadata_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 1, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) GetElapsedDuration() float32 {
	if x != nil && x.ElapsedDuration != nil {
		return *x.ElapsedDuration
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) GetIsHidden() bool {
	if x != nil && x.IsHidden != nil {
		return *x.IsHidden
	}
	return false
}

var File_dota_match_metadata_proto protoreflect.FileDescriptor

const file_dota_match_metadata_proto_rawDesc = "" +
	"\n" +
	"\x19dota_match_metadata.proto\x12\bprotocol\x1a\x15base_gcmessages.proto\x1a-dota_gcmessages_common_match_management.proto\x1a\"dota_gcmessages_common_lobby.proto\x1a&dota_gcmessages_common_overworld.proto\x1a'dota_gcmessages_common_craftworks.proto\x1a\x1cdota_gcmessages_common.proto\x1a\x17dota_shared_enums.proto\x1a\x16gcsdk_gcmessages.proto\"\xb2\x01\n" +
	"\x16CDOTAMatchMetadataFile\x12\x18\n" +
	"\aversion\x18\x01 \x02(\x05R\aversion\x12\x19\n" +
	"\bmatch_id\x18\x02 \x02(\x04R\amatchId\x128\n" +
	"\bmetadata\x18\x03 \x01(\v2\x1c.protocol.CDOTAMatchMetadataR\bmetadata\x12)\n" +
	"\x10private_metadata\x18\x05 \x01(\fR\x0fprivateMetadata\"\xf4D\n" +
	"\x12CDOTAMatchMetadata\x127\n" +
	"\x05teams\x18\x01 \x03(\v2!.protocol.CDOTAMatchMetadata.TeamR\x05teams\x12\x19\n" +
	"\blobby_id\x18\x03 \x01(\x06R\alobbyId\x12*\n" +
	"\x11report_until_time\x18\x04 \x01(\x06R\x0freportUntilTime\x125\n" +
	"\x17event_game_custom_table\x18\x05 \x01(\fR\x14eventGameCustomTable\x12(\n" +
	"\x10primary_event_id\x18\x06 \x01(\rR\x0eprimaryEventId\x12P\n" +
	"\x11matchmaking_stats\x18\b \x01(\v2#.protocol.CMsgMatchMatchmakingStatsR\x10matchmakingStats\x12-\n" +
	"\bmvp_data\x18\t \x01(\v2\x12.protocol.CMvpDataR\amvpData\x12m\n" +
	"\x18guild_challenge_progress\x18\n" +
	" \x03(\v23.protocol.CDOTAMatchMetadata.GuildChallengeProgressR\x16guildChallengeProgress\x123\n" +
	"\x16custom_post_game_table\x18\v \x01(\fR\x13customPostGameTable\x12?\n" +
	"\n" +
	"match_tips\x18\f \x03(\v2 .protocol.CDOTAMatchMetadata.TipR\tmatchTips\x12I\n" +
	"\x13match_tracked_stats\x18\r \x03(\v2\x19.protocol.CMsgTrackedStatR\x11matchTrackedStats\x1a\xe1\x01\n" +
	"\bEconItem\x12\x1b\n" +
	"\tdef_index\x18\x01 \x01(\rR\bdefIndex\x12\x1b\n" +
	"\aquality\x18\x02 \x01(\r:\x014R\aquality\x12<\n" +
	"\tattribute\x18\x03 \x03(\v2\x1e.protocol.CSOEconItemAttributeR\tattribute\x12\x17\n" +
	"\x05style\x18\x04 \x01(\r:\x010R\x05style\x12D\n" +
	"\x0eequipped_state\x18\x05 \x03(\v2\x1d.protocol.CSOEconItemEquippedR\requippedState\x1a\xcf7\n" +
	"\x04Team\x12\x1b\n" +
	"\tdota_team\x18\x01 \x01(\rR\bdotaTeam\x12B\n" +
	"\aplayers\x18\x02 \x03(\v2(.protocol.CDOTAMatchMetadata.Team.PlayerR\aplayers\x12)\n" +
	"\x10graph_experience\x18\x03 \x03(\x02R\x0fgraphExperience\x12*\n" +
	"\x11graph_gold_earned\x18\x04 \x03(\x02R\x0fgraphGoldEarned\x12&\n" +
	"\x0fgraph_net_worth\x18\x05 \x03(\x02R\rgraphNetWorth\x12\"\n" +
	"\rcm_first_pick\x18\x06 \x01(\bR\vcmFirstPick\x123\n" +
	"\x14cm_captain_player_id\x18\a \x01(\x05:\x02-1R\x11cmCaptainPlayerId\x12\x1d\n" +
	"\n" +
	"cm_penalty\x18\n" +
	" \x01(\rR\tcmPenalty\x12G\n" +
	"\x12team_tracked_stats\x18\v \x03(\v2\x19.protocol.CMsgTrackedStatR\x10teamTrackedStats\x1aC\n" +
	"\n" +
	"PlayerKill\x12\x1f\n" +
	"\vvictim_slot\x18\x01 \x01(\rR\n" +
	"victimSlot\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\x1aP\n" +
	"\fItemPurchase\x12\x1b\n" +
	"\aitem_id\x18\x01 \x01(\x05:\x02-1R\x06itemId\x12#\n" +
	"\rpurchase_time\x18\x02 \x01(\x05R\fpurchaseTime\x1a\xb7\x02\n" +
	"\x11InventorySnapshot\x12\x17\n" +
	"\aitem_id\x18\x01 \x03(\x05R\x06itemId\x12\x1b\n" +
	"\tgame_time\x18\x02 \x01(\x05R\bgameTime\x12\x14\n" +
	"\x05kills\x18\x03 \x01(\rR\x05kills\x12\x16\n" +
	"\x06deaths\x18\x04 \x01(\rR\x06deaths\x12\x18\n" +
	"\aassists\x18\x05 \x01(\rR\aassists\x12\x14\n" +
	"\x05level\x18\x06 \x01(\rR\x05level\x12(\n" +
	"\x10backpack_item_id\x18\a \x03(\x05R\x0ebackpackItemId\x12*\n" +
	"\x0fneutral_item_id\x18\b \x01(\x05:\x02-1R\rneutralItemId\x128\n" +
	"\x16neutral_enhancement_id\x18\t \x01(\x05:\x02-1R\x14neutralEnhancementId\x1aH\n" +
	"\x11AutoStyleCriteria\x12\x1d\n" +
	"\n" +
	"name_token\x18\x01 \x01(\rR\tnameToken\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value\x1a\xb2\x02\n" +
	"\x12StrangeGemProgress\x12&\n" +
	"\x0fkill_eater_type\x18\x01 \x01(\rR\rkillEaterType\x12+\n" +
	"\x12gem_item_def_index\x18\x02 \x01(\rR\x0fgemItemDefIndex\x12(\n" +
	"\x10required_hero_id\x18\x03 \x01(\x05R\x0erequiredHeroId\x12%\n" +
	"\x0estarting_value\x18\x04 \x01(\rR\rstartingValue\x12!\n" +
	"\fending_value\x18\x05 \x01(\rR\vendingValue\x12/\n" +
	"\x14owner_item_def_index\x18\x06 \x01(\rR\x11ownerItemDefIndex\x12\"\n" +
	"\rowner_item_id\x18\a \x01(\x04R\vownerItemId\x1a\x98\x01\n" +
	"\x11VictoryPrediction\x12\x17\n" +
	"\aitem_id\x18\x01 \x01(\x04R\x06itemId\x12$\n" +
	"\x0eitem_def_index\x18\x02 \x01(\rR\fitemDefIndex\x12%\n" +
	"\x0estarting_value\x18\x03 \x01(\rR\rstartingValue\x12\x1d\n" +
	"\n" +
	"is_victory\x18\x04 \x01(\bR\tisVictory\x1a\x83\x01\n" +
	"\fSubChallenge\x12\x17\n" +
	"\aslot_id\x18\x01 \x01(\rR\x06slotId\x12\x1f\n" +
	"\vstart_value\x18\x02 \x01(\rR\n" +
	"startValue\x12\x1b\n" +
	"\tend_value\x18\x03 \x01(\rR\bendValue\x12\x1c\n" +
	"\tcompleted\x18\x04 \x01(\bR\tcompleted\x1au\n" +
	"\x15CavernChallengeResult\x12/\n" +
	"\x11completed_path_id\x18\x01 \x01(\r:\x03255R\x0fcompletedPathId\x12+\n" +
	"\x0fclaimed_room_id\x18\x02 \x01(\r:\x03255R\rclaimedRoomId\x1a{\n" +
	"\vActionGrant\x12\x1b\n" +
	"\taction_id\x18\x01 \x01(\rR\bactionId\x12\x1a\n" +
	"\bquantity\x18\x02 \x01(\rR\bquantity\x12\x14\n" +
	"\x05audit\x18\x03 \x01(\rR\x05audit\x12\x1d\n" +
	"\n" +
	"audit_data\x18\x05 \x01(\x04R\tauditData\x1a<\n" +
	"\n" +
	"CandyGrant\x12\x16\n" +
	"\x06points\x18\x01 \x01(\rR\x06points\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\rR\x06reason\x1ax\n" +
	"\x14PeriodicResourceData\x120\n" +
	"\x14periodic_resource_id\x18\x01 \x01(\rR\x12periodicResourceId\x12\x1c\n" +
	"\tremaining\x18\x02 \x01(\rR\tremaining\x12\x10\n" +
	"\x03max\x18\x03 \x01(\rR\x03max\x1a\xe9\f\n" +
	"\tEventData\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\rR\aeventId\x12!\n" +
	"\fevent_points\x18\x02 \x01(\rR\veventPoints\x122\n" +
	"\x15challenge_instance_id\x18\x03 \x01(\rR\x13challengeInstanceId\x12,\n" +
	"\x12challenge_quest_id\x18\x04 \x01(\rR\x10challengeQuestId\x12?\n" +
	"\x1cchallenge_quest_challenge_id\x18\x05 \x01(\rR\x19challengeQuestChallengeId\x12/\n" +
	"\x13challenge_completed\x18\x06 \x01(\bR\x12challengeCompleted\x128\n" +
	"\x18challenge_rank_completed\x18\a \x01(\rR\x16challengeRankCompleted\x12M\n" +
	"#challenge_rank_previously_completed\x18\b \x01(\rR challengeRankPreviouslyCompleted\x12\x1f\n" +
	"\vevent_owned\x18\t \x01(\bR\n" +
	"eventOwned\x12o\n" +
	"\x1csub_challenges_with_progress\x18\n" +
	" \x03(\v2..protocol.CDOTAMatchMetadata.Team.SubChallengeR\x19subChallengesWithProgress\x12%\n" +
	"\x0ewager_winnings\x18\v \x01(\rR\rwagerWinnings\x126\n" +
	"\x17cavern_challenge_active\x18\f \x01(\bR\x15cavernChallengeActive\x12:\n" +
	"\x19cavern_challenge_winnings\x18\r \x01(\rR\x17cavernChallengeWinnings\x12%\n" +
	"\x0eamount_wagered\x18\x0e \x01(\rR\ramountWagered\x12<\n" +
	"\x1aperiodic_point_adjustments\x18\x10 \x01(\rR\x18periodicPointAdjustments\x12x\n" +
	"\x1ccavern_challenge_map_results\x18\x11 \x03(\v27.protocol.CDOTAMatchMetadata.Team.CavernChallengeResultR\x19cavernChallengeMapResults\x12N\n" +
	"$cavern_challenge_plus_shard_winnings\x18\x12 \x01(\rR cavernChallengePlusShardWinnings\x12V\n" +
	"\x0factions_granted\x18\x13 \x03(\v2-.protocol.CDOTAMatchMetadata.Team.ActionGrantR\x0eactionsGranted\x12<\n" +
	"\x18cavern_crawl_map_variant\x18\x14 \x01(\r:\x03255R\x15cavernCrawlMapVariant\x12/\n" +
	"\x14team_wager_bonus_pct\x18\x15 \x01(\rR\x11teamWagerBonusPct\x12(\n" +
	"\x10wager_streak_pct\x18\x16 \x01(\rR\x0ewagerStreakPct\x12^\n" +
	"\x14candy_points_granted\x18\x17 \x03(\v2,.protocol.CDOTAMatchMetadata.Team.CandyGrantR\x12candyPointsGranted\x12(\n" +
	"\x10active_season_id\x18\x18 \x01(\rR\x0eactiveSeasonId\x127\n" +
	"\x18cavern_crawl_half_credit\x18\x19 \x01(\bR\x15cavernCrawlHalfCredit\x12e\n" +
	"\x12periodic_resources\x18\x1a \x03(\v26.protocol.CDOTAMatchMetadata.Team.PeriodicResourceDataR\x11periodicResources\x12J\n" +
	"\x14extra_event_messages\x18\x1b \x03(\v2\x18.protocol.CExtraMsgBlockR\x12extraEventMessages\x1au\n" +
	"\x18FeaturedGamemodeProgress\x12\x1f\n" +
	"\vstart_value\x18\x01 \x01(\rR\n" +
	"startValue\x12\x1b\n" +
	"\tend_value\x18\x02 \x01(\rR\bendValue\x12\x1b\n" +
	"\tmax_value\x18\x03 \x01(\rR\bmaxValue\x1a\xa5\x1a\n" +
	"\x06Player\x12)\n" +
	"\x10ability_upgrades\x18\x02 \x03(\x05R\x0fabilityUpgrades\x12\x1f\n" +
	"\vplayer_slot\x18\x03 \x01(\rR\n" +
	"playerSlot\x12B\n" +
	"\x05kills\x18\x05 \x03(\v2,.protocol.CDOTAMatchMetadata.Team.PlayerKillR\x05kills\x12D\n" +
	"\x05items\x18\x06 \x03(\v2..protocol.CDOTAMatchMetadata.Team.ItemPurchaseR\x05items\x12\"\n" +
	"\ravg_kills_x16\x18\a \x01(\rR\vavgKillsX16\x12$\n" +
	"\x0eavg_deaths_x16\x18\b \x01(\rR\favgDeathsX16\x12&\n" +
	"\x0favg_assists_x16\x18\t \x01(\rR\ravgAssistsX16\x12\x1e\n" +
	"\vavg_gpm_x16\x18\n" +
	" \x01(\rR\tavgGpmX16\x12\x1e\n" +
	"\vavg_xpm_x16\x18\v \x01(\rR\tavgXpmX16\x12$\n" +
	"\x0ebest_kills_x16\x18\f \x01(\rR\fbestKillsX16\x12(\n" +
	"\x10best_assists_x16\x18\r \x01(\rR\x0ebestAssistsX16\x12 \n" +
	"\fbest_gpm_x16\x18\x0e \x01(\rR\n" +
	"bestGpmX16\x12 \n" +
	"\fbest_xpm_x16\x18\x0f \x01(\rR\n" +
	"bestXpmX16\x12\x1d\n" +
	"\n" +
	"win_streak\x18\x10 \x01(\rR\twinStreak\x12&\n" +
	"\x0fbest_win_streak\x18\x11 \x01(\rR\rbestWinStreak\x12\x1f\n" +
	"\vfight_score\x18\x12 \x01(\x02R\n" +
	"fightScore\x12\x1d\n" +
	"\n" +
	"farm_score\x18\x13 \x01(\x02R\tfarmScore\x12#\n" +
	"\rsupport_score\x18\x14 \x01(\x02R\fsupportScore\x12\x1d\n" +
	"\n" +
	"push_score\x18\x15 \x01(\x02R\tpushScore\x12$\n" +
	"\x0elevel_up_times\x18\x16 \x03(\rR\flevelUpTimes\x12&\n" +
	"\x0fgraph_net_worth\x18\x17 \x03(\x02R\rgraphNetWorth\x12b\n" +
	"\x12inventory_snapshot\x18\x18 \x03(\v23.protocol.CDOTAMatchMetadata.Team.InventorySnapshotR\x11inventorySnapshot\x120\n" +
	"\x14avg_stats_calibrated\x18\x19 \x01(\bR\x12avgStatsCalibrated\x12c\n" +
	"\x13auto_style_criteria\x18\x1a \x03(\v23.protocol.CDOTAMatchMetadata.Team.AutoStyleCriteriaR\x11autoStyleCriteria\x12J\n" +
	"\n" +
	"event_data\x18\x1d \x03(\v2+.protocol.CDOTAMatchMetadata.Team.EventDataR\teventData\x12f\n" +
	"\x14strange_gem_progress\x18\x1e \x03(\v24.protocol.CDOTAMatchMetadata.Team.StrangeGemProgressR\x12strangeGemProgress\x12\x17\n" +
	"\ahero_xp\x18\x1f \x01(\rR\x06heroXp\x12#\n" +
	"\rcamps_stacked\x18  \x01(\rR\fcampsStacked\x12b\n" +
	"\x12victory_prediction\x18! \x03(\v23.protocol.CDOTAMatchMetadata.Team.VictoryPredictionR\x11victoryPrediction\x120\n" +
	"\x14lane_selection_flags\x18\" \x01(\rR\x12laneSelectionFlags\x12\x1a\n" +
	"\brampages\x18# \x01(\rR\brampages\x12!\n" +
	"\ftriple_kills\x18$ \x01(\rR\vtripleKills\x12%\n" +
	"\x0eaegis_snatched\x18% \x01(\rR\raegisSnatched\x12+\n" +
	"\x11rapiers_purchased\x18& \x01(\rR\x10rapiersPurchased\x12'\n" +
	"\x0fcouriers_killed\x18' \x01(\rR\x0ecouriersKilled\x12$\n" +
	"\x0enet_worth_rank\x18( \x01(\rR\fnetWorthRank\x12,\n" +
	"\x12support_gold_spent\x18) \x01(\rR\x10supportGoldSpent\x122\n" +
	"\x15observer_wards_placed\x18* \x01(\rR\x13observerWardsPlaced\x12.\n" +
	"\x13sentry_wards_placed\x18+ \x01(\rR\x11sentryWardsPlaced\x12%\n" +
	"\x0ewards_dewarded\x18, \x01(\rR\rwardsDewarded\x12#\n" +
	"\rstun_duration\x18- \x01(\x02R\fstunDuration\x12d\n" +
	"\x13rank_mmr_boost_type\x18. \x01(\x0e2\x1b.protocol.EDOTAMMRBoostType:\x18k_EDOTAMMRBoostType_NoneR\x10rankMmrBoostType\x12f\n" +
	"\x11contract_progress\x180 \x03(\v29.protocol.CDOTAMatchMetadata.Team.Player.ContractProgressR\x10contractProgress\x12\x1b\n" +
	"\tguild_ids\x181 \x03(\rR\bguildIds\x12*\n" +
	"\x11graph_hero_damage\x182 \x03(\x02R\x0fgraphHeroDamage\x12O\n" +
	"\vteam_number\x183 \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x16DOTA_GC_TEAM_GOOD_GUYSR\n" +
	"teamNumber\x12\x1b\n" +
	"\tteam_slot\x184 \x01(\rR\bteamSlot\x12x\n" +
	"\x1afeatured_gamemode_progress\x185 \x01(\v2:.protocol.CDOTAMatchMetadata.Team.FeaturedGamemodeProgressR\x18featuredGamemodeProgress\x12=\n" +
	"\x1bfeatured_hero_sticker_index\x186 \x01(\rR\x18featuredHeroStickerIndex\x12A\n" +
	"\x1dfeatured_hero_sticker_quality\x187 \x01(\rR\x1afeaturedHeroStickerQuality\x12U\n" +
	"\x13equipped_econ_items\x188 \x03(\v2%.protocol.CDOTAMatchMetadata.EconItemR\x11equippedEconItems\x12(\n" +
	"\x0egame_player_id\x189 \x01(\x05:\x02-1R\fgamePlayerId\x12K\n" +
	"\x14player_tracked_stats\x18: \x03(\v2\x19.protocol.CMsgTrackedStatR\x12playerTrackedStats\x12f\n" +
	"\x11overworld_rewards\x18; \x01(\v29.protocol.CDOTAMatchMetadata.Team.Player.OverworldRewardsR\x10overworldRewards\x12]\n" +
	"\x18craftworks_quest_rewards\x18< \x03(\v2#.protocol.CMsgCraftworksQuestRewardR\x16craftworksQuestRewards\x1a\x97\x02\n" +
	"\x10ContractProgress\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\rR\aguildId\x12\x19\n" +
	"\bevent_id\x18\x02 \x01(\rR\aeventId\x122\n" +
	"\x15challenge_instance_id\x18\x03 \x01(\rR\x13challengeInstanceId\x12/\n" +
	"\x13challenge_parameter\x18\x04 \x01(\rR\x12challengeParameter\x12%\n" +
	"\x0econtract_stars\x18\x05 \x01(\rR\rcontractStars\x12#\n" +
	"\rcontract_slot\x18\x06 \x01(\rR\fcontractSlot\x12\x1c\n" +
	"\tcompleted\x18\a \x01(\bR\tcompleted\x1as\n" +
	"\x10OverworldRewards\x12!\n" +
	"\foverworld_id\x18\x01 \x01(\rR\voverworldId\x12<\n" +
	"\x06tokens\x18\x02 \x01(\v2$.protocol.CMsgOverworldTokenQuantityR\x06tokens\x1a\xd6\x04\n" +
	"\x16GuildChallengeProgress\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\rR\aguildId\x12:\n" +
	"\bevent_id\x18\x02 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x122\n" +
	"\x15challenge_instance_id\x18\x03 \x01(\rR\x13challengeInstanceId\x12/\n" +
	"\x13challenge_parameter\x18\x04 \x01(\rR\x12challengeParameter\x12/\n" +
	"\x13challenge_timestamp\x18\x05 \x01(\rR\x12challengeTimestamp\x12=\n" +
	"\x1bchallenge_progress_at_start\x18\x06 \x01(\rR\x18challengeProgressAtStart\x12D\n" +
	"\x1echallenge_progress_accumulated\x18\a \x01(\rR\x1cchallengeProgressAccumulated\x12w\n" +
	"\x13individual_progress\x18\b \x03(\v2F.protocol.CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgressR\x12individualProgress\x1aQ\n" +
	"\x12IndividualProgress\x12\x1a\n" +
	"\bprogress\x18\x02 \x01(\rR\bprogress\x12\x1f\n" +
	"\vplayer_slot\x18\x03 \x01(\rR\n" +
	"playerSlot\x1a\xbc\x01\n" +
	"\x03Tip\x12,\n" +
	"\x12source_player_slot\x18\x01 \x01(\rR\x10sourcePlayerSlot\x12,\n" +
	"\x12target_player_slot\x18\x02 \x01(\rR\x10targetPlayerSlot\x12\x1d\n" +
	"\n" +
	"tip_amount\x18\x03 \x01(\rR\ttipAmount\x12:\n" +
	"\bevent_id\x18\x04 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\"\x98\x18\n" +
	"\x19CDOTAMatchPrivateMetadata\x12>\n" +
	"\x05teams\x18\x01 \x03(\v2(.protocol.CDOTAMatchPrivateMetadata.TeamR\x05teams\x122\n" +
	"\x15graph_win_probability\x18\x02 \x03(\x02R\x13graphWinProbability\x12Q\n" +
	"\fstring_names\x18\x03 \x03(\v2..protocol.CDOTAMatchPrivateMetadata.StringNameR\vstringNames\x1a0\n" +
	"\n" +
	"StringName\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x1a\x81\x16\n" +
	"\x04Team\x12\x1b\n" +
	"\tdota_team\x18\x01 \x01(\rR\bdotaTeam\x12I\n" +
	"\aplayers\x18\x02 \x03(\v2/.protocol.CDOTAMatchPrivateMetadata.Team.PlayerR\aplayers\x12O\n" +
	"\tbuildings\x18\x03 \x03(\v21.protocol.CDOTAMatchPrivateMetadata.Team.BuildingR\tbuildings\x1a\xa2\x13\n" +
	"\x06Player\x12\x1f\n" +
	"\vplayer_slot\x18\x02 \x01(\rR\n" +
	"playerSlot\x12'\n" +
	"\x0fposition_stream\x18\x03 \x01(\fR\x0epositionStream\x12f\n" +
	"\x0fcombat_segments\x18\x04 \x03(\v2=.protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegmentR\x0ecombatSegments\x12*\n" +
	"\x11damage_unit_names\x18\x05 \x03(\tR\x0fdamageUnitNames\x12]\n" +
	"\fbuff_records\x18\x06 \x03(\v2:.protocol.CDOTAMatchPrivateMetadata.Team.Player.BuffRecordR\vbuffRecords\x12\x1f\n" +
	"\vgraph_kills\x18\a \x03(\x02R\n" +
	"graphKills\x12!\n" +
	"\fgraph_deaths\x18\b \x03(\x02R\vgraphDeaths\x12#\n" +
	"\rgraph_assists\x18\t \x03(\x02R\fgraphAssists\x12%\n" +
	"\x0egraph_lasthits\x18\n" +
	" \x03(\x02R\rgraphLasthits\x12!\n" +
	"\fgraph_denies\x18\v \x03(\x02R\vgraphDenies\x12a\n" +
	"\rgold_received\x18\f \x01(\v2<.protocol.CDOTAMatchPrivateMetadata.Team.Player.GoldReceivedR\fgoldReceived\x12[\n" +
	"\vxp_received\x18\r \x01(\v2:.protocol.CDOTAMatchPrivateMetadata.Team.Player.XPReceivedR\n" +
	"xpReceived\x12O\n" +
	"\vteam_number\x18\x0e \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x16DOTA_GC_TEAM_GOOD_GUYSR\n" +
	"teamNumber\x12\x1b\n" +
	"\tteam_slot\x18\x0f \x01(\rR\bteamSlot\x1a\xfb\x06\n" +
	"\rCombatSegment\x12\x1b\n" +
	"\tgame_time\x18\x01 \x01(\x05R\bgameTime\x12y\n" +
	"\x11damage_by_ability\x18\x02 \x03(\v2M.protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbilityR\x0fdamageByAbility\x12|\n" +
	"\x12healing_by_ability\x18\x03 \x03(\v2N.protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbilityR\x10healingByAbility\x1a\xa6\x02\n" +
	"\x0fDamageByAbility\x12*\n" +
	"\x11source_unit_index\x18\x03 \x01(\rR\x0fsourceUnitIndex\x12!\n" +
	"\n" +
	"ability_id\x18\x01 \x01(\x05:\x02-1R\tabilityId\x12\x82\x01\n" +
	"\x0fby_hero_targets\x18\x02 \x03(\v2Z.protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTargetR\rbyHeroTargets\x1a?\n" +
	"\fByHeroTarget\x12\x17\n" +
	"\ahero_id\x18\x01 \x01(\x05R\x06heroId\x12\x16\n" +
	"\x06damage\x18\x02 \x01(\rR\x06damage\x1a\xaa\x02\n" +
	"\x10HealingByAbility\x12*\n" +
	"\x11source_unit_index\x18\x03 \x01(\rR\x0fsourceUnitIndex\x12!\n" +
	"\n" +
	"ability_id\x18\x01 \x01(\x05:\x02-1R\tabilityId\x12\x83\x01\n" +
	"\x0fby_hero_targets\x18\x02 \x03(\v2[.protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTargetR\rbyHeroTargets\x1aA\n" +
	"\fByHeroTarget\x12\x17\n" +
	"\ahero_id\x18\x01 \x01(\x05R\x06heroId\x12\x18\n" +
	"\ahealing\x18\x02 \x01(\rR\ahealing\x1a\xc8\x02\n" +
	"\n" +
	"BuffRecord\x12*\n" +
	"\x0fbuff_ability_id\x18\x01 \x01(\x05:\x02-1R\rbuffAbilityId\x12,\n" +
	"\x12buff_modifier_name\x18\x03 \x01(\tR\x10buffModifierName\x12o\n" +
	"\x0fby_hero_targets\x18\x02 \x03(\v2G.protocol.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTargetR\rbyHeroTargets\x1ao\n" +
	"\fByHeroTarget\x12\x17\n" +
	"\ahero_id\x18\x01 \x01(\x05R\x06heroId\x12)\n" +
	"\x10elapsed_duration\x18\x02 \x01(\x02R\x0felapsedDuration\x12\x1b\n" +
	"\tis_hidden\x18\x03 \x01(\bR\bisHidden\x1a\xe1\x01\n" +
	"\fGoldReceived\x12\x14\n" +
	"\x05creep\x18\x01 \x01(\rR\x05creep\x12\x16\n" +
	"\x06heroes\x18\x02 \x01(\rR\x06heroes\x12!\n" +
	"\fbounty_runes\x18\x03 \x01(\rR\vbountyRunes\x12\x18\n" +
	"\apassive\x18\x04 \x01(\rR\apassive\x12\x1c\n" +
	"\tbuildings\x18\x05 \x01(\rR\tbuildings\x12\x1c\n" +
	"\tabilities\x18\x06 \x01(\rR\tabilities\x12\x14\n" +
	"\x05wards\x18\a \x01(\rR\x05wards\x12\x14\n" +
	"\x05other\x18\b \x01(\rR\x05other\x1a\xcc\x01\n" +
	"\n" +
	"XPReceived\x12\x14\n" +
	"\x05creep\x18\x01 \x01(\rR\x05creep\x12\x16\n" +
	"\x06heroes\x18\x02 \x01(\rR\x06heroes\x12\x16\n" +
	"\x06roshan\x18\x03 \x01(\rR\x06roshan\x12*\n" +
	"\x11tome_of_knowledge\x18\x04 \x01(\rR\x0ftomeOfKnowledge\x12\x18\n" +
	"\aoutpost\x18\x05 \x01(\rR\aoutpost\x12\x14\n" +
	"\x05other\x18\x06 \x01(\rR\x05other\x12\x1c\n" +
	"\tabilities\x18\a \x01(\rR\tabilities\x1a\x9a\x01\n" +
	"\bBuilding\x12\x1b\n" +
	"\tunit_name\x18\x01 \x01(\tR\bunitName\x12(\n" +
	"\x10position_quant_x\x18\x02 \x01(\rR\x0epositionQuantX\x12(\n" +
	"\x10position_quant_y\x18\x03 \x01(\rR\x0epositionQuantY\x12\x1d\n" +
	"\n" +
	"death_time\x18\x04 \x01(\x02R\tdeathTime"

var (
	file_dota_match_metadata_proto_rawDescOnce sync.Once
	file_dota_match_metadata_proto_rawDescData []byte
)

func file_dota_match_metadata_proto_rawDescGZIP() []byte {
	file_dota_match_metadata_proto_rawDescOnce.Do(func() {
		file_dota_match_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dota_match_metadata_proto_rawDesc), len(file_dota_match_metadata_proto_rawDesc)))
	})
	return file_dota_match_metadata_proto_rawDescData
}

var file_dota_match_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_dota_match_metadata_proto_goTypes = []any{
	(*CDOTAMatchMetadataFile)(nil),                                                            // 0: protocol.CDOTAMatchMetadataFile
	(*CDOTAMatchMetadata)(nil),                                                                // 1: protocol.CDOTAMatchMetadata
	(*CDOTAMatchPrivateMetadata)(nil),                                                         // 2: protocol.CDOTAMatchPrivateMetadata
	(*CDOTAMatchMetadata_EconItem)(nil),                                                       // 3: protocol.CDOTAMatchMetadata.EconItem
	(*CDOTAMatchMetadata_Team)(nil),                                                           // 4: protocol.CDOTAMatchMetadata.Team
	(*CDOTAMatchMetadata_GuildChallengeProgress)(nil),                                         // 5: protocol.CDOTAMatchMetadata.GuildChallengeProgress
	(*CDOTAMatchMetadata_Tip)(nil),                                                            // 6: protocol.CDOTAMatchMetadata.Tip
	(*CDOTAMatchMetadata_Team_PlayerKill)(nil),                                                // 7: protocol.CDOTAMatchMetadata.Team.PlayerKill
	(*CDOTAMatchMetadata_Team_ItemPurchase)(nil),                                              // 8: protocol.CDOTAMatchMetadata.Team.ItemPurchase
	(*CDOTAMatchMetadata_Team_InventorySnapshot)(nil),                                         // 9: protocol.CDOTAMatchMetadata.Team.InventorySnapshot
	(*CDOTAMatchMetadata_Team_AutoStyleCriteria)(nil),                                         // 10: protocol.CDOTAMatchMetadata.Team.AutoStyleCriteria
	(*CDOTAMatchMetadata_Team_StrangeGemProgress)(nil),                                        // 11: protocol.CDOTAMatchMetadata.Team.StrangeGemProgress
	(*CDOTAMatchMetadata_Team_VictoryPrediction)(nil),                                         // 12: protocol.CDOTAMatchMetadata.Team.VictoryPrediction
	(*CDOTAMatchMetadata_Team_SubChallenge)(nil),                                              // 13: protocol.CDOTAMatchMetadata.Team.SubChallenge
	(*CDOTAMatchMetadata_Team_CavernChallengeResult)(nil),                                     // 14: protocol.CDOTAMatchMetadata.Team.CavernChallengeResult
	(*CDOTAMatchMetadata_Team_ActionGrant)(nil),                                               // 15: protocol.CDOTAMatchMetadata.Team.ActionGrant
	(*CDOTAMatchMetadata_Team_CandyGrant)(nil),                                                // 16: protocol.CDOTAMatchMetadata.Team.CandyGrant
	(*CDOTAMatchMetadata_Team_PeriodicResourceData)(nil),                                      // 17: protocol.CDOTAMatchMetadata.Team.PeriodicResourceData
	(*CDOTAMatchMetadata_Team_EventData)(nil),                                                 // 18: protocol.CDOTAMatchMetadata.Team.EventData
	(*CDOTAMatchMetadata_Team_FeaturedGamemodeProgress)(nil),                                  // 19: protocol.CDOTAMatchMetadata.Team.FeaturedGamemodeProgress
	(*CDOTAMatchMetadata_Team_Player)(nil),                                                    // 20: protocol.CDOTAMatchMetadata.Team.Player
	(*CDOTAMatchMetadata_Team_Player_ContractProgress)(nil),                                   // 21: protocol.CDOTAMatchMetadata.Team.Player.ContractProgress
	(*CDOTAMatchMetadata_Team_Player_OverworldRewards)(nil),                                   // 22: protocol.CDOTAMatchMetadata.Team.Player.OverworldRewards
	(*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress)(nil),                      // 23: protocol.CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress
	(*CDOTAMatchPrivateMetadata_StringName)(nil),                                              // 24: protocol.CDOTAMatchPrivateMetadata.StringName
	(*CDOTAMatchPrivateMetadata_Team)(nil),                                                    // 25: protocol.CDOTAMatchPrivateMetadata.Team
	(*CDOTAMatchPrivateMetadata_Team_Player)(nil),                                             // 26: protocol.CDOTAMatchPrivateMetadata.Team.Player
	(*CDOTAMatchPrivateMetadata_Team_Building)(nil),                                           // 27: protocol.CDOTAMatchPrivateMetadata.Team.Building
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment)(nil),                               // 28: protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment
	(*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord)(nil),                                  // 29: protocol.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord
	(*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived)(nil),                                // 30: protocol.CDOTAMatchPrivateMetadata.Team.Player.GoldReceived
	(*CDOTAMatchPrivateMetadata_Team_Player_XPReceived)(nil),                                  // 31: protocol.CDOTAMatchPrivateMetadata.Team.Player.XPReceived
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility)(nil),               // 32: protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility)(nil),              // 33: protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget)(nil),  // 34: protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget)(nil), // 35: protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget
	(*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget)(nil),                     // 36: protocol.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget
	(*CMsgMatchMatchmakingStats)(nil),                                                         // 37: protocol.CMsgMatchMatchmakingStats
	(*CMvpData)(nil),                                                                          // 38: protocol.CMvpData
	(*CMsgTrackedStat)(nil),                                                                   // 39: protocol.CMsgTrackedStat
	(*CSOEconItemAttribute)(nil),                                                              // 40: protocol.CSOEconItemAttribute
	(*CSOEconItemEquipped)(nil),                                                               // 41: protocol.CSOEconItemEquipped
	(EEvent)(0),                                                                               // 42: protocol.EEvent
	(*CExtraMsgBlock)(nil),                                                                    // 43: protocol.CExtraMsgBlock
	(EDOTAMMRBoostType)(0),                                                                    // 44: protocol.EDOTAMMRBoostType
	(DOTA_GC_TEAM)(0),                                                                         // 45: protocol.DOTA_GC_TEAM
	(*CMsgCraftworksQuestReward)(nil),                                                         // 46: protocol.CMsgCraftworksQuestReward
	(*CMsgOverworldTokenQuantity)(nil),                                                        // 47: protocol.CMsgOverworldTokenQuantity
}
var file_dota_match_metadata_proto_depIdxs = []int32{
	1,  // 0: protocol.CDOTAMatchMetadataFile.metadata:type_name -> protocol.CDOTAMatchMetadata
	4,  // 1: protocol.CDOTAMatchMetadata.teams:type_name -> protocol.CDOTAMatchMetadata.Team
	37, // 2: protocol.CDOTAMatchMetadata.matchmaking_stats:type_name -> protocol.CMsgMatchMatchmakingStats
	38, // 3: protocol.CDOTAMatchMetadata.mvp_data:type_name -> protocol.CMvpData
	5,  // 4: protocol.CDOTAMatchMetadata.guild_challenge_progress:type_name -> protocol.CDOTAMatchMetadata.GuildChallengeProgress
	6,  // 5: protocol.CDOTAMatchMetadata.match_tips:type_name -> protocol.CDOTAMatchMetadata.Tip
	39, // 6: protocol.CDOTAMatchMetadata.match_tracked_stats:type_name -> protocol.CMsgTrackedStat
	25, // 7: protocol.CDOTAMatchPrivateMetadata.teams:type_name -> protocol.CDOTAMatchPrivateMetadata.Team
	24, // 8: protocol.CDOTAMatchPrivateMetadata.string_names:type_name -> protocol.CDOTAMatchPrivateMetadata.StringName
	40, // 9: protocol.CDOTAMatchMetadata.EconItem.attribute:type_name -> protocol.CSOEconItemAttribute
	41, // 10: protocol.CDOTAMatchMetadata.EconItem.equipped_state:type_name -> protocol.CSOEconItemEquipped
	20, // 11: protocol.CDOTAMatchMetadata.Team.players:type_name -> protocol.CDOTAMatchMetadata.Team.Player
	39, // 12: protocol.CDOTAMatchMetadata.Team.team_tracked_stats:type_name -> protocol.CMsgTrackedStat
	42, // 13: protocol.CDOTAMatchMetadata.GuildChallengeProgress.event_id:type_name -> protocol.EEvent
	23, // 14: protocol.CDOTAMatchMetadata.GuildChallengeProgress.individual_progress:type_name -> protocol.CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress
	42, // 15: protocol.CDOTAMatchMetadata.Tip.event_id:type_name -> protocol.EEvent
	13, // 16: protocol.CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress:type_name -> protocol.CDOTAMatchMetadata.Team.SubChallenge
	14, // 17: protocol.CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results:type_name -> protocol.CDOTAMatchMetadata.Team.CavernChallengeResult
	15, // 18: protocol.CDOTAMatchMetadata.Team.EventData.actions_granted:type_name -> protocol.CDOTAMatchMetadata.Team.ActionGrant
	16, // 19: protocol.CDOTAMatchMetadata.Team.EventData.candy_points_granted:type_name -> protocol.CDOTAMatchMetadata.Team.CandyGrant
	17, // 20: protocol.CDOTAMatchMetadata.Team.EventData.periodic_resources:type_name -> protocol.CDOTAMatchMetadata.Team.PeriodicResourceData
	43, // 21: protocol.CDOTAMatchMetadata.Team.EventData.extra_event_messages:type_name -> protocol.CExtraMsgBlock
	7,  // 22: protocol.CDOTAMatchMetadata.Team.Player.kills:type_name -> protocol.CDOTAMatchMetadata.Team.PlayerKill
	8,  // 23: protocol.CDOTAMatchMetadata.Team.Player.items:type_name -> protocol.CDOTAMatchMetadata.Team.ItemPurchase
	9,  // 24: protocol.CDOTAMatchMetadata.Team.Player.inventory_snapshot:type_name -> protocol.CDOTAMatchMetadata.Team.InventorySnapshot
	10, // 25: protocol.CDOTAMatchMetadata.Team.Player.auto_style_criteria:type_name -> protocol.CDOTAMatchMetadata.Team.AutoStyleCriteria
	18, // 26: protocol.CDOTAMatchMetadata.Team.Player.event_data:type_name -> protocol.CDOTAMatchMetadata.Team.EventData
	11, // 27: protocol.CDOTAMatchMetadata.Team.Player.strange_gem_progress:type_name -> protocol.CDOTAMatchMetadata.Team.StrangeGemProgress
	12, // 28: protocol.CDOTAMatchMetadata.Team.Player.victory_prediction:type_name -> protocol.CDOTAMatchMetadata.Team.VictoryPrediction
	44, // 29: protocol.CDOTAMatchMetadata.Team.Player.rank_mmr_boost_type:type_name -> protocol.EDOTAMMRBoostType
	21, // 30: protocol.CDOTAMatchMetadata.Team.Player.contract_progress:type_name -> protocol.CDOTAMatchMetadata.Team.Player.ContractProgress
	45, // 31: protocol.CDOTAMatchMetadata.Team.Player.team_number:type_name -> protocol.DOTA_GC_TEAM
	19, // 32: protocol.CDOTAMatchMetadata.Team.Player.featured_gamemode_progress:type_name -> protocol.CDOTAMatchMetadata.Team.FeaturedGamemodeProgress
	3,  // 33: protocol.CDOTAMatchMetadata.Team.Player.equipped_econ_items:type_name -> protocol.CDOTAMatchMetadata.EconItem
	39, // 34: protocol.CDOTAMatchMetadata.Team.Player.player_tracked_stats:type_name -> protocol.CMsgTrackedStat
	22, // 35: protocol.CDOTAMatchMetadata.Team.Player.overworld_rewards:type_name -> protocol.CDOTAMatchMetadata.Team.Player.OverworldRewards
	46, // 36: protocol.CDOTAMatchMetadata.Team.Player.craftworks_quest_rewards:type_name -> protocol.CMsgCraftworksQuestReward
	47, // 37: protocol.CDOTAMatchMetadata.Team.Player.OverworldRewards.tokens:type_name -> protocol.CMsgOverworldTokenQuantity
	26, // 38: protocol.CDOTAMatchPrivateMetadata.Team.players:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player
	27, // 39: protocol.CDOTAMatchPrivateMetadata.Team.buildings:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Building
	28, // 40: protocol.CDOTAMatchPrivateMetadata.Team.Player.combat_segments:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment
	29, // 41: protocol.CDOTAMatchPrivateMetadata.Team.Player.buff_records:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord
	30, // 42: protocol.CDOTAMatchPrivateMetadata.Team.Player.gold_received:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player.GoldReceived
	31, // 43: protocol.CDOTAMatchPrivateMetadata.Team.Player.xp_received:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player.XPReceived
	45, // 44: protocol.CDOTAMatchPrivateMetadata.Team.Player.team_number:type_name -> protocol.DOTA_GC_TEAM
	32, // 45: protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility
	33, // 46: protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.healing_by_ability:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility
	36, // 47: protocol.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget
	34, // 48: protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget
	35, // 49: protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.by_hero_targets:type_name -> protocol.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_dota_match_metadata_proto_init() }
func file_dota_match_metadata_proto_init() {
	if File_dota_match_metadata_proto != nil {
		return
	}
	file_base_gcmessages_proto_init()
	file_dota_gcmessages_common_match_management_proto_init()
	file_dota_gcmessages_common_lobby_proto_init()
	file_dota_gcmessages_common_overworld_proto_init()
	file_dota_gcmessages_common_craftworks_proto_init()
	file_dota_gcmessages_common_proto_init()
	file_dota_shared_enums_proto_init()
	file_gcsdk_gcmessages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dota_match_metadata_proto_rawDesc), len(file_dota_match_metadata_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_match_metadata_proto_goTypes,
		DependencyIndexes: file_dota_match_metadata_proto_depIdxs,
		MessageInfos:      file_dota_match_metadata_proto_msgTypes,
	}.Build()
	File_dota_match_metadata_proto = out.File
	file_dota_match_metadata_proto_goTypes = nil
	file_dota_match_metadata_proto_depIdxs = nil
}
