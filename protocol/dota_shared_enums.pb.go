// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dota_shared_enums.proto

package protocol

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DOTA_GameMode int32

const (
	DOTA_GameMode_DOTA_GAMEMODE_NONE              DOTA_GameMode = 0
	DOTA_GameMode_DOTA_GAMEMODE_AP                DOTA_GameMode = 1
	DOTA_GameMode_DOTA_GAMEMODE_CM                DOTA_GameMode = 2
	DOTA_GameMode_DOTA_GAMEMODE_RD                DOTA_GameMode = 3
	DOTA_GameMode_DOTA_GAMEMODE_SD                DOTA_GameMode = 4
	DOTA_GameMode_DOTA_GAMEMODE_AR                DOTA_GameMode = 5
	DOTA_GameMode_DOTA_GAMEMODE_INTRO             DOTA_GameMode = 6
	DOTA_GameMode_DOTA_GAMEMODE_HW                DOTA_GameMode = 7
	DOTA_GameMode_DOTA_GAMEMODE_REVERSE_CM        DOTA_GameMode = 8
	DOTA_GameMode_DOTA_GAMEMODE_XMAS              DOTA_GameMode = 9
	DOTA_GameMode_DOTA_GAMEMODE_TUTORIAL          DOTA_GameMode = 10
	DOTA_GameMode_DOTA_GAMEMODE_MO                DOTA_GameMode = 11
	DOTA_GameMode_DOTA_GAMEMODE_LP                DOTA_GameMode = 12
	DOTA_GameMode_DOTA_GAMEMODE_POOL1             DOTA_GameMode = 13
	DOTA_GameMode_DOTA_GAMEMODE_FH                DOTA_GameMode = 14
	DOTA_GameMode_DOTA_GAMEMODE_CUSTOM            DOTA_GameMode = 15
	DOTA_GameMode_DOTA_GAMEMODE_CD                DOTA_GameMode = 16
	DOTA_GameMode_DOTA_GAMEMODE_BD                DOTA_GameMode = 17
	DOTA_GameMode_DOTA_GAMEMODE_ABILITY_DRAFT     DOTA_GameMode = 18
	DOTA_GameMode_DOTA_GAMEMODE_EVENT             DOTA_GameMode = 19
	DOTA_GameMode_DOTA_GAMEMODE_ARDM              DOTA_GameMode = 20
	DOTA_GameMode_DOTA_GAMEMODE_1V1MID            DOTA_GameMode = 21
	DOTA_GameMode_DOTA_GAMEMODE_ALL_DRAFT         DOTA_GameMode = 22
	DOTA_GameMode_DOTA_GAMEMODE_TURBO             DOTA_GameMode = 23
	DOTA_GameMode_DOTA_GAMEMODE_MUTATION          DOTA_GameMode = 24
	DOTA_GameMode_DOTA_GAMEMODE_COACHES_CHALLENGE DOTA_GameMode = 25
)

// Enum value maps for DOTA_GameMode.
var (
	DOTA_GameMode_name = map[int32]string{
		0:  "DOTA_GAMEMODE_NONE",
		1:  "DOTA_GAMEMODE_AP",
		2:  "DOTA_GAMEMODE_CM",
		3:  "DOTA_GAMEMODE_RD",
		4:  "DOTA_GAMEMODE_SD",
		5:  "DOTA_GAMEMODE_AR",
		6:  "DOTA_GAMEMODE_INTRO",
		7:  "DOTA_GAMEMODE_HW",
		8:  "DOTA_GAMEMODE_REVERSE_CM",
		9:  "DOTA_GAMEMODE_XMAS",
		10: "DOTA_GAMEMODE_TUTORIAL",
		11: "DOTA_GAMEMODE_MO",
		12: "DOTA_GAMEMODE_LP",
		13: "DOTA_GAMEMODE_POOL1",
		14: "DOTA_GAMEMODE_FH",
		15: "DOTA_GAMEMODE_CUSTOM",
		16: "DOTA_GAMEMODE_CD",
		17: "DOTA_GAMEMODE_BD",
		18: "DOTA_GAMEMODE_ABILITY_DRAFT",
		19: "DOTA_GAMEMODE_EVENT",
		20: "DOTA_GAMEMODE_ARDM",
		21: "DOTA_GAMEMODE_1V1MID",
		22: "DOTA_GAMEMODE_ALL_DRAFT",
		23: "DOTA_GAMEMODE_TURBO",
		24: "DOTA_GAMEMODE_MUTATION",
		25: "DOTA_GAMEMODE_COACHES_CHALLENGE",
	}
	DOTA_GameMode_value = map[string]int32{
		"DOTA_GAMEMODE_NONE":              0,
		"DOTA_GAMEMODE_AP":                1,
		"DOTA_GAMEMODE_CM":                2,
		"DOTA_GAMEMODE_RD":                3,
		"DOTA_GAMEMODE_SD":                4,
		"DOTA_GAMEMODE_AR":                5,
		"DOTA_GAMEMODE_INTRO":             6,
		"DOTA_GAMEMODE_HW":                7,
		"DOTA_GAMEMODE_REVERSE_CM":        8,
		"DOTA_GAMEMODE_XMAS":              9,
		"DOTA_GAMEMODE_TUTORIAL":          10,
		"DOTA_GAMEMODE_MO":                11,
		"DOTA_GAMEMODE_LP":                12,
		"DOTA_GAMEMODE_POOL1":             13,
		"DOTA_GAMEMODE_FH":                14,
		"DOTA_GAMEMODE_CUSTOM":            15,
		"DOTA_GAMEMODE_CD":                16,
		"DOTA_GAMEMODE_BD":                17,
		"DOTA_GAMEMODE_ABILITY_DRAFT":     18,
		"DOTA_GAMEMODE_EVENT":             19,
		"DOTA_GAMEMODE_ARDM":              20,
		"DOTA_GAMEMODE_1V1MID":            21,
		"DOTA_GAMEMODE_ALL_DRAFT":         22,
		"DOTA_GAMEMODE_TURBO":             23,
		"DOTA_GAMEMODE_MUTATION":          24,
		"DOTA_GAMEMODE_COACHES_CHALLENGE": 25,
	}
)

func (x DOTA_GameMode) Enum() *DOTA_GameMode {
	p := new(DOTA_GameMode)
	*p = x
	return p
}

func (x DOTA_GameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_GameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[0].Descriptor()
}

func (DOTA_GameMode) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[0]
}

func (x DOTA_GameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_GameMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_GameMode(num)
	return nil
}

// Deprecated: Use DOTA_GameMode.Descriptor instead.
func (DOTA_GameMode) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{0}
}

type DOTA_GameState int32

const (
	DOTA_GameState_DOTA_GAMERULES_STATE_INIT                     DOTA_GameState = 0
	DOTA_GameState_DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD DOTA_GameState = 1
	DOTA_GameState_DOTA_GAMERULES_STATE_HERO_SELECTION           DOTA_GameState = 2
	DOTA_GameState_DOTA_GAMERULES_STATE_STRATEGY_TIME            DOTA_GameState = 3
	DOTA_GameState_DOTA_GAMERULES_STATE_PRE_GAME                 DOTA_GameState = 4
	DOTA_GameState_DOTA_GAMERULES_STATE_GAME_IN_PROGRESS         DOTA_GameState = 5
	DOTA_GameState_DOTA_GAMERULES_STATE_POST_GAME                DOTA_GameState = 6
	DOTA_GameState_DOTA_GAMERULES_STATE_DISCONNECT               DOTA_GameState = 7
	DOTA_GameState_DOTA_GAMERULES_STATE_TEAM_SHOWCASE            DOTA_GameState = 8
	DOTA_GameState_DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP        DOTA_GameState = 9
	DOTA_GameState_DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD     DOTA_GameState = 10
	DOTA_GameState_DOTA_GAMERULES_STATE_SCENARIO_SETUP           DOTA_GameState = 11
	DOTA_GameState_DOTA_GAMERULES_STATE_PLAYER_DRAFT             DOTA_GameState = 12
	DOTA_GameState_DOTA_GAMERULES_STATE_LAST                     DOTA_GameState = 13
)

// Enum value maps for DOTA_GameState.
var (
	DOTA_GameState_name = map[int32]string{
		0:  "DOTA_GAMERULES_STATE_INIT",
		1:  "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
		2:  "DOTA_GAMERULES_STATE_HERO_SELECTION",
		3:  "DOTA_GAMERULES_STATE_STRATEGY_TIME",
		4:  "DOTA_GAMERULES_STATE_PRE_GAME",
		5:  "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
		6:  "DOTA_GAMERULES_STATE_POST_GAME",
		7:  "DOTA_GAMERULES_STATE_DISCONNECT",
		8:  "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
		9:  "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
		10: "DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD",
		11: "DOTA_GAMERULES_STATE_SCENARIO_SETUP",
		12: "DOTA_GAMERULES_STATE_PLAYER_DRAFT",
		13: "DOTA_GAMERULES_STATE_LAST",
	}
	DOTA_GameState_value = map[string]int32{
		"DOTA_GAMERULES_STATE_INIT":                     0,
		"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD": 1,
		"DOTA_GAMERULES_STATE_HERO_SELECTION":           2,
		"DOTA_GAMERULES_STATE_STRATEGY_TIME":            3,
		"DOTA_GAMERULES_STATE_PRE_GAME":                 4,
		"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS":         5,
		"DOTA_GAMERULES_STATE_POST_GAME":                6,
		"DOTA_GAMERULES_STATE_DISCONNECT":               7,
		"DOTA_GAMERULES_STATE_TEAM_SHOWCASE":            8,
		"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP":        9,
		"DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD":     10,
		"DOTA_GAMERULES_STATE_SCENARIO_SETUP":           11,
		"DOTA_GAMERULES_STATE_PLAYER_DRAFT":             12,
		"DOTA_GAMERULES_STATE_LAST":                     13,
	}
)

func (x DOTA_GameState) Enum() *DOTA_GameState {
	p := new(DOTA_GameState)
	*p = x
	return p
}

func (x DOTA_GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[1].Descriptor()
}

func (DOTA_GameState) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[1]
}

func (x DOTA_GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_GameState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_GameState(num)
	return nil
}

// Deprecated: Use DOTA_GameState.Descriptor instead.
func (DOTA_GameState) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{1}
}

type DOTA_GC_TEAM int32

const (
	DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS   DOTA_GC_TEAM = 0
	DOTA_GC_TEAM_DOTA_GC_TEAM_BAD_GUYS    DOTA_GC_TEAM = 1
	DOTA_GC_TEAM_DOTA_GC_TEAM_BROADCASTER DOTA_GC_TEAM = 2
	DOTA_GC_TEAM_DOTA_GC_TEAM_SPECTATOR   DOTA_GC_TEAM = 3
	DOTA_GC_TEAM_DOTA_GC_TEAM_PLAYER_POOL DOTA_GC_TEAM = 4
	DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM      DOTA_GC_TEAM = 5
	DOTA_GC_TEAM_DOTA_GC_TEAM_CUSTOM_1    DOTA_GC_TEAM = 6
	DOTA_GC_TEAM_DOTA_GC_TEAM_CUSTOM_2    DOTA_GC_TEAM = 7
	DOTA_GC_TEAM_DOTA_GC_TEAM_CUSTOM_3    DOTA_GC_TEAM = 8
	DOTA_GC_TEAM_DOTA_GC_TEAM_CUSTOM_4    DOTA_GC_TEAM = 9
	DOTA_GC_TEAM_DOTA_GC_TEAM_CUSTOM_5    DOTA_GC_TEAM = 10
	DOTA_GC_TEAM_DOTA_GC_TEAM_CUSTOM_6    DOTA_GC_TEAM = 11
	DOTA_GC_TEAM_DOTA_GC_TEAM_CUSTOM_7    DOTA_GC_TEAM = 12
	DOTA_GC_TEAM_DOTA_GC_TEAM_CUSTOM_8    DOTA_GC_TEAM = 13
	DOTA_GC_TEAM_DOTA_GC_TEAM_NEUTRALS    DOTA_GC_TEAM = 14
)

// Enum value maps for DOTA_GC_TEAM.
var (
	DOTA_GC_TEAM_name = map[int32]string{
		0:  "DOTA_GC_TEAM_GOOD_GUYS",
		1:  "DOTA_GC_TEAM_BAD_GUYS",
		2:  "DOTA_GC_TEAM_BROADCASTER",
		3:  "DOTA_GC_TEAM_SPECTATOR",
		4:  "DOTA_GC_TEAM_PLAYER_POOL",
		5:  "DOTA_GC_TEAM_NOTEAM",
		6:  "DOTA_GC_TEAM_CUSTOM_1",
		7:  "DOTA_GC_TEAM_CUSTOM_2",
		8:  "DOTA_GC_TEAM_CUSTOM_3",
		9:  "DOTA_GC_TEAM_CUSTOM_4",
		10: "DOTA_GC_TEAM_CUSTOM_5",
		11: "DOTA_GC_TEAM_CUSTOM_6",
		12: "DOTA_GC_TEAM_CUSTOM_7",
		13: "DOTA_GC_TEAM_CUSTOM_8",
		14: "DOTA_GC_TEAM_NEUTRALS",
	}
	DOTA_GC_TEAM_value = map[string]int32{
		"DOTA_GC_TEAM_GOOD_GUYS":   0,
		"DOTA_GC_TEAM_BAD_GUYS":    1,
		"DOTA_GC_TEAM_BROADCASTER": 2,
		"DOTA_GC_TEAM_SPECTATOR":   3,
		"DOTA_GC_TEAM_PLAYER_POOL": 4,
		"DOTA_GC_TEAM_NOTEAM":      5,
		"DOTA_GC_TEAM_CUSTOM_1":    6,
		"DOTA_GC_TEAM_CUSTOM_2":    7,
		"DOTA_GC_TEAM_CUSTOM_3":    8,
		"DOTA_GC_TEAM_CUSTOM_4":    9,
		"DOTA_GC_TEAM_CUSTOM_5":    10,
		"DOTA_GC_TEAM_CUSTOM_6":    11,
		"DOTA_GC_TEAM_CUSTOM_7":    12,
		"DOTA_GC_TEAM_CUSTOM_8":    13,
		"DOTA_GC_TEAM_NEUTRALS":    14,
	}
)

func (x DOTA_GC_TEAM) Enum() *DOTA_GC_TEAM {
	p := new(DOTA_GC_TEAM)
	*p = x
	return p
}

func (x DOTA_GC_TEAM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_GC_TEAM) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[2].Descriptor()
}

func (DOTA_GC_TEAM) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[2]
}

func (x DOTA_GC_TEAM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_GC_TEAM) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_GC_TEAM(num)
	return nil
}

// Deprecated: Use DOTA_GC_TEAM.Descriptor instead.
func (DOTA_GC_TEAM) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{2}
}

type EEvent int32

const (
	EEvent_EVENT_ID_NONE                      EEvent = 0
	EEvent_EVENT_ID_DIRETIDE                  EEvent = 1
	EEvent_EVENT_ID_SPRING_FESTIVAL           EEvent = 2
	EEvent_EVENT_ID_FROSTIVUS_2013            EEvent = 3
	EEvent_EVENT_ID_COMPENDIUM_2014           EEvent = 4
	EEvent_EVENT_ID_NEXON_PC_BANG             EEvent = 5
	EEvent_EVENT_ID_PWRD_DAC_2015             EEvent = 6
	EEvent_EVENT_ID_NEW_BLOOM_2015            EEvent = 7
	EEvent_EVENT_ID_INTERNATIONAL_2015        EEvent = 8
	EEvent_EVENT_ID_FALL_MAJOR_2015           EEvent = 9
	EEvent_EVENT_ID_ORACLE_PA                 EEvent = 10
	EEvent_EVENT_ID_NEW_BLOOM_2015_PREBEAST   EEvent = 11
	EEvent_EVENT_ID_FROSTIVUS                 EEvent = 12
	EEvent_EVENT_ID_WINTER_MAJOR_2016         EEvent = 13
	EEvent_EVENT_ID_INTERNATIONAL_2016        EEvent = 14
	EEvent_EVENT_ID_FALL_MAJOR_2016           EEvent = 15
	EEvent_EVENT_ID_WINTER_MAJOR_2017         EEvent = 16
	EEvent_EVENT_ID_NEW_BLOOM_2017            EEvent = 17
	EEvent_EVENT_ID_INTERNATIONAL_2017        EEvent = 18
	EEvent_EVENT_ID_PLUS_SUBSCRIPTION         EEvent = 19
	EEvent_EVENT_ID_SINGLES_DAY_2017          EEvent = 20
	EEvent_EVENT_ID_FROSTIVUS_2017            EEvent = 21
	EEvent_EVENT_ID_INTERNATIONAL_2018        EEvent = 22
	EEvent_EVENT_ID_FROSTIVUS_2018            EEvent = 23
	EEvent_EVENT_ID_NEW_BLOOM_2019            EEvent = 24
	EEvent_EVENT_ID_INTERNATIONAL_2019        EEvent = 25
	EEvent_EVENT_ID_NEW_PLAYER_EXPERIENCE     EEvent = 26
	EEvent_EVENT_ID_FROSTIVUS_2019            EEvent = 27
	EEvent_EVENT_ID_NEW_BLOOM_2020            EEvent = 28
	EEvent_EVENT_ID_INTERNATIONAL_2020        EEvent = 29
	EEvent_EVENT_ID_TEAM_FANDOM               EEvent = 30
	EEvent_EVENT_ID_DIRETIDE_2020             EEvent = 31
	EEvent_EVENT_ID_SPRING_2021               EEvent = 32
	EEvent_EVENT_ID_FALL_2021                 EEvent = 33
	EEvent_EVENT_ID_TEAM_FANDOM_FALL_2021     EEvent = 34
	EEvent_EVENT_ID_TEAM_2021_2022_TOUR2      EEvent = 35
	EEvent_EVENT_ID_INTERNATIONAL_2022        EEvent = 36
	EEvent_EVENT_ID_TEAM_2021_2022_TOUR3      EEvent = 37
	EEvent_EVENT_ID_TEAM_INTERNATIONAL_2022   EEvent = 38
	EEvent_EVENT_ID_PERMANENT_GRANTS          EEvent = 39
	EEvent_EVENT_ID_MUERTA_RELEASE_SPRING2023 EEvent = 40
	EEvent_EVENT_ID_TEAM_2023_TOUR1           EEvent = 41
	EEvent_EVENT_ID_TEAM_2023_TOUR2           EEvent = 42
	EEvent_EVENT_ID_TEAM_2023_TOUR3           EEvent = 43
	EEvent_EVENT_ID_INTERNATIONAL_2023        EEvent = 45
	EEvent_EVENT_ID_10TH_ANNIVERSARY          EEvent = 46
	EEvent_EVENT_ID_CROWNFALL                 EEvent = 47
	EEvent_EVENT_ID_FROSTIVUS_2023            EEvent = 48
	EEvent_EVENT_ID_INTERNATIONAL_2024        EEvent = 49
	EEvent_EVENT_ID_FROSTIVUS_2024            EEvent = 50
)

// Enum value maps for EEvent.
var (
	EEvent_name = map[int32]string{
		0:  "EVENT_ID_NONE",
		1:  "EVENT_ID_DIRETIDE",
		2:  "EVENT_ID_SPRING_FESTIVAL",
		3:  "EVENT_ID_FROSTIVUS_2013",
		4:  "EVENT_ID_COMPENDIUM_2014",
		5:  "EVENT_ID_NEXON_PC_BANG",
		6:  "EVENT_ID_PWRD_DAC_2015",
		7:  "EVENT_ID_NEW_BLOOM_2015",
		8:  "EVENT_ID_INTERNATIONAL_2015",
		9:  "EVENT_ID_FALL_MAJOR_2015",
		10: "EVENT_ID_ORACLE_PA",
		11: "EVENT_ID_NEW_BLOOM_2015_PREBEAST",
		12: "EVENT_ID_FROSTIVUS",
		13: "EVENT_ID_WINTER_MAJOR_2016",
		14: "EVENT_ID_INTERNATIONAL_2016",
		15: "EVENT_ID_FALL_MAJOR_2016",
		16: "EVENT_ID_WINTER_MAJOR_2017",
		17: "EVENT_ID_NEW_BLOOM_2017",
		18: "EVENT_ID_INTERNATIONAL_2017",
		19: "EVENT_ID_PLUS_SUBSCRIPTION",
		20: "EVENT_ID_SINGLES_DAY_2017",
		21: "EVENT_ID_FROSTIVUS_2017",
		22: "EVENT_ID_INTERNATIONAL_2018",
		23: "EVENT_ID_FROSTIVUS_2018",
		24: "EVENT_ID_NEW_BLOOM_2019",
		25: "EVENT_ID_INTERNATIONAL_2019",
		26: "EVENT_ID_NEW_PLAYER_EXPERIENCE",
		27: "EVENT_ID_FROSTIVUS_2019",
		28: "EVENT_ID_NEW_BLOOM_2020",
		29: "EVENT_ID_INTERNATIONAL_2020",
		30: "EVENT_ID_TEAM_FANDOM",
		31: "EVENT_ID_DIRETIDE_2020",
		32: "EVENT_ID_SPRING_2021",
		33: "EVENT_ID_FALL_2021",
		34: "EVENT_ID_TEAM_FANDOM_FALL_2021",
		35: "EVENT_ID_TEAM_2021_2022_TOUR2",
		36: "EVENT_ID_INTERNATIONAL_2022",
		37: "EVENT_ID_TEAM_2021_2022_TOUR3",
		38: "EVENT_ID_TEAM_INTERNATIONAL_2022",
		39: "EVENT_ID_PERMANENT_GRANTS",
		40: "EVENT_ID_MUERTA_RELEASE_SPRING2023",
		41: "EVENT_ID_TEAM_2023_TOUR1",
		42: "EVENT_ID_TEAM_2023_TOUR2",
		43: "EVENT_ID_TEAM_2023_TOUR3",
		45: "EVENT_ID_INTERNATIONAL_2023",
		46: "EVENT_ID_10TH_ANNIVERSARY",
		47: "EVENT_ID_CROWNFALL",
		48: "EVENT_ID_FROSTIVUS_2023",
		49: "EVENT_ID_INTERNATIONAL_2024",
		50: "EVENT_ID_FROSTIVUS_2024",
	}
	EEvent_value = map[string]int32{
		"EVENT_ID_NONE":                      0,
		"EVENT_ID_DIRETIDE":                  1,
		"EVENT_ID_SPRING_FESTIVAL":           2,
		"EVENT_ID_FROSTIVUS_2013":            3,
		"EVENT_ID_COMPENDIUM_2014":           4,
		"EVENT_ID_NEXON_PC_BANG":             5,
		"EVENT_ID_PWRD_DAC_2015":             6,
		"EVENT_ID_NEW_BLOOM_2015":            7,
		"EVENT_ID_INTERNATIONAL_2015":        8,
		"EVENT_ID_FALL_MAJOR_2015":           9,
		"EVENT_ID_ORACLE_PA":                 10,
		"EVENT_ID_NEW_BLOOM_2015_PREBEAST":   11,
		"EVENT_ID_FROSTIVUS":                 12,
		"EVENT_ID_WINTER_MAJOR_2016":         13,
		"EVENT_ID_INTERNATIONAL_2016":        14,
		"EVENT_ID_FALL_MAJOR_2016":           15,
		"EVENT_ID_WINTER_MAJOR_2017":         16,
		"EVENT_ID_NEW_BLOOM_2017":            17,
		"EVENT_ID_INTERNATIONAL_2017":        18,
		"EVENT_ID_PLUS_SUBSCRIPTION":         19,
		"EVENT_ID_SINGLES_DAY_2017":          20,
		"EVENT_ID_FROSTIVUS_2017":            21,
		"EVENT_ID_INTERNATIONAL_2018":        22,
		"EVENT_ID_FROSTIVUS_2018":            23,
		"EVENT_ID_NEW_BLOOM_2019":            24,
		"EVENT_ID_INTERNATIONAL_2019":        25,
		"EVENT_ID_NEW_PLAYER_EXPERIENCE":     26,
		"EVENT_ID_FROSTIVUS_2019":            27,
		"EVENT_ID_NEW_BLOOM_2020":            28,
		"EVENT_ID_INTERNATIONAL_2020":        29,
		"EVENT_ID_TEAM_FANDOM":               30,
		"EVENT_ID_DIRETIDE_2020":             31,
		"EVENT_ID_SPRING_2021":               32,
		"EVENT_ID_FALL_2021":                 33,
		"EVENT_ID_TEAM_FANDOM_FALL_2021":     34,
		"EVENT_ID_TEAM_2021_2022_TOUR2":      35,
		"EVENT_ID_INTERNATIONAL_2022":        36,
		"EVENT_ID_TEAM_2021_2022_TOUR3":      37,
		"EVENT_ID_TEAM_INTERNATIONAL_2022":   38,
		"EVENT_ID_PERMANENT_GRANTS":          39,
		"EVENT_ID_MUERTA_RELEASE_SPRING2023": 40,
		"EVENT_ID_TEAM_2023_TOUR1":           41,
		"EVENT_ID_TEAM_2023_TOUR2":           42,
		"EVENT_ID_TEAM_2023_TOUR3":           43,
		"EVENT_ID_INTERNATIONAL_2023":        45,
		"EVENT_ID_10TH_ANNIVERSARY":          46,
		"EVENT_ID_CROWNFALL":                 47,
		"EVENT_ID_FROSTIVUS_2023":            48,
		"EVENT_ID_INTERNATIONAL_2024":        49,
		"EVENT_ID_FROSTIVUS_2024":            50,
	}
)

func (x EEvent) Enum() *EEvent {
	p := new(EEvent)
	*p = x
	return p
}

func (x EEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[3].Descriptor()
}

func (EEvent) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[3]
}

func (x EEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEvent(num)
	return nil
}

// Deprecated: Use EEvent.Descriptor instead.
func (EEvent) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{3}
}

type ERankType int32

const (
	ERankType_k_ERankType_Invalid         ERankType = 0
	ERankType_k_ERankType_Casual          ERankType = 1
	ERankType_k_ERankType_Ranked          ERankType = 2
	ERankType_k_ERankType_CasualLegacy    ERankType = 3
	ERankType_k_ERankType_RankedLegacy    ERankType = 4
	ERankType_k_ERankType_CasualGlicko    ERankType = 5
	ERankType_k_ERankType_RankedGlicko    ERankType = 6
	ERankType_k_ERankType_RankMax         ERankType = 7
	ERankType_k_ERankType_BehaviorPrivate ERankType = 100
	ERankType_k_ERankType_BehaviorPublic  ERankType = 101
	ERankType_k_ERankType_Max             ERankType = 102
)

// Enum value maps for ERankType.
var (
	ERankType_name = map[int32]string{
		0:   "k_ERankType_Invalid",
		1:   "k_ERankType_Casual",
		2:   "k_ERankType_Ranked",
		3:   "k_ERankType_CasualLegacy",
		4:   "k_ERankType_RankedLegacy",
		5:   "k_ERankType_CasualGlicko",
		6:   "k_ERankType_RankedGlicko",
		7:   "k_ERankType_RankMax",
		100: "k_ERankType_BehaviorPrivate",
		101: "k_ERankType_BehaviorPublic",
		102: "k_ERankType_Max",
	}
	ERankType_value = map[string]int32{
		"k_ERankType_Invalid":         0,
		"k_ERankType_Casual":          1,
		"k_ERankType_Ranked":          2,
		"k_ERankType_CasualLegacy":    3,
		"k_ERankType_RankedLegacy":    4,
		"k_ERankType_CasualGlicko":    5,
		"k_ERankType_RankedGlicko":    6,
		"k_ERankType_RankMax":         7,
		"k_ERankType_BehaviorPrivate": 100,
		"k_ERankType_BehaviorPublic":  101,
		"k_ERankType_Max":             102,
	}
)

func (x ERankType) Enum() *ERankType {
	p := new(ERankType)
	*p = x
	return p
}

func (x ERankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERankType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[4].Descriptor()
}

func (ERankType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[4]
}

func (x ERankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERankType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERankType(num)
	return nil
}

// Deprecated: Use ERankType.Descriptor instead.
func (ERankType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{4}
}

type DOTALeaverStatusT int32

const (
	DOTALeaverStatusT_DOTA_LEAVER_NONE                     DOTALeaverStatusT = 0
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED             DOTALeaverStatusT = 1
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED_TOO_LONG    DOTALeaverStatusT = 2
	DOTALeaverStatusT_DOTA_LEAVER_ABANDONED                DOTALeaverStatusT = 3
	DOTALeaverStatusT_DOTA_LEAVER_AFK                      DOTALeaverStatusT = 4
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED          DOTALeaverStatusT = 5
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG DOTALeaverStatusT = 6
	DOTALeaverStatusT_DOTA_LEAVER_FAILED_TO_READY_UP       DOTALeaverStatusT = 7
	DOTALeaverStatusT_DOTA_LEAVER_DECLINED                 DOTALeaverStatusT = 8
	DOTALeaverStatusT_DOTA_LEAVER_DECLINED_REQUEUE         DOTALeaverStatusT = 9
)

// Enum value maps for DOTALeaverStatusT.
var (
	DOTALeaverStatusT_name = map[int32]string{
		0: "DOTA_LEAVER_NONE",
		1: "DOTA_LEAVER_DISCONNECTED",
		2: "DOTA_LEAVER_DISCONNECTED_TOO_LONG",
		3: "DOTA_LEAVER_ABANDONED",
		4: "DOTA_LEAVER_AFK",
		5: "DOTA_LEAVER_NEVER_CONNECTED",
		6: "DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG",
		7: "DOTA_LEAVER_FAILED_TO_READY_UP",
		8: "DOTA_LEAVER_DECLINED",
		9: "DOTA_LEAVER_DECLINED_REQUEUE",
	}
	DOTALeaverStatusT_value = map[string]int32{
		"DOTA_LEAVER_NONE":                     0,
		"DOTA_LEAVER_DISCONNECTED":             1,
		"DOTA_LEAVER_DISCONNECTED_TOO_LONG":    2,
		"DOTA_LEAVER_ABANDONED":                3,
		"DOTA_LEAVER_AFK":                      4,
		"DOTA_LEAVER_NEVER_CONNECTED":          5,
		"DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG": 6,
		"DOTA_LEAVER_FAILED_TO_READY_UP":       7,
		"DOTA_LEAVER_DECLINED":                 8,
		"DOTA_LEAVER_DECLINED_REQUEUE":         9,
	}
)

func (x DOTALeaverStatusT) Enum() *DOTALeaverStatusT {
	p := new(DOTALeaverStatusT)
	*p = x
	return p
}

func (x DOTALeaverStatusT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTALeaverStatusT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[5].Descriptor()
}

func (DOTALeaverStatusT) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[5]
}

func (x DOTALeaverStatusT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTALeaverStatusT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTALeaverStatusT(num)
	return nil
}

// Deprecated: Use DOTALeaverStatusT.Descriptor instead.
func (DOTALeaverStatusT) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{5}
}

type DOTAConnectionStateT int32

const (
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_UNKNOWN           DOTAConnectionStateT = 0
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_NOT_YET_CONNECTED DOTAConnectionStateT = 1
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_CONNECTED         DOTAConnectionStateT = 2
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_DISCONNECTED      DOTAConnectionStateT = 3
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_ABANDONED         DOTAConnectionStateT = 4
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_LOADING           DOTAConnectionStateT = 5
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_FAILED            DOTAConnectionStateT = 6
)

// Enum value maps for DOTAConnectionStateT.
var (
	DOTAConnectionStateT_name = map[int32]string{
		0: "DOTA_CONNECTION_STATE_UNKNOWN",
		1: "DOTA_CONNECTION_STATE_NOT_YET_CONNECTED",
		2: "DOTA_CONNECTION_STATE_CONNECTED",
		3: "DOTA_CONNECTION_STATE_DISCONNECTED",
		4: "DOTA_CONNECTION_STATE_ABANDONED",
		5: "DOTA_CONNECTION_STATE_LOADING",
		6: "DOTA_CONNECTION_STATE_FAILED",
	}
	DOTAConnectionStateT_value = map[string]int32{
		"DOTA_CONNECTION_STATE_UNKNOWN":           0,
		"DOTA_CONNECTION_STATE_NOT_YET_CONNECTED": 1,
		"DOTA_CONNECTION_STATE_CONNECTED":         2,
		"DOTA_CONNECTION_STATE_DISCONNECTED":      3,
		"DOTA_CONNECTION_STATE_ABANDONED":         4,
		"DOTA_CONNECTION_STATE_LOADING":           5,
		"DOTA_CONNECTION_STATE_FAILED":            6,
	}
)

func (x DOTAConnectionStateT) Enum() *DOTAConnectionStateT {
	p := new(DOTAConnectionStateT)
	*p = x
	return p
}

func (x DOTAConnectionStateT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTAConnectionStateT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[6].Descriptor()
}

func (DOTAConnectionStateT) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[6]
}

func (x DOTAConnectionStateT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTAConnectionStateT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTAConnectionStateT(num)
	return nil
}

// Deprecated: Use DOTAConnectionStateT.Descriptor instead.
func (DOTAConnectionStateT) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{6}
}

type Fantasy_Roles int32

const (
	Fantasy_Roles_FANTASY_ROLE_UNDEFINED Fantasy_Roles = 0
	Fantasy_Roles_FANTASY_ROLE_CORE      Fantasy_Roles = 1
	Fantasy_Roles_FANTASY_ROLE_SUPPORT   Fantasy_Roles = 2
	Fantasy_Roles_FANTASY_ROLE_OFFLANE   Fantasy_Roles = 3
	Fantasy_Roles_FANTASY_ROLE_MID       Fantasy_Roles = 4
)

// Enum value maps for Fantasy_Roles.
var (
	Fantasy_Roles_name = map[int32]string{
		0: "FANTASY_ROLE_UNDEFINED",
		1: "FANTASY_ROLE_CORE",
		2: "FANTASY_ROLE_SUPPORT",
		3: "FANTASY_ROLE_OFFLANE",
		4: "FANTASY_ROLE_MID",
	}
	Fantasy_Roles_value = map[string]int32{
		"FANTASY_ROLE_UNDEFINED": 0,
		"FANTASY_ROLE_CORE":      1,
		"FANTASY_ROLE_SUPPORT":   2,
		"FANTASY_ROLE_OFFLANE":   3,
		"FANTASY_ROLE_MID":       4,
	}
)

func (x Fantasy_Roles) Enum() *Fantasy_Roles {
	p := new(Fantasy_Roles)
	*p = x
	return p
}

func (x Fantasy_Roles) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fantasy_Roles) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[7].Descriptor()
}

func (Fantasy_Roles) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[7]
}

func (x Fantasy_Roles) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Fantasy_Roles) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Fantasy_Roles(num)
	return nil
}

// Deprecated: Use Fantasy_Roles.Descriptor instead.
func (Fantasy_Roles) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{7}
}

type Fantasy_Scoring int32

const (
	Fantasy_Scoring_FANTASY_SCORING_KILLS                   Fantasy_Scoring = 0
	Fantasy_Scoring_FANTASY_SCORING_DEATHS                  Fantasy_Scoring = 1
	Fantasy_Scoring_FANTASY_SCORING_CS                      Fantasy_Scoring = 2
	Fantasy_Scoring_FANTASY_SCORING_GPM                     Fantasy_Scoring = 3
	Fantasy_Scoring_FANTASY_SCORING_TOWER_KILLS             Fantasy_Scoring = 4
	Fantasy_Scoring_FANTASY_SCORING_ROSHAN_KILLS            Fantasy_Scoring = 5
	Fantasy_Scoring_FANTASY_SCORING_TEAMFIGHT_PARTICIPATION Fantasy_Scoring = 6
	Fantasy_Scoring_FANTASY_SCORING_WARDS_PLANTED           Fantasy_Scoring = 7
	Fantasy_Scoring_FANTASY_SCORING_CAMPS_STACKED           Fantasy_Scoring = 8
	Fantasy_Scoring_FANTASY_SCORING_RUNES_GRABBED           Fantasy_Scoring = 9
	Fantasy_Scoring_FANTASY_SCORING_FIRST_BLOOD             Fantasy_Scoring = 10
	Fantasy_Scoring_FANTASY_SCORING_STUNS                   Fantasy_Scoring = 11
	Fantasy_Scoring_FANTASY_SCORING_SMOKES_USED             Fantasy_Scoring = 12
	Fantasy_Scoring_FANTASY_SCORING_NEUTRAL_TOKENS_FOUND    Fantasy_Scoring = 13
	Fantasy_Scoring_FANTASY_SCORING_WATCHERS_TAKEN          Fantasy_Scoring = 14
	Fantasy_Scoring_FANTASY_SCORING_LOTUSES_GAINED          Fantasy_Scoring = 15
	Fantasy_Scoring_FANTASY_SCORING_TORMENTOR_KILLS         Fantasy_Scoring = 16
	Fantasy_Scoring_FANTASY_SCORING_COURIER_KILLS           Fantasy_Scoring = 17
	Fantasy_Scoring_FANTASY_SCORING_TYPES                   Fantasy_Scoring = 18
	Fantasy_Scoring_FANTASY_SCORING_INVALID                 Fantasy_Scoring = 19
)

// Enum value maps for Fantasy_Scoring.
var (
	Fantasy_Scoring_name = map[int32]string{
		0:  "FANTASY_SCORING_KILLS",
		1:  "FANTASY_SCORING_DEATHS",
		2:  "FANTASY_SCORING_CS",
		3:  "FANTASY_SCORING_GPM",
		4:  "FANTASY_SCORING_TOWER_KILLS",
		5:  "FANTASY_SCORING_ROSHAN_KILLS",
		6:  "FANTASY_SCORING_TEAMFIGHT_PARTICIPATION",
		7:  "FANTASY_SCORING_WARDS_PLANTED",
		8:  "FANTASY_SCORING_CAMPS_STACKED",
		9:  "FANTASY_SCORING_RUNES_GRABBED",
		10: "FANTASY_SCORING_FIRST_BLOOD",
		11: "FANTASY_SCORING_STUNS",
		12: "FANTASY_SCORING_SMOKES_USED",
		13: "FANTASY_SCORING_NEUTRAL_TOKENS_FOUND",
		14: "FANTASY_SCORING_WATCHERS_TAKEN",
		15: "FANTASY_SCORING_LOTUSES_GAINED",
		16: "FANTASY_SCORING_TORMENTOR_KILLS",
		17: "FANTASY_SCORING_COURIER_KILLS",
		18: "FANTASY_SCORING_TYPES",
		19: "FANTASY_SCORING_INVALID",
	}
	Fantasy_Scoring_value = map[string]int32{
		"FANTASY_SCORING_KILLS":                   0,
		"FANTASY_SCORING_DEATHS":                  1,
		"FANTASY_SCORING_CS":                      2,
		"FANTASY_SCORING_GPM":                     3,
		"FANTASY_SCORING_TOWER_KILLS":             4,
		"FANTASY_SCORING_ROSHAN_KILLS":            5,
		"FANTASY_SCORING_TEAMFIGHT_PARTICIPATION": 6,
		"FANTASY_SCORING_WARDS_PLANTED":           7,
		"FANTASY_SCORING_CAMPS_STACKED":           8,
		"FANTASY_SCORING_RUNES_GRABBED":           9,
		"FANTASY_SCORING_FIRST_BLOOD":             10,
		"FANTASY_SCORING_STUNS":                   11,
		"FANTASY_SCORING_SMOKES_USED":             12,
		"FANTASY_SCORING_NEUTRAL_TOKENS_FOUND":    13,
		"FANTASY_SCORING_WATCHERS_TAKEN":          14,
		"FANTASY_SCORING_LOTUSES_GAINED":          15,
		"FANTASY_SCORING_TORMENTOR_KILLS":         16,
		"FANTASY_SCORING_COURIER_KILLS":           17,
		"FANTASY_SCORING_TYPES":                   18,
		"FANTASY_SCORING_INVALID":                 19,
	}
)

func (x Fantasy_Scoring) Enum() *Fantasy_Scoring {
	p := new(Fantasy_Scoring)
	*p = x
	return p
}

func (x Fantasy_Scoring) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fantasy_Scoring) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[8].Descriptor()
}

func (Fantasy_Scoring) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[8]
}

func (x Fantasy_Scoring) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Fantasy_Scoring) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Fantasy_Scoring(num)
	return nil
}

// Deprecated: Use Fantasy_Scoring.Descriptor instead.
func (Fantasy_Scoring) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{8}
}

type Fantasy_Team_Slots int32

const (
	Fantasy_Team_Slots_FANTASY_SLOT_NONE    Fantasy_Team_Slots = 0
	Fantasy_Team_Slots_FANTASY_SLOT_CORE    Fantasy_Team_Slots = 1
	Fantasy_Team_Slots_FANTASY_SLOT_SUPPORT Fantasy_Team_Slots = 2
	Fantasy_Team_Slots_FANTASY_SLOT_ANY     Fantasy_Team_Slots = 3
	Fantasy_Team_Slots_FANTASY_SLOT_BENCH   Fantasy_Team_Slots = 4
)

// Enum value maps for Fantasy_Team_Slots.
var (
	Fantasy_Team_Slots_name = map[int32]string{
		0: "FANTASY_SLOT_NONE",
		1: "FANTASY_SLOT_CORE",
		2: "FANTASY_SLOT_SUPPORT",
		3: "FANTASY_SLOT_ANY",
		4: "FANTASY_SLOT_BENCH",
	}
	Fantasy_Team_Slots_value = map[string]int32{
		"FANTASY_SLOT_NONE":    0,
		"FANTASY_SLOT_CORE":    1,
		"FANTASY_SLOT_SUPPORT": 2,
		"FANTASY_SLOT_ANY":     3,
		"FANTASY_SLOT_BENCH":   4,
	}
)

func (x Fantasy_Team_Slots) Enum() *Fantasy_Team_Slots {
	p := new(Fantasy_Team_Slots)
	*p = x
	return p
}

func (x Fantasy_Team_Slots) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fantasy_Team_Slots) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[9].Descriptor()
}

func (Fantasy_Team_Slots) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[9]
}

func (x Fantasy_Team_Slots) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Fantasy_Team_Slots) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Fantasy_Team_Slots(num)
	return nil
}

// Deprecated: Use Fantasy_Team_Slots.Descriptor instead.
func (Fantasy_Team_Slots) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{9}
}

type Fantasy_Selection_Mode int32

const (
	Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID        Fantasy_Selection_Mode = 0
	Fantasy_Selection_Mode_FANTASY_SELECTION_LOCKED         Fantasy_Selection_Mode = 1
	Fantasy_Selection_Mode_FANTASY_SELECTION_SHUFFLE        Fantasy_Selection_Mode = 2
	Fantasy_Selection_Mode_FANTASY_SELECTION_FREE_PICK      Fantasy_Selection_Mode = 3
	Fantasy_Selection_Mode_FANTASY_SELECTION_ENDED          Fantasy_Selection_Mode = 4
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_SEASON     Fantasy_Selection_Mode = 5
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_DRAFT      Fantasy_Selection_Mode = 6
	Fantasy_Selection_Mode_FANTASY_SELECTION_DRAFTING       Fantasy_Selection_Mode = 7
	Fantasy_Selection_Mode_FANTASY_SELECTION_REGULAR_SEASON Fantasy_Selection_Mode = 8
	Fantasy_Selection_Mode_FANTASY_SELECTION_CARD_BASED     Fantasy_Selection_Mode = 9
)

// Enum value maps for Fantasy_Selection_Mode.
var (
	Fantasy_Selection_Mode_name = map[int32]string{
		0: "FANTASY_SELECTION_INVALID",
		1: "FANTASY_SELECTION_LOCKED",
		2: "FANTASY_SELECTION_SHUFFLE",
		3: "FANTASY_SELECTION_FREE_PICK",
		4: "FANTASY_SELECTION_ENDED",
		5: "FANTASY_SELECTION_PRE_SEASON",
		6: "FANTASY_SELECTION_PRE_DRAFT",
		7: "FANTASY_SELECTION_DRAFTING",
		8: "FANTASY_SELECTION_REGULAR_SEASON",
		9: "FANTASY_SELECTION_CARD_BASED",
	}
	Fantasy_Selection_Mode_value = map[string]int32{
		"FANTASY_SELECTION_INVALID":        0,
		"FANTASY_SELECTION_LOCKED":         1,
		"FANTASY_SELECTION_SHUFFLE":        2,
		"FANTASY_SELECTION_FREE_PICK":      3,
		"FANTASY_SELECTION_ENDED":          4,
		"FANTASY_SELECTION_PRE_SEASON":     5,
		"FANTASY_SELECTION_PRE_DRAFT":      6,
		"FANTASY_SELECTION_DRAFTING":       7,
		"FANTASY_SELECTION_REGULAR_SEASON": 8,
		"FANTASY_SELECTION_CARD_BASED":     9,
	}
)

func (x Fantasy_Selection_Mode) Enum() *Fantasy_Selection_Mode {
	p := new(Fantasy_Selection_Mode)
	*p = x
	return p
}

func (x Fantasy_Selection_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fantasy_Selection_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[10].Descriptor()
}

func (Fantasy_Selection_Mode) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[10]
}

func (x Fantasy_Selection_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Fantasy_Selection_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Fantasy_Selection_Mode(num)
	return nil
}

// Deprecated: Use Fantasy_Selection_Mode.Descriptor instead.
func (Fantasy_Selection_Mode) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{10}
}

type Fantasy_Gem_Type int32

const (
	Fantasy_Gem_Type_FANTASY_GEM_TYPE_RUBY     Fantasy_Gem_Type = 0
	Fantasy_Gem_Type_FANTASY_GEM_TYPE_SAPPHIRE Fantasy_Gem_Type = 1
	Fantasy_Gem_Type_FANTASY_GEM_TYPE_EMERALD  Fantasy_Gem_Type = 2
)

// Enum value maps for Fantasy_Gem_Type.
var (
	Fantasy_Gem_Type_name = map[int32]string{
		0: "FANTASY_GEM_TYPE_RUBY",
		1: "FANTASY_GEM_TYPE_SAPPHIRE",
		2: "FANTASY_GEM_TYPE_EMERALD",
	}
	Fantasy_Gem_Type_value = map[string]int32{
		"FANTASY_GEM_TYPE_RUBY":     0,
		"FANTASY_GEM_TYPE_SAPPHIRE": 1,
		"FANTASY_GEM_TYPE_EMERALD":  2,
	}
)

func (x Fantasy_Gem_Type) Enum() *Fantasy_Gem_Type {
	p := new(Fantasy_Gem_Type)
	*p = x
	return p
}

func (x Fantasy_Gem_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fantasy_Gem_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[11].Descriptor()
}

func (Fantasy_Gem_Type) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[11]
}

func (x Fantasy_Gem_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Fantasy_Gem_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Fantasy_Gem_Type(num)
	return nil
}

// Deprecated: Use Fantasy_Gem_Type.Descriptor instead.
func (Fantasy_Gem_Type) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{11}
}

type DOTAChatChannelTypeT int32

const (
	DOTAChatChannelTypeT_DOTAChannelType_Regional        DOTAChatChannelTypeT = 0
	DOTAChatChannelTypeT_DOTAChannelType_Custom          DOTAChatChannelTypeT = 1
	DOTAChatChannelTypeT_DOTAChannelType_Party           DOTAChatChannelTypeT = 2
	DOTAChatChannelTypeT_DOTAChannelType_Lobby           DOTAChatChannelTypeT = 3
	DOTAChatChannelTypeT_DOTAChannelType_Team            DOTAChatChannelTypeT = 4
	DOTAChatChannelTypeT_DOTAChannelType_Guild           DOTAChatChannelTypeT = 5
	DOTAChatChannelTypeT_DOTAChannelType_Fantasy         DOTAChatChannelTypeT = 6
	DOTAChatChannelTypeT_DOTAChannelType_Whisper         DOTAChatChannelTypeT = 7
	DOTAChatChannelTypeT_DOTAChannelType_Console         DOTAChatChannelTypeT = 8
	DOTAChatChannelTypeT_DOTAChannelType_Tab             DOTAChatChannelTypeT = 9
	DOTAChatChannelTypeT_DOTAChannelType_Invalid         DOTAChatChannelTypeT = 10
	DOTAChatChannelTypeT_DOTAChannelType_GameAll         DOTAChatChannelTypeT = 11
	DOTAChatChannelTypeT_DOTAChannelType_GameAllies      DOTAChatChannelTypeT = 12
	DOTAChatChannelTypeT_DOTAChannelType_GameSpectator   DOTAChatChannelTypeT = 13
	DOTAChatChannelTypeT_DOTAChannelType_GameCoaching    DOTAChatChannelTypeT = 14
	DOTAChatChannelTypeT_DOTAChannelType_Cafe            DOTAChatChannelTypeT = 15
	DOTAChatChannelTypeT_DOTAChannelType_CustomGame      DOTAChatChannelTypeT = 16
	DOTAChatChannelTypeT_DOTAChannelType_Private         DOTAChatChannelTypeT = 17
	DOTAChatChannelTypeT_DOTAChannelType_PostGame        DOTAChatChannelTypeT = 18
	DOTAChatChannelTypeT_DOTAChannelType_BattleCup       DOTAChatChannelTypeT = 19
	DOTAChatChannelTypeT_DOTAChannelType_HLTVSpectator   DOTAChatChannelTypeT = 20
	DOTAChatChannelTypeT_DOTAChannelType_GameEvents      DOTAChatChannelTypeT = 21
	DOTAChatChannelTypeT_DOTAChannelType_Trivia          DOTAChatChannelTypeT = 22
	DOTAChatChannelTypeT_DOTAChannelType_NewPlayer       DOTAChatChannelTypeT = 23
	DOTAChatChannelTypeT_DOTAChannelType_PrivateCoaching DOTAChatChannelTypeT = 24
)

// Enum value maps for DOTAChatChannelTypeT.
var (
	DOTAChatChannelTypeT_name = map[int32]string{
		0:  "DOTAChannelType_Regional",
		1:  "DOTAChannelType_Custom",
		2:  "DOTAChannelType_Party",
		3:  "DOTAChannelType_Lobby",
		4:  "DOTAChannelType_Team",
		5:  "DOTAChannelType_Guild",
		6:  "DOTAChannelType_Fantasy",
		7:  "DOTAChannelType_Whisper",
		8:  "DOTAChannelType_Console",
		9:  "DOTAChannelType_Tab",
		10: "DOTAChannelType_Invalid",
		11: "DOTAChannelType_GameAll",
		12: "DOTAChannelType_GameAllies",
		13: "DOTAChannelType_GameSpectator",
		14: "DOTAChannelType_GameCoaching",
		15: "DOTAChannelType_Cafe",
		16: "DOTAChannelType_CustomGame",
		17: "DOTAChannelType_Private",
		18: "DOTAChannelType_PostGame",
		19: "DOTAChannelType_BattleCup",
		20: "DOTAChannelType_HLTVSpectator",
		21: "DOTAChannelType_GameEvents",
		22: "DOTAChannelType_Trivia",
		23: "DOTAChannelType_NewPlayer",
		24: "DOTAChannelType_PrivateCoaching",
	}
	DOTAChatChannelTypeT_value = map[string]int32{
		"DOTAChannelType_Regional":        0,
		"DOTAChannelType_Custom":          1,
		"DOTAChannelType_Party":           2,
		"DOTAChannelType_Lobby":           3,
		"DOTAChannelType_Team":            4,
		"DOTAChannelType_Guild":           5,
		"DOTAChannelType_Fantasy":         6,
		"DOTAChannelType_Whisper":         7,
		"DOTAChannelType_Console":         8,
		"DOTAChannelType_Tab":             9,
		"DOTAChannelType_Invalid":         10,
		"DOTAChannelType_GameAll":         11,
		"DOTAChannelType_GameAllies":      12,
		"DOTAChannelType_GameSpectator":   13,
		"DOTAChannelType_GameCoaching":    14,
		"DOTAChannelType_Cafe":            15,
		"DOTAChannelType_CustomGame":      16,
		"DOTAChannelType_Private":         17,
		"DOTAChannelType_PostGame":        18,
		"DOTAChannelType_BattleCup":       19,
		"DOTAChannelType_HLTVSpectator":   20,
		"DOTAChannelType_GameEvents":      21,
		"DOTAChannelType_Trivia":          22,
		"DOTAChannelType_NewPlayer":       23,
		"DOTAChannelType_PrivateCoaching": 24,
	}
)

func (x DOTAChatChannelTypeT) Enum() *DOTAChatChannelTypeT {
	p := new(DOTAChatChannelTypeT)
	*p = x
	return p
}

func (x DOTAChatChannelTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTAChatChannelTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[12].Descriptor()
}

func (DOTAChatChannelTypeT) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[12]
}

func (x DOTAChatChannelTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTAChatChannelTypeT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTAChatChannelTypeT(num)
	return nil
}

// Deprecated: Use DOTAChatChannelTypeT.Descriptor instead.
func (DOTAChatChannelTypeT) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{12}
}

type EChatSpecialPrivileges int32

const (
	EChatSpecialPrivileges_k_EChatSpecialPrivileges_None           EChatSpecialPrivileges = 0
	EChatSpecialPrivileges_k_EChatSpecialPrivileges_Moderator      EChatSpecialPrivileges = 1
	EChatSpecialPrivileges_k_EChatSpecialPrivileges_SuperModerator EChatSpecialPrivileges = 2
)

// Enum value maps for EChatSpecialPrivileges.
var (
	EChatSpecialPrivileges_name = map[int32]string{
		0: "k_EChatSpecialPrivileges_None",
		1: "k_EChatSpecialPrivileges_Moderator",
		2: "k_EChatSpecialPrivileges_SuperModerator",
	}
	EChatSpecialPrivileges_value = map[string]int32{
		"k_EChatSpecialPrivileges_None":           0,
		"k_EChatSpecialPrivileges_Moderator":      1,
		"k_EChatSpecialPrivileges_SuperModerator": 2,
	}
)

func (x EChatSpecialPrivileges) Enum() *EChatSpecialPrivileges {
	p := new(EChatSpecialPrivileges)
	*p = x
	return p
}

func (x EChatSpecialPrivileges) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChatSpecialPrivileges) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[13].Descriptor()
}

func (EChatSpecialPrivileges) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[13]
}

func (x EChatSpecialPrivileges) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChatSpecialPrivileges) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChatSpecialPrivileges(num)
	return nil
}

// Deprecated: Use EChatSpecialPrivileges.Descriptor instead.
func (EChatSpecialPrivileges) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{13}
}

type DOTACommTypeT int32

const (
	DOTACommTypeT_DOTA_COMM_TYPE_NONE             DOTACommTypeT = 0
	DOTACommTypeT_DOTA_COMM_TYPE_PING             DOTACommTypeT = 1
	DOTACommTypeT_DOTA_COMM_TYPE_CHATWHEEL        DOTACommTypeT = 2
	DOTACommTypeT_DOTA_COMM_TYPE_TIP              DOTACommTypeT = 3
	DOTACommTypeT_DOTA_COMM_TYPE_TEXT             DOTACommTypeT = 4
	DOTACommTypeT_DOTA_COMM_TYPE_SHOWCASE         DOTACommTypeT = 5
	DOTACommTypeT_DOTA_COMM_TYPE_VOICE            DOTACommTypeT = 6
	DOTACommTypeT_DOTA_COMM_TYPE_ALLY_ABILITY     DOTACommTypeT = 7
	DOTACommTypeT_DOTA_COMM_TYPE_PAUSE            DOTACommTypeT = 8
	DOTACommTypeT_DOTA_COMM_TYPE_COACHING         DOTACommTypeT = 9
	DOTACommTypeT_DOTA_COMM_TYPE_NOCOOLDOWN       DOTACommTypeT = 10
	DOTACommTypeT_DOTA_COMM_TYPE_RANKEDMATCHMAKE  DOTACommTypeT = 11
	DOTACommTypeT_DOTA_COMM_TYPE_DROPS            DOTACommTypeT = 12
	DOTACommTypeT_DOTA_COMM_TYPE_NEWPLAYER_EXPERT DOTACommTypeT = 13
	DOTACommTypeT_DOTA_COMM_TYPE_COACHED          DOTACommTypeT = 14
	DOTACommTypeT_DOTA_COMM_TYPE_MAPDRAWING       DOTACommTypeT = 15
)

// Enum value maps for DOTACommTypeT.
var (
	DOTACommTypeT_name = map[int32]string{
		0:  "DOTA_COMM_TYPE_NONE",
		1:  "DOTA_COMM_TYPE_PING",
		2:  "DOTA_COMM_TYPE_CHATWHEEL",
		3:  "DOTA_COMM_TYPE_TIP",
		4:  "DOTA_COMM_TYPE_TEXT",
		5:  "DOTA_COMM_TYPE_SHOWCASE",
		6:  "DOTA_COMM_TYPE_VOICE",
		7:  "DOTA_COMM_TYPE_ALLY_ABILITY",
		8:  "DOTA_COMM_TYPE_PAUSE",
		9:  "DOTA_COMM_TYPE_COACHING",
		10: "DOTA_COMM_TYPE_NOCOOLDOWN",
		11: "DOTA_COMM_TYPE_RANKEDMATCHMAKE",
		12: "DOTA_COMM_TYPE_DROPS",
		13: "DOTA_COMM_TYPE_NEWPLAYER_EXPERT",
		14: "DOTA_COMM_TYPE_COACHED",
		15: "DOTA_COMM_TYPE_MAPDRAWING",
	}
	DOTACommTypeT_value = map[string]int32{
		"DOTA_COMM_TYPE_NONE":             0,
		"DOTA_COMM_TYPE_PING":             1,
		"DOTA_COMM_TYPE_CHATWHEEL":        2,
		"DOTA_COMM_TYPE_TIP":              3,
		"DOTA_COMM_TYPE_TEXT":             4,
		"DOTA_COMM_TYPE_SHOWCASE":         5,
		"DOTA_COMM_TYPE_VOICE":            6,
		"DOTA_COMM_TYPE_ALLY_ABILITY":     7,
		"DOTA_COMM_TYPE_PAUSE":            8,
		"DOTA_COMM_TYPE_COACHING":         9,
		"DOTA_COMM_TYPE_NOCOOLDOWN":       10,
		"DOTA_COMM_TYPE_RANKEDMATCHMAKE":  11,
		"DOTA_COMM_TYPE_DROPS":            12,
		"DOTA_COMM_TYPE_NEWPLAYER_EXPERT": 13,
		"DOTA_COMM_TYPE_COACHED":          14,
		"DOTA_COMM_TYPE_MAPDRAWING":       15,
	}
)

func (x DOTACommTypeT) Enum() *DOTACommTypeT {
	p := new(DOTACommTypeT)
	*p = x
	return p
}

func (x DOTACommTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTACommTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[14].Descriptor()
}

func (DOTACommTypeT) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[14]
}

func (x DOTACommTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTACommTypeT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTACommTypeT(num)
	return nil
}

// Deprecated: Use DOTACommTypeT.Descriptor instead.
func (DOTACommTypeT) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{14}
}

type DOTACommLevelT int32

const (
	DOTACommLevelT_DOTA_COMM_LEVEL_NONE           DOTACommLevelT = 0
	DOTACommLevelT_DOTA_COMM_LEVEL_COOLDOWN       DOTACommLevelT = 1
	DOTACommLevelT_DOTA_COMM_LEVEL_PINGS          DOTACommLevelT = 2
	DOTACommLevelT_DOTA_COMM_LEVEL_MAPDRAWING     DOTACommLevelT = 3
	DOTACommLevelT_DOTA_COMM_LEVEL_CHAT           DOTACommLevelT = 4
	DOTACommLevelT_DOTA_COMM_LEVEL_TIPPING        DOTACommLevelT = 5
	DOTACommLevelT_DOTA_COMM_LEVEL_VOICE          DOTACommLevelT = 6
	DOTACommLevelT_DOTA_COMM_LEVEL_ALLIED_ABILITY DOTACommLevelT = 7
)

// Enum value maps for DOTACommLevelT.
var (
	DOTACommLevelT_name = map[int32]string{
		0: "DOTA_COMM_LEVEL_NONE",
		1: "DOTA_COMM_LEVEL_COOLDOWN",
		2: "DOTA_COMM_LEVEL_PINGS",
		3: "DOTA_COMM_LEVEL_MAPDRAWING",
		4: "DOTA_COMM_LEVEL_CHAT",
		5: "DOTA_COMM_LEVEL_TIPPING",
		6: "DOTA_COMM_LEVEL_VOICE",
		7: "DOTA_COMM_LEVEL_ALLIED_ABILITY",
	}
	DOTACommLevelT_value = map[string]int32{
		"DOTA_COMM_LEVEL_NONE":           0,
		"DOTA_COMM_LEVEL_COOLDOWN":       1,
		"DOTA_COMM_LEVEL_PINGS":          2,
		"DOTA_COMM_LEVEL_MAPDRAWING":     3,
		"DOTA_COMM_LEVEL_CHAT":           4,
		"DOTA_COMM_LEVEL_TIPPING":        5,
		"DOTA_COMM_LEVEL_VOICE":          6,
		"DOTA_COMM_LEVEL_ALLIED_ABILITY": 7,
	}
)

func (x DOTACommLevelT) Enum() *DOTACommLevelT {
	p := new(DOTACommLevelT)
	*p = x
	return p
}

func (x DOTACommLevelT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTACommLevelT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[15].Descriptor()
}

func (DOTACommLevelT) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[15]
}

func (x DOTACommLevelT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTACommLevelT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTACommLevelT(num)
	return nil
}

// Deprecated: Use DOTACommLevelT.Descriptor instead.
func (DOTACommLevelT) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{15}
}

type DOTABehaviorLevelT int32

const (
	DOTABehaviorLevelT_DOTA_BEHAVIOR_LEVEL_NONE           DOTABehaviorLevelT = 0
	DOTABehaviorLevelT_DOTA_BEHAVIOR_LEVEL_RANKED_ALLOWED DOTABehaviorLevelT = 1
	DOTABehaviorLevelT_DOTA_BEHAVIOR_LEVEL_PAUSING        DOTABehaviorLevelT = 2
	DOTABehaviorLevelT_DOTA_BEHAVIOR_LEVEL_DROPS          DOTABehaviorLevelT = 3
	DOTABehaviorLevelT_DOTA_BEHAVIOR_LEVEL_COACHING       DOTABehaviorLevelT = 4
)

// Enum value maps for DOTABehaviorLevelT.
var (
	DOTABehaviorLevelT_name = map[int32]string{
		0: "DOTA_BEHAVIOR_LEVEL_NONE",
		1: "DOTA_BEHAVIOR_LEVEL_RANKED_ALLOWED",
		2: "DOTA_BEHAVIOR_LEVEL_PAUSING",
		3: "DOTA_BEHAVIOR_LEVEL_DROPS",
		4: "DOTA_BEHAVIOR_LEVEL_COACHING",
	}
	DOTABehaviorLevelT_value = map[string]int32{
		"DOTA_BEHAVIOR_LEVEL_NONE":           0,
		"DOTA_BEHAVIOR_LEVEL_RANKED_ALLOWED": 1,
		"DOTA_BEHAVIOR_LEVEL_PAUSING":        2,
		"DOTA_BEHAVIOR_LEVEL_DROPS":          3,
		"DOTA_BEHAVIOR_LEVEL_COACHING":       4,
	}
)

func (x DOTABehaviorLevelT) Enum() *DOTABehaviorLevelT {
	p := new(DOTABehaviorLevelT)
	*p = x
	return p
}

func (x DOTABehaviorLevelT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTABehaviorLevelT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[16].Descriptor()
}

func (DOTABehaviorLevelT) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[16]
}

func (x DOTABehaviorLevelT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTABehaviorLevelT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTABehaviorLevelT(num)
	return nil
}

// Deprecated: Use DOTABehaviorLevelT.Descriptor instead.
func (DOTABehaviorLevelT) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{16}
}

type EProfileCardSlotType int32

const (
	EProfileCardSlotType_k_EProfileCardSlotType_Empty    EProfileCardSlotType = 0
	EProfileCardSlotType_k_EProfileCardSlotType_Stat     EProfileCardSlotType = 1
	EProfileCardSlotType_k_EProfileCardSlotType_Trophy   EProfileCardSlotType = 2
	EProfileCardSlotType_k_EProfileCardSlotType_Item     EProfileCardSlotType = 3
	EProfileCardSlotType_k_EProfileCardSlotType_Hero     EProfileCardSlotType = 4
	EProfileCardSlotType_k_EProfileCardSlotType_Emoticon EProfileCardSlotType = 5
	EProfileCardSlotType_k_EProfileCardSlotType_Team     EProfileCardSlotType = 6
)

// Enum value maps for EProfileCardSlotType.
var (
	EProfileCardSlotType_name = map[int32]string{
		0: "k_EProfileCardSlotType_Empty",
		1: "k_EProfileCardSlotType_Stat",
		2: "k_EProfileCardSlotType_Trophy",
		3: "k_EProfileCardSlotType_Item",
		4: "k_EProfileCardSlotType_Hero",
		5: "k_EProfileCardSlotType_Emoticon",
		6: "k_EProfileCardSlotType_Team",
	}
	EProfileCardSlotType_value = map[string]int32{
		"k_EProfileCardSlotType_Empty":    0,
		"k_EProfileCardSlotType_Stat":     1,
		"k_EProfileCardSlotType_Trophy":   2,
		"k_EProfileCardSlotType_Item":     3,
		"k_EProfileCardSlotType_Hero":     4,
		"k_EProfileCardSlotType_Emoticon": 5,
		"k_EProfileCardSlotType_Team":     6,
	}
)

func (x EProfileCardSlotType) Enum() *EProfileCardSlotType {
	p := new(EProfileCardSlotType)
	*p = x
	return p
}

func (x EProfileCardSlotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProfileCardSlotType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[17].Descriptor()
}

func (EProfileCardSlotType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[17]
}

func (x EProfileCardSlotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProfileCardSlotType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProfileCardSlotType(num)
	return nil
}

// Deprecated: Use EProfileCardSlotType.Descriptor instead.
func (EProfileCardSlotType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{17}
}

type EMatchGroupServerStatus int32

const (
	EMatchGroupServerStatus_k_EMatchGroupServerStatus_OK                  EMatchGroupServerStatus = 0
	EMatchGroupServerStatus_k_EMatchGroupServerStatus_LimitedAvailability EMatchGroupServerStatus = 1
	EMatchGroupServerStatus_k_EMatchGroupServerStatus_Offline             EMatchGroupServerStatus = 2
)

// Enum value maps for EMatchGroupServerStatus.
var (
	EMatchGroupServerStatus_name = map[int32]string{
		0: "k_EMatchGroupServerStatus_OK",
		1: "k_EMatchGroupServerStatus_LimitedAvailability",
		2: "k_EMatchGroupServerStatus_Offline",
	}
	EMatchGroupServerStatus_value = map[string]int32{
		"k_EMatchGroupServerStatus_OK":                  0,
		"k_EMatchGroupServerStatus_LimitedAvailability": 1,
		"k_EMatchGroupServerStatus_Offline":             2,
	}
)

func (x EMatchGroupServerStatus) Enum() *EMatchGroupServerStatus {
	p := new(EMatchGroupServerStatus)
	*p = x
	return p
}

func (x EMatchGroupServerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMatchGroupServerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[18].Descriptor()
}

func (EMatchGroupServerStatus) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[18]
}

func (x EMatchGroupServerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMatchGroupServerStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMatchGroupServerStatus(num)
	return nil
}

// Deprecated: Use EMatchGroupServerStatus.Descriptor instead.
func (EMatchGroupServerStatus) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{18}
}

type DOTA_CM_PICK int32

const (
	DOTA_CM_PICK_DOTA_CM_RANDOM    DOTA_CM_PICK = 0
	DOTA_CM_PICK_DOTA_CM_GOOD_GUYS DOTA_CM_PICK = 1
	DOTA_CM_PICK_DOTA_CM_BAD_GUYS  DOTA_CM_PICK = 2
)

// Enum value maps for DOTA_CM_PICK.
var (
	DOTA_CM_PICK_name = map[int32]string{
		0: "DOTA_CM_RANDOM",
		1: "DOTA_CM_GOOD_GUYS",
		2: "DOTA_CM_BAD_GUYS",
	}
	DOTA_CM_PICK_value = map[string]int32{
		"DOTA_CM_RANDOM":    0,
		"DOTA_CM_GOOD_GUYS": 1,
		"DOTA_CM_BAD_GUYS":  2,
	}
)

func (x DOTA_CM_PICK) Enum() *DOTA_CM_PICK {
	p := new(DOTA_CM_PICK)
	*p = x
	return p
}

func (x DOTA_CM_PICK) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_CM_PICK) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[19].Descriptor()
}

func (DOTA_CM_PICK) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[19]
}

func (x DOTA_CM_PICK) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_CM_PICK) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_CM_PICK(num)
	return nil
}

// Deprecated: Use DOTA_CM_PICK.Descriptor instead.
func (DOTA_CM_PICK) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{19}
}

type DOTALowPriorityBanType int32

const (
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_ABANDON           DOTALowPriorityBanType = 0
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_REPORTS           DOTALowPriorityBanType = 1
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON DOTALowPriorityBanType = 2
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_PRE_GAME_ROLE     DOTALowPriorityBanType = 3
)

// Enum value maps for DOTALowPriorityBanType.
var (
	DOTALowPriorityBanType_name = map[int32]string{
		0: "DOTA_LOW_PRIORITY_BAN_ABANDON",
		1: "DOTA_LOW_PRIORITY_BAN_REPORTS",
		2: "DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON",
		3: "DOTA_LOW_PRIORITY_BAN_PRE_GAME_ROLE",
	}
	DOTALowPriorityBanType_value = map[string]int32{
		"DOTA_LOW_PRIORITY_BAN_ABANDON":           0,
		"DOTA_LOW_PRIORITY_BAN_REPORTS":           1,
		"DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON": 2,
		"DOTA_LOW_PRIORITY_BAN_PRE_GAME_ROLE":     3,
	}
)

func (x DOTALowPriorityBanType) Enum() *DOTALowPriorityBanType {
	p := new(DOTALowPriorityBanType)
	*p = x
	return p
}

func (x DOTALowPriorityBanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTALowPriorityBanType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[20].Descriptor()
}

func (DOTALowPriorityBanType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[20]
}

func (x DOTALowPriorityBanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTALowPriorityBanType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTALowPriorityBanType(num)
	return nil
}

// Deprecated: Use DOTALowPriorityBanType.Descriptor instead.
func (DOTALowPriorityBanType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{20}
}

type DOTALobbyReadyState int32

const (
	DOTALobbyReadyState_DOTALobbyReadyState_UNDECLARED       DOTALobbyReadyState = 0
	DOTALobbyReadyState_DOTALobbyReadyState_ACCEPTED         DOTALobbyReadyState = 1
	DOTALobbyReadyState_DOTALobbyReadyState_DECLINED         DOTALobbyReadyState = 2
	DOTALobbyReadyState_DOTALobbyReadyState_DECLINED_REQUEUE DOTALobbyReadyState = 3
)

// Enum value maps for DOTALobbyReadyState.
var (
	DOTALobbyReadyState_name = map[int32]string{
		0: "DOTALobbyReadyState_UNDECLARED",
		1: "DOTALobbyReadyState_ACCEPTED",
		2: "DOTALobbyReadyState_DECLINED",
		3: "DOTALobbyReadyState_DECLINED_REQUEUE",
	}
	DOTALobbyReadyState_value = map[string]int32{
		"DOTALobbyReadyState_UNDECLARED":       0,
		"DOTALobbyReadyState_ACCEPTED":         1,
		"DOTALobbyReadyState_DECLINED":         2,
		"DOTALobbyReadyState_DECLINED_REQUEUE": 3,
	}
)

func (x DOTALobbyReadyState) Enum() *DOTALobbyReadyState {
	p := new(DOTALobbyReadyState)
	*p = x
	return p
}

func (x DOTALobbyReadyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTALobbyReadyState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[21].Descriptor()
}

func (DOTALobbyReadyState) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[21]
}

func (x DOTALobbyReadyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTALobbyReadyState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTALobbyReadyState(num)
	return nil
}

// Deprecated: Use DOTALobbyReadyState.Descriptor instead.
func (DOTALobbyReadyState) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{21}
}

type DOTAJoinLobbyResult int32

const (
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS                       DOTAJoinLobbyResult = 0
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_ALREADY_IN_GAME               DOTAJoinLobbyResult = 1
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INVALID_LOBBY                 DOTAJoinLobbyResult = 2
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INCORRECT_PASSWORD            DOTAJoinLobbyResult = 3
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_ACCESS_DENIED                 DOTAJoinLobbyResult = 4
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_GENERIC_ERROR                 DOTAJoinLobbyResult = 5
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INCORRECT_VERSION             DOTAJoinLobbyResult = 6
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_IN_TEAM_PARTY                 DOTAJoinLobbyResult = 7
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_NO_LOBBY_FOUND                DOTAJoinLobbyResult = 8
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_LOBBY_FULL                    DOTAJoinLobbyResult = 9
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION DOTAJoinLobbyResult = 10
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_TIMEOUT                       DOTAJoinLobbyResult = 11
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN          DOTAJoinLobbyResult = 12
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_BUSY                          DOTAJoinLobbyResult = 13
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_NO_PLAYTIME                   DOTAJoinLobbyResult = 14
)

// Enum value maps for DOTAJoinLobbyResult.
var (
	DOTAJoinLobbyResult_name = map[int32]string{
		0:  "DOTA_JOIN_RESULT_SUCCESS",
		1:  "DOTA_JOIN_RESULT_ALREADY_IN_GAME",
		2:  "DOTA_JOIN_RESULT_INVALID_LOBBY",
		3:  "DOTA_JOIN_RESULT_INCORRECT_PASSWORD",
		4:  "DOTA_JOIN_RESULT_ACCESS_DENIED",
		5:  "DOTA_JOIN_RESULT_GENERIC_ERROR",
		6:  "DOTA_JOIN_RESULT_INCORRECT_VERSION",
		7:  "DOTA_JOIN_RESULT_IN_TEAM_PARTY",
		8:  "DOTA_JOIN_RESULT_NO_LOBBY_FOUND",
		9:  "DOTA_JOIN_RESULT_LOBBY_FULL",
		10: "DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION",
		11: "DOTA_JOIN_RESULT_TIMEOUT",
		12: "DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN",
		13: "DOTA_JOIN_RESULT_BUSY",
		14: "DOTA_JOIN_RESULT_NO_PLAYTIME",
	}
	DOTAJoinLobbyResult_value = map[string]int32{
		"DOTA_JOIN_RESULT_SUCCESS":                       0,
		"DOTA_JOIN_RESULT_ALREADY_IN_GAME":               1,
		"DOTA_JOIN_RESULT_INVALID_LOBBY":                 2,
		"DOTA_JOIN_RESULT_INCORRECT_PASSWORD":            3,
		"DOTA_JOIN_RESULT_ACCESS_DENIED":                 4,
		"DOTA_JOIN_RESULT_GENERIC_ERROR":                 5,
		"DOTA_JOIN_RESULT_INCORRECT_VERSION":             6,
		"DOTA_JOIN_RESULT_IN_TEAM_PARTY":                 7,
		"DOTA_JOIN_RESULT_NO_LOBBY_FOUND":                8,
		"DOTA_JOIN_RESULT_LOBBY_FULL":                    9,
		"DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION": 10,
		"DOTA_JOIN_RESULT_TIMEOUT":                       11,
		"DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN":          12,
		"DOTA_JOIN_RESULT_BUSY":                          13,
		"DOTA_JOIN_RESULT_NO_PLAYTIME":                   14,
	}
)

func (x DOTAJoinLobbyResult) Enum() *DOTAJoinLobbyResult {
	p := new(DOTAJoinLobbyResult)
	*p = x
	return p
}

func (x DOTAJoinLobbyResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTAJoinLobbyResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[22].Descriptor()
}

func (DOTAJoinLobbyResult) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[22]
}

func (x DOTAJoinLobbyResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTAJoinLobbyResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTAJoinLobbyResult(num)
	return nil
}

// Deprecated: Use DOTAJoinLobbyResult.Descriptor instead.
func (DOTAJoinLobbyResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{22}
}

type DOTASelectionPriorityRules int32

const (
	DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual    DOTASelectionPriorityRules = 0
	DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Automatic DOTASelectionPriorityRules = 1
)

// Enum value maps for DOTASelectionPriorityRules.
var (
	DOTASelectionPriorityRules_name = map[int32]string{
		0: "k_DOTASelectionPriorityRules_Manual",
		1: "k_DOTASelectionPriorityRules_Automatic",
	}
	DOTASelectionPriorityRules_value = map[string]int32{
		"k_DOTASelectionPriorityRules_Manual":    0,
		"k_DOTASelectionPriorityRules_Automatic": 1,
	}
)

func (x DOTASelectionPriorityRules) Enum() *DOTASelectionPriorityRules {
	p := new(DOTASelectionPriorityRules)
	*p = x
	return p
}

func (x DOTASelectionPriorityRules) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTASelectionPriorityRules) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[23].Descriptor()
}

func (DOTASelectionPriorityRules) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[23]
}

func (x DOTASelectionPriorityRules) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTASelectionPriorityRules) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTASelectionPriorityRules(num)
	return nil
}

// Deprecated: Use DOTASelectionPriorityRules.Descriptor instead.
func (DOTASelectionPriorityRules) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{23}
}

type DOTASelectionPriorityChoice int32

const (
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid    DOTASelectionPriorityChoice = 0
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_FirstPick  DOTASelectionPriorityChoice = 1
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_SecondPick DOTASelectionPriorityChoice = 2
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Radiant    DOTASelectionPriorityChoice = 3
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Dire       DOTASelectionPriorityChoice = 4
)

// Enum value maps for DOTASelectionPriorityChoice.
var (
	DOTASelectionPriorityChoice_name = map[int32]string{
		0: "k_DOTASelectionPriorityChoice_Invalid",
		1: "k_DOTASelectionPriorityChoice_FirstPick",
		2: "k_DOTASelectionPriorityChoice_SecondPick",
		3: "k_DOTASelectionPriorityChoice_Radiant",
		4: "k_DOTASelectionPriorityChoice_Dire",
	}
	DOTASelectionPriorityChoice_value = map[string]int32{
		"k_DOTASelectionPriorityChoice_Invalid":    0,
		"k_DOTASelectionPriorityChoice_FirstPick":  1,
		"k_DOTASelectionPriorityChoice_SecondPick": 2,
		"k_DOTASelectionPriorityChoice_Radiant":    3,
		"k_DOTASelectionPriorityChoice_Dire":       4,
	}
)

func (x DOTASelectionPriorityChoice) Enum() *DOTASelectionPriorityChoice {
	p := new(DOTASelectionPriorityChoice)
	*p = x
	return p
}

func (x DOTASelectionPriorityChoice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTASelectionPriorityChoice) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[24].Descriptor()
}

func (DOTASelectionPriorityChoice) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[24]
}

func (x DOTASelectionPriorityChoice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTASelectionPriorityChoice) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTASelectionPriorityChoice(num)
	return nil
}

// Deprecated: Use DOTASelectionPriorityChoice.Descriptor instead.
func (DOTASelectionPriorityChoice) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{24}
}

type DOTAMatchVote int32

const (
	DOTAMatchVote_DOTAMatchVote_INVALID  DOTAMatchVote = 0
	DOTAMatchVote_DOTAMatchVote_POSITIVE DOTAMatchVote = 1
	DOTAMatchVote_DOTAMatchVote_NEGATIVE DOTAMatchVote = 2
)

// Enum value maps for DOTAMatchVote.
var (
	DOTAMatchVote_name = map[int32]string{
		0: "DOTAMatchVote_INVALID",
		1: "DOTAMatchVote_POSITIVE",
		2: "DOTAMatchVote_NEGATIVE",
	}
	DOTAMatchVote_value = map[string]int32{
		"DOTAMatchVote_INVALID":  0,
		"DOTAMatchVote_POSITIVE": 1,
		"DOTAMatchVote_NEGATIVE": 2,
	}
)

func (x DOTAMatchVote) Enum() *DOTAMatchVote {
	p := new(DOTAMatchVote)
	*p = x
	return p
}

func (x DOTAMatchVote) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTAMatchVote) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[25].Descriptor()
}

func (DOTAMatchVote) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[25]
}

func (x DOTAMatchVote) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTAMatchVote) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTAMatchVote(num)
	return nil
}

// Deprecated: Use DOTAMatchVote.Descriptor instead.
func (DOTAMatchVote) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{25}
}

type DOTALobbyVisibility int32

const (
	DOTALobbyVisibility_DOTALobbyVisibility_Public   DOTALobbyVisibility = 0
	DOTALobbyVisibility_DOTALobbyVisibility_Friends  DOTALobbyVisibility = 1
	DOTALobbyVisibility_DOTALobbyVisibility_Unlisted DOTALobbyVisibility = 2
)

// Enum value maps for DOTALobbyVisibility.
var (
	DOTALobbyVisibility_name = map[int32]string{
		0: "DOTALobbyVisibility_Public",
		1: "DOTALobbyVisibility_Friends",
		2: "DOTALobbyVisibility_Unlisted",
	}
	DOTALobbyVisibility_value = map[string]int32{
		"DOTALobbyVisibility_Public":   0,
		"DOTALobbyVisibility_Friends":  1,
		"DOTALobbyVisibility_Unlisted": 2,
	}
)

func (x DOTALobbyVisibility) Enum() *DOTALobbyVisibility {
	p := new(DOTALobbyVisibility)
	*p = x
	return p
}

func (x DOTALobbyVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTALobbyVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[26].Descriptor()
}

func (DOTALobbyVisibility) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[26]
}

func (x DOTALobbyVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTALobbyVisibility) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTALobbyVisibility(num)
	return nil
}

// Deprecated: Use DOTALobbyVisibility.Descriptor instead.
func (DOTALobbyVisibility) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{26}
}

type EDOTAPlayerMMRType int32

const (
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_Invalid            EDOTAPlayerMMRType = 0
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralHidden      EDOTAPlayerMMRType = 1
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralCompetitive EDOTAPlayerMMRType = 3
)

// Enum value maps for EDOTAPlayerMMRType.
var (
	EDOTAPlayerMMRType_name = map[int32]string{
		0: "k_EDOTAPlayerMMRType_Invalid",
		1: "k_EDOTAPlayerMMRType_GeneralHidden",
		3: "k_EDOTAPlayerMMRType_GeneralCompetitive",
	}
	EDOTAPlayerMMRType_value = map[string]int32{
		"k_EDOTAPlayerMMRType_Invalid":            0,
		"k_EDOTAPlayerMMRType_GeneralHidden":      1,
		"k_EDOTAPlayerMMRType_GeneralCompetitive": 3,
	}
)

func (x EDOTAPlayerMMRType) Enum() *EDOTAPlayerMMRType {
	p := new(EDOTAPlayerMMRType)
	*p = x
	return p
}

func (x EDOTAPlayerMMRType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTAPlayerMMRType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[27].Descriptor()
}

func (EDOTAPlayerMMRType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[27]
}

func (x EDOTAPlayerMMRType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTAPlayerMMRType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTAPlayerMMRType(num)
	return nil
}

// Deprecated: Use EDOTAPlayerMMRType.Descriptor instead.
func (EDOTAPlayerMMRType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{27}
}

type EDOTAMMRBoostType int32

const (
	EDOTAMMRBoostType_k_EDOTAMMRBoostType_None     EDOTAMMRBoostType = 0
	EDOTAMMRBoostType_k_EDOTAMMRBoostType_Leader   EDOTAMMRBoostType = 1
	EDOTAMMRBoostType_k_EDOTAMMRBoostType_Follower EDOTAMMRBoostType = 2
)

// Enum value maps for EDOTAMMRBoostType.
var (
	EDOTAMMRBoostType_name = map[int32]string{
		0: "k_EDOTAMMRBoostType_None",
		1: "k_EDOTAMMRBoostType_Leader",
		2: "k_EDOTAMMRBoostType_Follower",
	}
	EDOTAMMRBoostType_value = map[string]int32{
		"k_EDOTAMMRBoostType_None":     0,
		"k_EDOTAMMRBoostType_Leader":   1,
		"k_EDOTAMMRBoostType_Follower": 2,
	}
)

func (x EDOTAMMRBoostType) Enum() *EDOTAMMRBoostType {
	p := new(EDOTAMMRBoostType)
	*p = x
	return p
}

func (x EDOTAMMRBoostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTAMMRBoostType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[28].Descriptor()
}

func (EDOTAMMRBoostType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[28]
}

func (x EDOTAMMRBoostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTAMMRBoostType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTAMMRBoostType(num)
	return nil
}

// Deprecated: Use EDOTAMMRBoostType.Descriptor instead.
func (EDOTAMMRBoostType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{28}
}

type MatchType int32

const (
	MatchType_MATCH_TYPE_CASUAL            MatchType = 0
	MatchType_MATCH_TYPE_COOP_BOTS         MatchType = 1
	MatchType_MATCH_TYPE_COMPETITIVE       MatchType = 4
	MatchType_MATCH_TYPE_WEEKEND_TOURNEY   MatchType = 5
	MatchType_MATCH_TYPE_EVENT             MatchType = 7
	MatchType_MATCH_TYPE_COACHES_CHALLENGE MatchType = 12
	MatchType_MATCH_TYPE_NEW_PLAYER_POOL   MatchType = 14
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0:  "MATCH_TYPE_CASUAL",
		1:  "MATCH_TYPE_COOP_BOTS",
		4:  "MATCH_TYPE_COMPETITIVE",
		5:  "MATCH_TYPE_WEEKEND_TOURNEY",
		7:  "MATCH_TYPE_EVENT",
		12: "MATCH_TYPE_COACHES_CHALLENGE",
		14: "MATCH_TYPE_NEW_PLAYER_POOL",
	}
	MatchType_value = map[string]int32{
		"MATCH_TYPE_CASUAL":            0,
		"MATCH_TYPE_COOP_BOTS":         1,
		"MATCH_TYPE_COMPETITIVE":       4,
		"MATCH_TYPE_WEEKEND_TOURNEY":   5,
		"MATCH_TYPE_EVENT":             7,
		"MATCH_TYPE_COACHES_CHALLENGE": 12,
		"MATCH_TYPE_NEW_PLAYER_POOL":   14,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[29].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[29]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MatchType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MatchType(num)
	return nil
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{29}
}

type DOTABotDifficulty int32

const (
	DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE DOTABotDifficulty = 0
	DOTABotDifficulty_BOT_DIFFICULTY_EASY    DOTABotDifficulty = 1
	DOTABotDifficulty_BOT_DIFFICULTY_MEDIUM  DOTABotDifficulty = 2
	DOTABotDifficulty_BOT_DIFFICULTY_HARD    DOTABotDifficulty = 3
	DOTABotDifficulty_BOT_DIFFICULTY_UNFAIR  DOTABotDifficulty = 4
	DOTABotDifficulty_BOT_DIFFICULTY_INVALID DOTABotDifficulty = 5
	DOTABotDifficulty_BOT_DIFFICULTY_EXTRA1  DOTABotDifficulty = 6
	DOTABotDifficulty_BOT_DIFFICULTY_EXTRA2  DOTABotDifficulty = 7
	DOTABotDifficulty_BOT_DIFFICULTY_EXTRA3  DOTABotDifficulty = 8
	DOTABotDifficulty_BOT_DIFFICULTY_NPX     DOTABotDifficulty = 9
)

// Enum value maps for DOTABotDifficulty.
var (
	DOTABotDifficulty_name = map[int32]string{
		0: "BOT_DIFFICULTY_PASSIVE",
		1: "BOT_DIFFICULTY_EASY",
		2: "BOT_DIFFICULTY_MEDIUM",
		3: "BOT_DIFFICULTY_HARD",
		4: "BOT_DIFFICULTY_UNFAIR",
		5: "BOT_DIFFICULTY_INVALID",
		6: "BOT_DIFFICULTY_EXTRA1",
		7: "BOT_DIFFICULTY_EXTRA2",
		8: "BOT_DIFFICULTY_EXTRA3",
		9: "BOT_DIFFICULTY_NPX",
	}
	DOTABotDifficulty_value = map[string]int32{
		"BOT_DIFFICULTY_PASSIVE": 0,
		"BOT_DIFFICULTY_EASY":    1,
		"BOT_DIFFICULTY_MEDIUM":  2,
		"BOT_DIFFICULTY_HARD":    3,
		"BOT_DIFFICULTY_UNFAIR":  4,
		"BOT_DIFFICULTY_INVALID": 5,
		"BOT_DIFFICULTY_EXTRA1":  6,
		"BOT_DIFFICULTY_EXTRA2":  7,
		"BOT_DIFFICULTY_EXTRA3":  8,
		"BOT_DIFFICULTY_NPX":     9,
	}
)

func (x DOTABotDifficulty) Enum() *DOTABotDifficulty {
	p := new(DOTABotDifficulty)
	*p = x
	return p
}

func (x DOTABotDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTABotDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[30].Descriptor()
}

func (DOTABotDifficulty) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[30]
}

func (x DOTABotDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTABotDifficulty) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTABotDifficulty(num)
	return nil
}

// Deprecated: Use DOTABotDifficulty.Descriptor instead.
func (DOTABotDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{30}
}

type DOTA_BOT_MODE int32

const (
	DOTA_BOT_MODE_DOTA_BOT_MODE_NONE                 DOTA_BOT_MODE = 0
	DOTA_BOT_MODE_DOTA_BOT_MODE_LANING               DOTA_BOT_MODE = 1
	DOTA_BOT_MODE_DOTA_BOT_MODE_ATTACK               DOTA_BOT_MODE = 2
	DOTA_BOT_MODE_DOTA_BOT_MODE_ROAM                 DOTA_BOT_MODE = 3
	DOTA_BOT_MODE_DOTA_BOT_MODE_RETREAT              DOTA_BOT_MODE = 4
	DOTA_BOT_MODE_DOTA_BOT_MODE_SECRET_SHOP          DOTA_BOT_MODE = 5
	DOTA_BOT_MODE_DOTA_BOT_MODE_SIDE_SHOP            DOTA_BOT_MODE = 6
	DOTA_BOT_MODE_DOTA_BOT_MODE_RUNE                 DOTA_BOT_MODE = 7
	DOTA_BOT_MODE_DOTA_BOT_MODE_PUSH_TOWER_TOP       DOTA_BOT_MODE = 8
	DOTA_BOT_MODE_DOTA_BOT_MODE_PUSH_TOWER_MID       DOTA_BOT_MODE = 9
	DOTA_BOT_MODE_DOTA_BOT_MODE_PUSH_TOWER_BOT       DOTA_BOT_MODE = 10
	DOTA_BOT_MODE_DOTA_BOT_MODE_DEFEND_TOWER_TOP     DOTA_BOT_MODE = 11
	DOTA_BOT_MODE_DOTA_BOT_MODE_DEFEND_TOWER_MID     DOTA_BOT_MODE = 12
	DOTA_BOT_MODE_DOTA_BOT_MODE_DEFEND_TOWER_BOT     DOTA_BOT_MODE = 13
	DOTA_BOT_MODE_DOTA_BOT_MODE_ASSEMBLE             DOTA_BOT_MODE = 14
	DOTA_BOT_MODE_DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS DOTA_BOT_MODE = 15
	DOTA_BOT_MODE_DOTA_BOT_MODE_TEAM_ROAM            DOTA_BOT_MODE = 16
	DOTA_BOT_MODE_DOTA_BOT_MODE_FARM                 DOTA_BOT_MODE = 17
	DOTA_BOT_MODE_DOTA_BOT_MODE_DEFEND_ALLY          DOTA_BOT_MODE = 18
	DOTA_BOT_MODE_DOTA_BOT_MODE_EVASIVE_MANEUVERS    DOTA_BOT_MODE = 19
	DOTA_BOT_MODE_DOTA_BOT_MODE_ROSHAN               DOTA_BOT_MODE = 20
	DOTA_BOT_MODE_DOTA_BOT_MODE_ITEM                 DOTA_BOT_MODE = 21
	DOTA_BOT_MODE_DOTA_BOT_MODE_WARD                 DOTA_BOT_MODE = 22
	DOTA_BOT_MODE_DOTA_BOT_MODE_COMPANION            DOTA_BOT_MODE = 23
	DOTA_BOT_MODE_DOTA_BOT_MODE_TUTORIAL_BOSS        DOTA_BOT_MODE = 24
	DOTA_BOT_MODE_DOTA_BOT_MODE_MINION               DOTA_BOT_MODE = 25
	DOTA_BOT_MODE_DOTA_BOT_MODE_OUTPOST              DOTA_BOT_MODE = 26
)

// Enum value maps for DOTA_BOT_MODE.
var (
	DOTA_BOT_MODE_name = map[int32]string{
		0:  "DOTA_BOT_MODE_NONE",
		1:  "DOTA_BOT_MODE_LANING",
		2:  "DOTA_BOT_MODE_ATTACK",
		3:  "DOTA_BOT_MODE_ROAM",
		4:  "DOTA_BOT_MODE_RETREAT",
		5:  "DOTA_BOT_MODE_SECRET_SHOP",
		6:  "DOTA_BOT_MODE_SIDE_SHOP",
		7:  "DOTA_BOT_MODE_RUNE",
		8:  "DOTA_BOT_MODE_PUSH_TOWER_TOP",
		9:  "DOTA_BOT_MODE_PUSH_TOWER_MID",
		10: "DOTA_BOT_MODE_PUSH_TOWER_BOT",
		11: "DOTA_BOT_MODE_DEFEND_TOWER_TOP",
		12: "DOTA_BOT_MODE_DEFEND_TOWER_MID",
		13: "DOTA_BOT_MODE_DEFEND_TOWER_BOT",
		14: "DOTA_BOT_MODE_ASSEMBLE",
		15: "DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS",
		16: "DOTA_BOT_MODE_TEAM_ROAM",
		17: "DOTA_BOT_MODE_FARM",
		18: "DOTA_BOT_MODE_DEFEND_ALLY",
		19: "DOTA_BOT_MODE_EVASIVE_MANEUVERS",
		20: "DOTA_BOT_MODE_ROSHAN",
		21: "DOTA_BOT_MODE_ITEM",
		22: "DOTA_BOT_MODE_WARD",
		23: "DOTA_BOT_MODE_COMPANION",
		24: "DOTA_BOT_MODE_TUTORIAL_BOSS",
		25: "DOTA_BOT_MODE_MINION",
		26: "DOTA_BOT_MODE_OUTPOST",
	}
	DOTA_BOT_MODE_value = map[string]int32{
		"DOTA_BOT_MODE_NONE":                 0,
		"DOTA_BOT_MODE_LANING":               1,
		"DOTA_BOT_MODE_ATTACK":               2,
		"DOTA_BOT_MODE_ROAM":                 3,
		"DOTA_BOT_MODE_RETREAT":              4,
		"DOTA_BOT_MODE_SECRET_SHOP":          5,
		"DOTA_BOT_MODE_SIDE_SHOP":            6,
		"DOTA_BOT_MODE_RUNE":                 7,
		"DOTA_BOT_MODE_PUSH_TOWER_TOP":       8,
		"DOTA_BOT_MODE_PUSH_TOWER_MID":       9,
		"DOTA_BOT_MODE_PUSH_TOWER_BOT":       10,
		"DOTA_BOT_MODE_DEFEND_TOWER_TOP":     11,
		"DOTA_BOT_MODE_DEFEND_TOWER_MID":     12,
		"DOTA_BOT_MODE_DEFEND_TOWER_BOT":     13,
		"DOTA_BOT_MODE_ASSEMBLE":             14,
		"DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS": 15,
		"DOTA_BOT_MODE_TEAM_ROAM":            16,
		"DOTA_BOT_MODE_FARM":                 17,
		"DOTA_BOT_MODE_DEFEND_ALLY":          18,
		"DOTA_BOT_MODE_EVASIVE_MANEUVERS":    19,
		"DOTA_BOT_MODE_ROSHAN":               20,
		"DOTA_BOT_MODE_ITEM":                 21,
		"DOTA_BOT_MODE_WARD":                 22,
		"DOTA_BOT_MODE_COMPANION":            23,
		"DOTA_BOT_MODE_TUTORIAL_BOSS":        24,
		"DOTA_BOT_MODE_MINION":               25,
		"DOTA_BOT_MODE_OUTPOST":              26,
	}
)

func (x DOTA_BOT_MODE) Enum() *DOTA_BOT_MODE {
	p := new(DOTA_BOT_MODE)
	*p = x
	return p
}

func (x DOTA_BOT_MODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_BOT_MODE) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[31].Descriptor()
}

func (DOTA_BOT_MODE) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[31]
}

func (x DOTA_BOT_MODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_BOT_MODE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_BOT_MODE(num)
	return nil
}

// Deprecated: Use DOTA_BOT_MODE.Descriptor instead.
func (DOTA_BOT_MODE) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{31}
}

type MatchLanguages int32

const (
	MatchLanguages_MATCH_LANGUAGE_INVALID    MatchLanguages = 0
	MatchLanguages_MATCH_LANGUAGE_ENGLISH    MatchLanguages = 1
	MatchLanguages_MATCH_LANGUAGE_RUSSIAN    MatchLanguages = 2
	MatchLanguages_MATCH_LANGUAGE_CHINESE    MatchLanguages = 3
	MatchLanguages_MATCH_LANGUAGE_KOREAN     MatchLanguages = 4
	MatchLanguages_MATCH_LANGUAGE_SPANISH    MatchLanguages = 5
	MatchLanguages_MATCH_LANGUAGE_PORTUGUESE MatchLanguages = 6
	MatchLanguages_MATCH_LANGUAGE_ENGLISH2   MatchLanguages = 7
)

// Enum value maps for MatchLanguages.
var (
	MatchLanguages_name = map[int32]string{
		0: "MATCH_LANGUAGE_INVALID",
		1: "MATCH_LANGUAGE_ENGLISH",
		2: "MATCH_LANGUAGE_RUSSIAN",
		3: "MATCH_LANGUAGE_CHINESE",
		4: "MATCH_LANGUAGE_KOREAN",
		5: "MATCH_LANGUAGE_SPANISH",
		6: "MATCH_LANGUAGE_PORTUGUESE",
		7: "MATCH_LANGUAGE_ENGLISH2",
	}
	MatchLanguages_value = map[string]int32{
		"MATCH_LANGUAGE_INVALID":    0,
		"MATCH_LANGUAGE_ENGLISH":    1,
		"MATCH_LANGUAGE_RUSSIAN":    2,
		"MATCH_LANGUAGE_CHINESE":    3,
		"MATCH_LANGUAGE_KOREAN":     4,
		"MATCH_LANGUAGE_SPANISH":    5,
		"MATCH_LANGUAGE_PORTUGUESE": 6,
		"MATCH_LANGUAGE_ENGLISH2":   7,
	}
)

func (x MatchLanguages) Enum() *MatchLanguages {
	p := new(MatchLanguages)
	*p = x
	return p
}

func (x MatchLanguages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchLanguages) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[32].Descriptor()
}

func (MatchLanguages) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[32]
}

func (x MatchLanguages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MatchLanguages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MatchLanguages(num)
	return nil
}

// Deprecated: Use MatchLanguages.Descriptor instead.
func (MatchLanguages) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{32}
}

type ETourneyQueueDeadlineState int32

const (
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_Normal            ETourneyQueueDeadlineState = 0
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_Missed            ETourneyQueueDeadlineState = 1
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_ExpiredOK         ETourneyQueueDeadlineState = 2
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_SeekingBye        ETourneyQueueDeadlineState = 3
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_EligibleForRefund ETourneyQueueDeadlineState = 4
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_NA                ETourneyQueueDeadlineState = -1
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_ExpiringSoon      ETourneyQueueDeadlineState = 101
)

// Enum value maps for ETourneyQueueDeadlineState.
var (
	ETourneyQueueDeadlineState_name = map[int32]string{
		0:   "k_ETourneyQueueDeadlineState_Normal",
		1:   "k_ETourneyQueueDeadlineState_Missed",
		2:   "k_ETourneyQueueDeadlineState_ExpiredOK",
		3:   "k_ETourneyQueueDeadlineState_SeekingBye",
		4:   "k_ETourneyQueueDeadlineState_EligibleForRefund",
		-1:  "k_ETourneyQueueDeadlineState_NA",
		101: "k_ETourneyQueueDeadlineState_ExpiringSoon",
	}
	ETourneyQueueDeadlineState_value = map[string]int32{
		"k_ETourneyQueueDeadlineState_Normal":            0,
		"k_ETourneyQueueDeadlineState_Missed":            1,
		"k_ETourneyQueueDeadlineState_ExpiredOK":         2,
		"k_ETourneyQueueDeadlineState_SeekingBye":        3,
		"k_ETourneyQueueDeadlineState_EligibleForRefund": 4,
		"k_ETourneyQueueDeadlineState_NA":                -1,
		"k_ETourneyQueueDeadlineState_ExpiringSoon":      101,
	}
)

func (x ETourneyQueueDeadlineState) Enum() *ETourneyQueueDeadlineState {
	p := new(ETourneyQueueDeadlineState)
	*p = x
	return p
}

func (x ETourneyQueueDeadlineState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETourneyQueueDeadlineState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[33].Descriptor()
}

func (ETourneyQueueDeadlineState) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[33]
}

func (x ETourneyQueueDeadlineState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETourneyQueueDeadlineState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETourneyQueueDeadlineState(num)
	return nil
}

// Deprecated: Use ETourneyQueueDeadlineState.Descriptor instead.
func (ETourneyQueueDeadlineState) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{33}
}

type EMatchOutcome int32

const (
	EMatchOutcome_k_EMatchOutcome_Unknown                         EMatchOutcome = 0
	EMatchOutcome_k_EMatchOutcome_RadVictory                      EMatchOutcome = 2
	EMatchOutcome_k_EMatchOutcome_DireVictory                     EMatchOutcome = 3
	EMatchOutcome_k_EMatchOutcome_NeutralVictory                  EMatchOutcome = 4
	EMatchOutcome_k_EMatchOutcome_NoTeamWinner                    EMatchOutcome = 5
	EMatchOutcome_k_EMatchOutcome_Custom1Victory                  EMatchOutcome = 6
	EMatchOutcome_k_EMatchOutcome_Custom2Victory                  EMatchOutcome = 7
	EMatchOutcome_k_EMatchOutcome_Custom3Victory                  EMatchOutcome = 8
	EMatchOutcome_k_EMatchOutcome_Custom4Victory                  EMatchOutcome = 9
	EMatchOutcome_k_EMatchOutcome_Custom5Victory                  EMatchOutcome = 10
	EMatchOutcome_k_EMatchOutcome_Custom6Victory                  EMatchOutcome = 11
	EMatchOutcome_k_EMatchOutcome_Custom7Victory                  EMatchOutcome = 12
	EMatchOutcome_k_EMatchOutcome_Custom8Victory                  EMatchOutcome = 13
	EMatchOutcome_k_EMatchOutcome_NotScored_PoorNetworkConditions EMatchOutcome = 64
	EMatchOutcome_k_EMatchOutcome_NotScored_Leaver                EMatchOutcome = 65
	EMatchOutcome_k_EMatchOutcome_NotScored_ServerCrash           EMatchOutcome = 66
	EMatchOutcome_k_EMatchOutcome_NotScored_NeverStarted          EMatchOutcome = 67
	EMatchOutcome_k_EMatchOutcome_NotScored_Canceled              EMatchOutcome = 68
	EMatchOutcome_k_EMatchOutcome_NotScored_Suspicious            EMatchOutcome = 69
)

// Enum value maps for EMatchOutcome.
var (
	EMatchOutcome_name = map[int32]string{
		0:  "k_EMatchOutcome_Unknown",
		2:  "k_EMatchOutcome_RadVictory",
		3:  "k_EMatchOutcome_DireVictory",
		4:  "k_EMatchOutcome_NeutralVictory",
		5:  "k_EMatchOutcome_NoTeamWinner",
		6:  "k_EMatchOutcome_Custom1Victory",
		7:  "k_EMatchOutcome_Custom2Victory",
		8:  "k_EMatchOutcome_Custom3Victory",
		9:  "k_EMatchOutcome_Custom4Victory",
		10: "k_EMatchOutcome_Custom5Victory",
		11: "k_EMatchOutcome_Custom6Victory",
		12: "k_EMatchOutcome_Custom7Victory",
		13: "k_EMatchOutcome_Custom8Victory",
		64: "k_EMatchOutcome_NotScored_PoorNetworkConditions",
		65: "k_EMatchOutcome_NotScored_Leaver",
		66: "k_EMatchOutcome_NotScored_ServerCrash",
		67: "k_EMatchOutcome_NotScored_NeverStarted",
		68: "k_EMatchOutcome_NotScored_Canceled",
		69: "k_EMatchOutcome_NotScored_Suspicious",
	}
	EMatchOutcome_value = map[string]int32{
		"k_EMatchOutcome_Unknown":                         0,
		"k_EMatchOutcome_RadVictory":                      2,
		"k_EMatchOutcome_DireVictory":                     3,
		"k_EMatchOutcome_NeutralVictory":                  4,
		"k_EMatchOutcome_NoTeamWinner":                    5,
		"k_EMatchOutcome_Custom1Victory":                  6,
		"k_EMatchOutcome_Custom2Victory":                  7,
		"k_EMatchOutcome_Custom3Victory":                  8,
		"k_EMatchOutcome_Custom4Victory":                  9,
		"k_EMatchOutcome_Custom5Victory":                  10,
		"k_EMatchOutcome_Custom6Victory":                  11,
		"k_EMatchOutcome_Custom7Victory":                  12,
		"k_EMatchOutcome_Custom8Victory":                  13,
		"k_EMatchOutcome_NotScored_PoorNetworkConditions": 64,
		"k_EMatchOutcome_NotScored_Leaver":                65,
		"k_EMatchOutcome_NotScored_ServerCrash":           66,
		"k_EMatchOutcome_NotScored_NeverStarted":          67,
		"k_EMatchOutcome_NotScored_Canceled":              68,
		"k_EMatchOutcome_NotScored_Suspicious":            69,
	}
)

func (x EMatchOutcome) Enum() *EMatchOutcome {
	p := new(EMatchOutcome)
	*p = x
	return p
}

func (x EMatchOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMatchOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[34].Descriptor()
}

func (EMatchOutcome) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[34]
}

func (x EMatchOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMatchOutcome) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMatchOutcome(num)
	return nil
}

// Deprecated: Use EMatchOutcome.Descriptor instead.
func (EMatchOutcome) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{34}
}

type ELaneType int32

const (
	ELaneType_LANE_TYPE_UNKNOWN ELaneType = 0
	ELaneType_LANE_TYPE_SAFE    ELaneType = 1
	ELaneType_LANE_TYPE_OFF     ELaneType = 2
	ELaneType_LANE_TYPE_MID     ELaneType = 3
	ELaneType_LANE_TYPE_JUNGLE  ELaneType = 4
	ELaneType_LANE_TYPE_ROAM    ELaneType = 5
)

// Enum value maps for ELaneType.
var (
	ELaneType_name = map[int32]string{
		0: "LANE_TYPE_UNKNOWN",
		1: "LANE_TYPE_SAFE",
		2: "LANE_TYPE_OFF",
		3: "LANE_TYPE_MID",
		4: "LANE_TYPE_JUNGLE",
		5: "LANE_TYPE_ROAM",
	}
	ELaneType_value = map[string]int32{
		"LANE_TYPE_UNKNOWN": 0,
		"LANE_TYPE_SAFE":    1,
		"LANE_TYPE_OFF":     2,
		"LANE_TYPE_MID":     3,
		"LANE_TYPE_JUNGLE":  4,
		"LANE_TYPE_ROAM":    5,
	}
)

func (x ELaneType) Enum() *ELaneType {
	p := new(ELaneType)
	*p = x
	return p
}

func (x ELaneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELaneType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[35].Descriptor()
}

func (ELaneType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[35]
}

func (x ELaneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELaneType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELaneType(num)
	return nil
}

// Deprecated: Use ELaneType.Descriptor instead.
func (ELaneType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{35}
}

type EBadgeType int32

const (
	EBadgeType_k_EBadgeType_Invalid            EBadgeType = 0
	EBadgeType_k_EBadgeType_TI7_Midweek        EBadgeType = 1
	EBadgeType_k_EBadgeType_TI7_Finals         EBadgeType = 2
	EBadgeType_k_EBadgeType_TI7_AllEvent       EBadgeType = 3
	EBadgeType_k_EBadgeType_TI8_Midweek        EBadgeType = 4
	EBadgeType_k_EBadgeType_TI8_Finals         EBadgeType = 5
	EBadgeType_k_EBadgeType_TI8_AllEvent       EBadgeType = 6
	EBadgeType_k_EBadgeType_TI10               EBadgeType = 7
	EBadgeType_k_EBadgeType_TI11_PlayoffsDay1  EBadgeType = 8
	EBadgeType_k_EBadgeType_TI11_PlayoffsDay2  EBadgeType = 9
	EBadgeType_k_EBadgeType_TI11_PlayoffsDay3  EBadgeType = 10
	EBadgeType_k_EBadgeType_TI11_PlayoffsDay4  EBadgeType = 11
	EBadgeType_k_EBadgeType_TI11_FinalsWeekend EBadgeType = 12
	EBadgeType_k_EBadgeType_TI12_PlayoffsDay1  EBadgeType = 13
	EBadgeType_k_EBadgeType_TI12_PlayoffsDay2  EBadgeType = 14
	EBadgeType_k_EBadgeType_TI12_PlayoffsDay3  EBadgeType = 15
	EBadgeType_k_EBadgeType_TI12_FinalsWeekend EBadgeType = 16
	EBadgeType_k_EBadgeType_TI12_Special       EBadgeType = 17
	EBadgeType_k_EBadgeType_TI13_FinalsDay1    EBadgeType = 18
	EBadgeType_k_EBadgeType_TI13_FinalsDay2    EBadgeType = 19
	EBadgeType_k_EBadgeType_TI13_FinalsDay3    EBadgeType = 20
	EBadgeType_k_EBadgeType_TI13_Special       EBadgeType = 21
)

// Enum value maps for EBadgeType.
var (
	EBadgeType_name = map[int32]string{
		0:  "k_EBadgeType_Invalid",
		1:  "k_EBadgeType_TI7_Midweek",
		2:  "k_EBadgeType_TI7_Finals",
		3:  "k_EBadgeType_TI7_AllEvent",
		4:  "k_EBadgeType_TI8_Midweek",
		5:  "k_EBadgeType_TI8_Finals",
		6:  "k_EBadgeType_TI8_AllEvent",
		7:  "k_EBadgeType_TI10",
		8:  "k_EBadgeType_TI11_PlayoffsDay1",
		9:  "k_EBadgeType_TI11_PlayoffsDay2",
		10: "k_EBadgeType_TI11_PlayoffsDay3",
		11: "k_EBadgeType_TI11_PlayoffsDay4",
		12: "k_EBadgeType_TI11_FinalsWeekend",
		13: "k_EBadgeType_TI12_PlayoffsDay1",
		14: "k_EBadgeType_TI12_PlayoffsDay2",
		15: "k_EBadgeType_TI12_PlayoffsDay3",
		16: "k_EBadgeType_TI12_FinalsWeekend",
		17: "k_EBadgeType_TI12_Special",
		18: "k_EBadgeType_TI13_FinalsDay1",
		19: "k_EBadgeType_TI13_FinalsDay2",
		20: "k_EBadgeType_TI13_FinalsDay3",
		21: "k_EBadgeType_TI13_Special",
	}
	EBadgeType_value = map[string]int32{
		"k_EBadgeType_Invalid":            0,
		"k_EBadgeType_TI7_Midweek":        1,
		"k_EBadgeType_TI7_Finals":         2,
		"k_EBadgeType_TI7_AllEvent":       3,
		"k_EBadgeType_TI8_Midweek":        4,
		"k_EBadgeType_TI8_Finals":         5,
		"k_EBadgeType_TI8_AllEvent":       6,
		"k_EBadgeType_TI10":               7,
		"k_EBadgeType_TI11_PlayoffsDay1":  8,
		"k_EBadgeType_TI11_PlayoffsDay2":  9,
		"k_EBadgeType_TI11_PlayoffsDay3":  10,
		"k_EBadgeType_TI11_PlayoffsDay4":  11,
		"k_EBadgeType_TI11_FinalsWeekend": 12,
		"k_EBadgeType_TI12_PlayoffsDay1":  13,
		"k_EBadgeType_TI12_PlayoffsDay2":  14,
		"k_EBadgeType_TI12_PlayoffsDay3":  15,
		"k_EBadgeType_TI12_FinalsWeekend": 16,
		"k_EBadgeType_TI12_Special":       17,
		"k_EBadgeType_TI13_FinalsDay1":    18,
		"k_EBadgeType_TI13_FinalsDay2":    19,
		"k_EBadgeType_TI13_FinalsDay3":    20,
		"k_EBadgeType_TI13_Special":       21,
	}
)

func (x EBadgeType) Enum() *EBadgeType {
	p := new(EBadgeType)
	*p = x
	return p
}

func (x EBadgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBadgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[36].Descriptor()
}

func (EBadgeType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[36]
}

func (x EBadgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBadgeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBadgeType(num)
	return nil
}

// Deprecated: Use EBadgeType.Descriptor instead.
func (EBadgeType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{36}
}

type ELeagueStatus int32

const (
	ELeagueStatus_LEAGUE_STATUS_UNSET       ELeagueStatus = 0
	ELeagueStatus_LEAGUE_STATUS_UNSUBMITTED ELeagueStatus = 1
	ELeagueStatus_LEAGUE_STATUS_SUBMITTED   ELeagueStatus = 2
	ELeagueStatus_LEAGUE_STATUS_ACCEPTED    ELeagueStatus = 3
	ELeagueStatus_LEAGUE_STATUS_REJECTED    ELeagueStatus = 4
	ELeagueStatus_LEAGUE_STATUS_CONCLUDED   ELeagueStatus = 5
	ELeagueStatus_LEAGUE_STATUS_DELETED     ELeagueStatus = 6
)

// Enum value maps for ELeagueStatus.
var (
	ELeagueStatus_name = map[int32]string{
		0: "LEAGUE_STATUS_UNSET",
		1: "LEAGUE_STATUS_UNSUBMITTED",
		2: "LEAGUE_STATUS_SUBMITTED",
		3: "LEAGUE_STATUS_ACCEPTED",
		4: "LEAGUE_STATUS_REJECTED",
		5: "LEAGUE_STATUS_CONCLUDED",
		6: "LEAGUE_STATUS_DELETED",
	}
	ELeagueStatus_value = map[string]int32{
		"LEAGUE_STATUS_UNSET":       0,
		"LEAGUE_STATUS_UNSUBMITTED": 1,
		"LEAGUE_STATUS_SUBMITTED":   2,
		"LEAGUE_STATUS_ACCEPTED":    3,
		"LEAGUE_STATUS_REJECTED":    4,
		"LEAGUE_STATUS_CONCLUDED":   5,
		"LEAGUE_STATUS_DELETED":     6,
	}
)

func (x ELeagueStatus) Enum() *ELeagueStatus {
	p := new(ELeagueStatus)
	*p = x
	return p
}

func (x ELeagueStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeagueStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[37].Descriptor()
}

func (ELeagueStatus) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[37]
}

func (x ELeagueStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeagueStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeagueStatus(num)
	return nil
}

// Deprecated: Use ELeagueStatus.Descriptor instead.
func (ELeagueStatus) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{37}
}

type ELeagueRegion int32

const (
	ELeagueRegion_LEAGUE_REGION_UNSET ELeagueRegion = 0
	ELeagueRegion_LEAGUE_REGION_NA    ELeagueRegion = 1
	ELeagueRegion_LEAGUE_REGION_SA    ELeagueRegion = 2
	ELeagueRegion_LEAGUE_REGION_WEU   ELeagueRegion = 3
	ELeagueRegion_LEAGUE_REGION_EEU   ELeagueRegion = 4
	ELeagueRegion_LEAGUE_REGION_CHINA ELeagueRegion = 5
	ELeagueRegion_LEAGUE_REGION_SEA   ELeagueRegion = 6
)

// Enum value maps for ELeagueRegion.
var (
	ELeagueRegion_name = map[int32]string{
		0: "LEAGUE_REGION_UNSET",
		1: "LEAGUE_REGION_NA",
		2: "LEAGUE_REGION_SA",
		3: "LEAGUE_REGION_WEU",
		4: "LEAGUE_REGION_EEU",
		5: "LEAGUE_REGION_CHINA",
		6: "LEAGUE_REGION_SEA",
	}
	ELeagueRegion_value = map[string]int32{
		"LEAGUE_REGION_UNSET": 0,
		"LEAGUE_REGION_NA":    1,
		"LEAGUE_REGION_SA":    2,
		"LEAGUE_REGION_WEU":   3,
		"LEAGUE_REGION_EEU":   4,
		"LEAGUE_REGION_CHINA": 5,
		"LEAGUE_REGION_SEA":   6,
	}
)

func (x ELeagueRegion) Enum() *ELeagueRegion {
	p := new(ELeagueRegion)
	*p = x
	return p
}

func (x ELeagueRegion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeagueRegion) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[38].Descriptor()
}

func (ELeagueRegion) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[38]
}

func (x ELeagueRegion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeagueRegion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeagueRegion(num)
	return nil
}

// Deprecated: Use ELeagueRegion.Descriptor instead.
func (ELeagueRegion) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{38}
}

type ELeagueTier int32

const (
	ELeagueTier_LEAGUE_TIER_UNSET                ELeagueTier = 0
	ELeagueTier_LEAGUE_TIER_AMATEUR              ELeagueTier = 1
	ELeagueTier_LEAGUE_TIER_PROFESSIONAL         ELeagueTier = 2
	ELeagueTier_LEAGUE_TIER_MINOR                ELeagueTier = 3
	ELeagueTier_LEAGUE_TIER_MAJOR                ELeagueTier = 4
	ELeagueTier_LEAGUE_TIER_INTERNATIONAL        ELeagueTier = 5
	ELeagueTier_LEAGUE_TIER_DPC_QUALIFIER        ELeagueTier = 6
	ELeagueTier_LEAGUE_TIER_DPC_LEAGUE_QUALIFIER ELeagueTier = 7
	ELeagueTier_LEAGUE_TIER_DPC_LEAGUE           ELeagueTier = 8
	ELeagueTier_LEAGUE_TIER_DPC_LEAGUE_FINALS    ELeagueTier = 9
)

// Enum value maps for ELeagueTier.
var (
	ELeagueTier_name = map[int32]string{
		0: "LEAGUE_TIER_UNSET",
		1: "LEAGUE_TIER_AMATEUR",
		2: "LEAGUE_TIER_PROFESSIONAL",
		3: "LEAGUE_TIER_MINOR",
		4: "LEAGUE_TIER_MAJOR",
		5: "LEAGUE_TIER_INTERNATIONAL",
		6: "LEAGUE_TIER_DPC_QUALIFIER",
		7: "LEAGUE_TIER_DPC_LEAGUE_QUALIFIER",
		8: "LEAGUE_TIER_DPC_LEAGUE",
		9: "LEAGUE_TIER_DPC_LEAGUE_FINALS",
	}
	ELeagueTier_value = map[string]int32{
		"LEAGUE_TIER_UNSET":                0,
		"LEAGUE_TIER_AMATEUR":              1,
		"LEAGUE_TIER_PROFESSIONAL":         2,
		"LEAGUE_TIER_MINOR":                3,
		"LEAGUE_TIER_MAJOR":                4,
		"LEAGUE_TIER_INTERNATIONAL":        5,
		"LEAGUE_TIER_DPC_QUALIFIER":        6,
		"LEAGUE_TIER_DPC_LEAGUE_QUALIFIER": 7,
		"LEAGUE_TIER_DPC_LEAGUE":           8,
		"LEAGUE_TIER_DPC_LEAGUE_FINALS":    9,
	}
)

func (x ELeagueTier) Enum() *ELeagueTier {
	p := new(ELeagueTier)
	*p = x
	return p
}

func (x ELeagueTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeagueTier) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[39].Descriptor()
}

func (ELeagueTier) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[39]
}

func (x ELeagueTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeagueTier) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeagueTier(num)
	return nil
}

// Deprecated: Use ELeagueTier.Descriptor instead.
func (ELeagueTier) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{39}
}

type ELeagueTierCategory int32

const (
	ELeagueTierCategory_LEAGUE_TIER_CATEGORY_AMATEUR      ELeagueTierCategory = 1
	ELeagueTierCategory_LEAGUE_TIER_CATEGORY_PROFESSIONAL ELeagueTierCategory = 2
	ELeagueTierCategory_LEAGUE_TIER_CATEGORY_DPC          ELeagueTierCategory = 3
)

// Enum value maps for ELeagueTierCategory.
var (
	ELeagueTierCategory_name = map[int32]string{
		1: "LEAGUE_TIER_CATEGORY_AMATEUR",
		2: "LEAGUE_TIER_CATEGORY_PROFESSIONAL",
		3: "LEAGUE_TIER_CATEGORY_DPC",
	}
	ELeagueTierCategory_value = map[string]int32{
		"LEAGUE_TIER_CATEGORY_AMATEUR":      1,
		"LEAGUE_TIER_CATEGORY_PROFESSIONAL": 2,
		"LEAGUE_TIER_CATEGORY_DPC":          3,
	}
)

func (x ELeagueTierCategory) Enum() *ELeagueTierCategory {
	p := new(ELeagueTierCategory)
	*p = x
	return p
}

func (x ELeagueTierCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeagueTierCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[40].Descriptor()
}

func (ELeagueTierCategory) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[40]
}

func (x ELeagueTierCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeagueTierCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeagueTierCategory(num)
	return nil
}

// Deprecated: Use ELeagueTierCategory.Descriptor instead.
func (ELeagueTierCategory) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{40}
}

type ELeagueDivision int32

const (
	ELeagueDivision_LEAGUE_DIVISION_UNSET ELeagueDivision = 0
	ELeagueDivision_LEAGUE_DIVISION_I     ELeagueDivision = 1
	ELeagueDivision_LEAGUE_DIVISION_II    ELeagueDivision = 2
)

// Enum value maps for ELeagueDivision.
var (
	ELeagueDivision_name = map[int32]string{
		0: "LEAGUE_DIVISION_UNSET",
		1: "LEAGUE_DIVISION_I",
		2: "LEAGUE_DIVISION_II",
	}
	ELeagueDivision_value = map[string]int32{
		"LEAGUE_DIVISION_UNSET": 0,
		"LEAGUE_DIVISION_I":     1,
		"LEAGUE_DIVISION_II":    2,
	}
)

func (x ELeagueDivision) Enum() *ELeagueDivision {
	p := new(ELeagueDivision)
	*p = x
	return p
}

func (x ELeagueDivision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeagueDivision) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[41].Descriptor()
}

func (ELeagueDivision) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[41]
}

func (x ELeagueDivision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeagueDivision) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeagueDivision(num)
	return nil
}

// Deprecated: Use ELeagueDivision.Descriptor instead.
func (ELeagueDivision) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{41}
}

type ELeagueBroadcastProvider int32

const (
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_UNKNOWN ELeagueBroadcastProvider = 0
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_STEAM   ELeagueBroadcastProvider = 1
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_TWITCH  ELeagueBroadcastProvider = 2
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_YOUTUBE ELeagueBroadcastProvider = 3
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_OTHER   ELeagueBroadcastProvider = 100
)

// Enum value maps for ELeagueBroadcastProvider.
var (
	ELeagueBroadcastProvider_name = map[int32]string{
		0:   "LEAGUE_BROADCAST_UNKNOWN",
		1:   "LEAGUE_BROADCAST_STEAM",
		2:   "LEAGUE_BROADCAST_TWITCH",
		3:   "LEAGUE_BROADCAST_YOUTUBE",
		100: "LEAGUE_BROADCAST_OTHER",
	}
	ELeagueBroadcastProvider_value = map[string]int32{
		"LEAGUE_BROADCAST_UNKNOWN": 0,
		"LEAGUE_BROADCAST_STEAM":   1,
		"LEAGUE_BROADCAST_TWITCH":  2,
		"LEAGUE_BROADCAST_YOUTUBE": 3,
		"LEAGUE_BROADCAST_OTHER":   100,
	}
)

func (x ELeagueBroadcastProvider) Enum() *ELeagueBroadcastProvider {
	p := new(ELeagueBroadcastProvider)
	*p = x
	return p
}

func (x ELeagueBroadcastProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeagueBroadcastProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[42].Descriptor()
}

func (ELeagueBroadcastProvider) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[42]
}

func (x ELeagueBroadcastProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeagueBroadcastProvider) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeagueBroadcastProvider(num)
	return nil
}

// Deprecated: Use ELeagueBroadcastProvider.Descriptor instead.
func (ELeagueBroadcastProvider) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{42}
}

type ELeaguePhase int32

const (
	ELeaguePhase_LEAGUE_PHASE_UNSET              ELeaguePhase = 0
	ELeaguePhase_LEAGUE_PHASE_REGIONAL_QUALIFIER ELeaguePhase = 1
	ELeaguePhase_LEAGUE_PHASE_GROUP_STAGE        ELeaguePhase = 2
	ELeaguePhase_LEAGUE_PHASE_MAIN_EVENT         ELeaguePhase = 3
)

// Enum value maps for ELeaguePhase.
var (
	ELeaguePhase_name = map[int32]string{
		0: "LEAGUE_PHASE_UNSET",
		1: "LEAGUE_PHASE_REGIONAL_QUALIFIER",
		2: "LEAGUE_PHASE_GROUP_STAGE",
		3: "LEAGUE_PHASE_MAIN_EVENT",
	}
	ELeaguePhase_value = map[string]int32{
		"LEAGUE_PHASE_UNSET":              0,
		"LEAGUE_PHASE_REGIONAL_QUALIFIER": 1,
		"LEAGUE_PHASE_GROUP_STAGE":        2,
		"LEAGUE_PHASE_MAIN_EVENT":         3,
	}
)

func (x ELeaguePhase) Enum() *ELeaguePhase {
	p := new(ELeaguePhase)
	*p = x
	return p
}

func (x ELeaguePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeaguePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[43].Descriptor()
}

func (ELeaguePhase) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[43]
}

func (x ELeaguePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeaguePhase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeaguePhase(num)
	return nil
}

// Deprecated: Use ELeaguePhase.Descriptor instead.
func (ELeaguePhase) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{43}
}

type ELeagueAuditAction int32

const (
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_INVALID                           ELeagueAuditAction = 0
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_CREATE                     ELeagueAuditAction = 1
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_EDIT                       ELeagueAuditAction = 2
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_DELETE                     ELeagueAuditAction = 3
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD                  ELeagueAuditAction = 4
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE               ELeagueAuditAction = 5
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE              ELeagueAuditAction = 6
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD                 ELeagueAuditAction = 7
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE              ELeagueAuditAction = 8
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED              ELeagueAuditAction = 9
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED              ELeagueAuditAction = 10
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED                  ELeagueAuditAction = 11
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL             ELeagueAuditAction = 12
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM        ELeagueAuditAction = 13
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM     ELeagueAuditAction = 14
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START                ELeagueAuditAction = 15
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END                  ELeagueAuditAction = 16
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM           ELeagueAuditAction = 17
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM        ELeagueAuditAction = 18
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED             ELeagueAuditAction = 19
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT                ELeagueAuditAction = 20
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_TEAM_SWAP                  ELeagueAuditAction = 21
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE                  ELeagueAuditAction = 100
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY                 ELeagueAuditAction = 101
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM                ELeagueAuditAction = 102
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM             ELeagueAuditAction = 103
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING           ELeagueAuditAction = 104
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT                    ELeagueAuditAction = 105
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE                ELeagueAuditAction = 106
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED               ELeagueAuditAction = 107
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_SET_SECONDARY_ADVANCING ELeagueAuditAction = 108
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_SET_TERTIARY_ADVANCING  ELeagueAuditAction = 109
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_CREATE                       ELeagueAuditAction = 200
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_DESTROY                      ELeagueAuditAction = 201
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE                   ELeagueAuditAction = 202
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_SET_TEAM                     ELeagueAuditAction = 203
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID                ELeagueAuditAction = 204
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING                ELeagueAuditAction = 205
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_SET_TIME                     ELeagueAuditAction = 206
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED              ELeagueAuditAction = 207
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_COMPLETED                    ELeagueAuditAction = 208
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_EDIT                         ELeagueAuditAction = 209
)

// Enum value maps for ELeagueAuditAction.
var (
	ELeagueAuditAction_name = map[int32]string{
		0:   "LEAGUE_AUDIT_ACTION_INVALID",
		1:   "LEAGUE_AUDIT_ACTION_LEAGUE_CREATE",
		2:   "LEAGUE_AUDIT_ACTION_LEAGUE_EDIT",
		3:   "LEAGUE_AUDIT_ACTION_LEAGUE_DELETE",
		4:   "LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD",
		5:   "LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE",
		6:   "LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE",
		7:   "LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD",
		8:   "LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE",
		9:   "LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED",
		10:  "LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED",
		11:  "LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED",
		12:  "LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL",
		13:  "LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM",
		14:  "LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM",
		15:  "LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START",
		16:  "LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END",
		17:  "LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM",
		18:  "LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM",
		19:  "LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED",
		20:  "LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT",
		21:  "LEAGUE_AUDIT_ACTION_LEAGUE_TEAM_SWAP",
		100: "LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE",
		101: "LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY",
		102: "LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM",
		103: "LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM",
		104: "LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING",
		105: "LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT",
		106: "LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE",
		107: "LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED",
		108: "LEAGUE_AUDIT_ACTION_NODEGROUP_SET_SECONDARY_ADVANCING",
		109: "LEAGUE_AUDIT_ACTION_NODEGROUP_SET_TERTIARY_ADVANCING",
		200: "LEAGUE_AUDIT_ACTION_NODE_CREATE",
		201: "LEAGUE_AUDIT_ACTION_NODE_DESTROY",
		202: "LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE",
		203: "LEAGUE_AUDIT_ACTION_NODE_SET_TEAM",
		204: "LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID",
		205: "LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING",
		206: "LEAGUE_AUDIT_ACTION_NODE_SET_TIME",
		207: "LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED",
		208: "LEAGUE_AUDIT_ACTION_NODE_COMPLETED",
		209: "LEAGUE_AUDIT_ACTION_NODE_EDIT",
	}
	ELeagueAuditAction_value = map[string]int32{
		"LEAGUE_AUDIT_ACTION_INVALID":                           0,
		"LEAGUE_AUDIT_ACTION_LEAGUE_CREATE":                     1,
		"LEAGUE_AUDIT_ACTION_LEAGUE_EDIT":                       2,
		"LEAGUE_AUDIT_ACTION_LEAGUE_DELETE":                     3,
		"LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD":                  4,
		"LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE":               5,
		"LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE":              6,
		"LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD":                 7,
		"LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE":              8,
		"LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED":              9,
		"LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED":              10,
		"LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED":                  11,
		"LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL":             12,
		"LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM":        13,
		"LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM":     14,
		"LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START":                15,
		"LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END":                  16,
		"LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM":           17,
		"LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM":        18,
		"LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED":             19,
		"LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT":                20,
		"LEAGUE_AUDIT_ACTION_LEAGUE_TEAM_SWAP":                  21,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE":                  100,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY":                 101,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM":                102,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM":             103,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING":           104,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT":                    105,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE":                106,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED":               107,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_SET_SECONDARY_ADVANCING": 108,
		"LEAGUE_AUDIT_ACTION_NODEGROUP_SET_TERTIARY_ADVANCING":  109,
		"LEAGUE_AUDIT_ACTION_NODE_CREATE":                       200,
		"LEAGUE_AUDIT_ACTION_NODE_DESTROY":                      201,
		"LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE":                   202,
		"LEAGUE_AUDIT_ACTION_NODE_SET_TEAM":                     203,
		"LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID":                204,
		"LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING":                205,
		"LEAGUE_AUDIT_ACTION_NODE_SET_TIME":                     206,
		"LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED":              207,
		"LEAGUE_AUDIT_ACTION_NODE_COMPLETED":                    208,
		"LEAGUE_AUDIT_ACTION_NODE_EDIT":                         209,
	}
)

func (x ELeagueAuditAction) Enum() *ELeagueAuditAction {
	p := new(ELeagueAuditAction)
	*p = x
	return p
}

func (x ELeagueAuditAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeagueAuditAction) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[44].Descriptor()
}

func (ELeagueAuditAction) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[44]
}

func (x ELeagueAuditAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeagueAuditAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeagueAuditAction(num)
	return nil
}

// Deprecated: Use ELeagueAuditAction.Descriptor instead.
func (ELeagueAuditAction) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{44}
}

type DOTA_COMBATLOG_TYPES int32

const (
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_INVALID                   DOTA_COMBATLOG_TYPES = -1
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_DAMAGE                    DOTA_COMBATLOG_TYPES = 0
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_HEAL                      DOTA_COMBATLOG_TYPES = 1
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MODIFIER_ADD              DOTA_COMBATLOG_TYPES = 2
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MODIFIER_REMOVE           DOTA_COMBATLOG_TYPES = 3
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_DEATH                     DOTA_COMBATLOG_TYPES = 4
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ABILITY                   DOTA_COMBATLOG_TYPES = 5
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ITEM                      DOTA_COMBATLOG_TYPES = 6
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_LOCATION                  DOTA_COMBATLOG_TYPES = 7
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_GOLD                      DOTA_COMBATLOG_TYPES = 8
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_GAME_STATE                DOTA_COMBATLOG_TYPES = 9
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_XP                        DOTA_COMBATLOG_TYPES = 10
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PURCHASE                  DOTA_COMBATLOG_TYPES = 11
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_BUYBACK                   DOTA_COMBATLOG_TYPES = 12
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ABILITY_TRIGGER           DOTA_COMBATLOG_TYPES = 13
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PLAYERSTATS               DOTA_COMBATLOG_TYPES = 14
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MULTIKILL                 DOTA_COMBATLOG_TYPES = 15
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_KILLSTREAK                DOTA_COMBATLOG_TYPES = 16
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_TEAM_BUILDING_KILL        DOTA_COMBATLOG_TYPES = 17
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_FIRST_BLOOD               DOTA_COMBATLOG_TYPES = 18
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MODIFIER_STACK_EVENT      DOTA_COMBATLOG_TYPES = 19
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_NEUTRAL_CAMP_STACK        DOTA_COMBATLOG_TYPES = 20
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PICKUP_RUNE               DOTA_COMBATLOG_TYPES = 21
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_REVEALED_INVISIBLE        DOTA_COMBATLOG_TYPES = 22
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_HERO_SAVED                DOTA_COMBATLOG_TYPES = 23
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MANA_RESTORED             DOTA_COMBATLOG_TYPES = 24
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_HERO_LEVELUP              DOTA_COMBATLOG_TYPES = 25
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_BOTTLE_HEAL_ALLY          DOTA_COMBATLOG_TYPES = 26
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ENDGAME_STATS             DOTA_COMBATLOG_TYPES = 27
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_INTERRUPT_CHANNEL         DOTA_COMBATLOG_TYPES = 28
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ALLIED_GOLD               DOTA_COMBATLOG_TYPES = 29
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_AEGIS_TAKEN               DOTA_COMBATLOG_TYPES = 30
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MANA_DAMAGE               DOTA_COMBATLOG_TYPES = 31
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED DOTA_COMBATLOG_TYPES = 32
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_UNIT_SUMMONED             DOTA_COMBATLOG_TYPES = 33
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ATTACK_EVADE              DOTA_COMBATLOG_TYPES = 34
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_TREE_CUT                  DOTA_COMBATLOG_TYPES = 35
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_SUCCESSFUL_SCAN           DOTA_COMBATLOG_TYPES = 36
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_END_KILLSTREAK            DOTA_COMBATLOG_TYPES = 37
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_BLOODSTONE_CHARGE         DOTA_COMBATLOG_TYPES = 38
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_CRITICAL_DAMAGE           DOTA_COMBATLOG_TYPES = 39
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_SPELL_ABSORB              DOTA_COMBATLOG_TYPES = 40
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_UNIT_TELEPORTED           DOTA_COMBATLOG_TYPES = 41
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_KILL_EATER_EVENT          DOTA_COMBATLOG_TYPES = 42
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_NEUTRAL_ITEM_EARNED       DOTA_COMBATLOG_TYPES = 43
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_STAT_TRACKER_PLAYER       DOTA_COMBATLOG_TYPES = 44
)

// Enum value maps for DOTA_COMBATLOG_TYPES.
var (
	DOTA_COMBATLOG_TYPES_name = map[int32]string{
		-1: "DOTA_COMBATLOG_INVALID",
		0:  "DOTA_COMBATLOG_DAMAGE",
		1:  "DOTA_COMBATLOG_HEAL",
		2:  "DOTA_COMBATLOG_MODIFIER_ADD",
		3:  "DOTA_COMBATLOG_MODIFIER_REMOVE",
		4:  "DOTA_COMBATLOG_DEATH",
		5:  "DOTA_COMBATLOG_ABILITY",
		6:  "DOTA_COMBATLOG_ITEM",
		7:  "DOTA_COMBATLOG_LOCATION",
		8:  "DOTA_COMBATLOG_GOLD",
		9:  "DOTA_COMBATLOG_GAME_STATE",
		10: "DOTA_COMBATLOG_XP",
		11: "DOTA_COMBATLOG_PURCHASE",
		12: "DOTA_COMBATLOG_BUYBACK",
		13: "DOTA_COMBATLOG_ABILITY_TRIGGER",
		14: "DOTA_COMBATLOG_PLAYERSTATS",
		15: "DOTA_COMBATLOG_MULTIKILL",
		16: "DOTA_COMBATLOG_KILLSTREAK",
		17: "DOTA_COMBATLOG_TEAM_BUILDING_KILL",
		18: "DOTA_COMBATLOG_FIRST_BLOOD",
		19: "DOTA_COMBATLOG_MODIFIER_STACK_EVENT",
		20: "DOTA_COMBATLOG_NEUTRAL_CAMP_STACK",
		21: "DOTA_COMBATLOG_PICKUP_RUNE",
		22: "DOTA_COMBATLOG_REVEALED_INVISIBLE",
		23: "DOTA_COMBATLOG_HERO_SAVED",
		24: "DOTA_COMBATLOG_MANA_RESTORED",
		25: "DOTA_COMBATLOG_HERO_LEVELUP",
		26: "DOTA_COMBATLOG_BOTTLE_HEAL_ALLY",
		27: "DOTA_COMBATLOG_ENDGAME_STATS",
		28: "DOTA_COMBATLOG_INTERRUPT_CHANNEL",
		29: "DOTA_COMBATLOG_ALLIED_GOLD",
		30: "DOTA_COMBATLOG_AEGIS_TAKEN",
		31: "DOTA_COMBATLOG_MANA_DAMAGE",
		32: "DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED",
		33: "DOTA_COMBATLOG_UNIT_SUMMONED",
		34: "DOTA_COMBATLOG_ATTACK_EVADE",
		35: "DOTA_COMBATLOG_TREE_CUT",
		36: "DOTA_COMBATLOG_SUCCESSFUL_SCAN",
		37: "DOTA_COMBATLOG_END_KILLSTREAK",
		38: "DOTA_COMBATLOG_BLOODSTONE_CHARGE",
		39: "DOTA_COMBATLOG_CRITICAL_DAMAGE",
		40: "DOTA_COMBATLOG_SPELL_ABSORB",
		41: "DOTA_COMBATLOG_UNIT_TELEPORTED",
		42: "DOTA_COMBATLOG_KILL_EATER_EVENT",
		43: "DOTA_COMBATLOG_NEUTRAL_ITEM_EARNED",
		44: "DOTA_COMBATLOG_STAT_TRACKER_PLAYER",
	}
	DOTA_COMBATLOG_TYPES_value = map[string]int32{
		"DOTA_COMBATLOG_INVALID":                   -1,
		"DOTA_COMBATLOG_DAMAGE":                    0,
		"DOTA_COMBATLOG_HEAL":                      1,
		"DOTA_COMBATLOG_MODIFIER_ADD":              2,
		"DOTA_COMBATLOG_MODIFIER_REMOVE":           3,
		"DOTA_COMBATLOG_DEATH":                     4,
		"DOTA_COMBATLOG_ABILITY":                   5,
		"DOTA_COMBATLOG_ITEM":                      6,
		"DOTA_COMBATLOG_LOCATION":                  7,
		"DOTA_COMBATLOG_GOLD":                      8,
		"DOTA_COMBATLOG_GAME_STATE":                9,
		"DOTA_COMBATLOG_XP":                        10,
		"DOTA_COMBATLOG_PURCHASE":                  11,
		"DOTA_COMBATLOG_BUYBACK":                   12,
		"DOTA_COMBATLOG_ABILITY_TRIGGER":           13,
		"DOTA_COMBATLOG_PLAYERSTATS":               14,
		"DOTA_COMBATLOG_MULTIKILL":                 15,
		"DOTA_COMBATLOG_KILLSTREAK":                16,
		"DOTA_COMBATLOG_TEAM_BUILDING_KILL":        17,
		"DOTA_COMBATLOG_FIRST_BLOOD":               18,
		"DOTA_COMBATLOG_MODIFIER_STACK_EVENT":      19,
		"DOTA_COMBATLOG_NEUTRAL_CAMP_STACK":        20,
		"DOTA_COMBATLOG_PICKUP_RUNE":               21,
		"DOTA_COMBATLOG_REVEALED_INVISIBLE":        22,
		"DOTA_COMBATLOG_HERO_SAVED":                23,
		"DOTA_COMBATLOG_MANA_RESTORED":             24,
		"DOTA_COMBATLOG_HERO_LEVELUP":              25,
		"DOTA_COMBATLOG_BOTTLE_HEAL_ALLY":          26,
		"DOTA_COMBATLOG_ENDGAME_STATS":             27,
		"DOTA_COMBATLOG_INTERRUPT_CHANNEL":         28,
		"DOTA_COMBATLOG_ALLIED_GOLD":               29,
		"DOTA_COMBATLOG_AEGIS_TAKEN":               30,
		"DOTA_COMBATLOG_MANA_DAMAGE":               31,
		"DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED": 32,
		"DOTA_COMBATLOG_UNIT_SUMMONED":             33,
		"DOTA_COMBATLOG_ATTACK_EVADE":              34,
		"DOTA_COMBATLOG_TREE_CUT":                  35,
		"DOTA_COMBATLOG_SUCCESSFUL_SCAN":           36,
		"DOTA_COMBATLOG_END_KILLSTREAK":            37,
		"DOTA_COMBATLOG_BLOODSTONE_CHARGE":         38,
		"DOTA_COMBATLOG_CRITICAL_DAMAGE":           39,
		"DOTA_COMBATLOG_SPELL_ABSORB":              40,
		"DOTA_COMBATLOG_UNIT_TELEPORTED":           41,
		"DOTA_COMBATLOG_KILL_EATER_EVENT":          42,
		"DOTA_COMBATLOG_NEUTRAL_ITEM_EARNED":       43,
		"DOTA_COMBATLOG_STAT_TRACKER_PLAYER":       44,
	}
)

func (x DOTA_COMBATLOG_TYPES) Enum() *DOTA_COMBATLOG_TYPES {
	p := new(DOTA_COMBATLOG_TYPES)
	*p = x
	return p
}

func (x DOTA_COMBATLOG_TYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_COMBATLOG_TYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[45].Descriptor()
}

func (DOTA_COMBATLOG_TYPES) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[45]
}

func (x DOTA_COMBATLOG_TYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_COMBATLOG_TYPES) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_COMBATLOG_TYPES(num)
	return nil
}

// Deprecated: Use DOTA_COMBATLOG_TYPES.Descriptor instead.
func (DOTA_COMBATLOG_TYPES) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{45}
}

type EDPCFavoriteType int32

const (
	EDPCFavoriteType_FAVORITE_TYPE_ALL    EDPCFavoriteType = 0
	EDPCFavoriteType_FAVORITE_TYPE_PLAYER EDPCFavoriteType = 1
	EDPCFavoriteType_FAVORITE_TYPE_TEAM   EDPCFavoriteType = 2
	EDPCFavoriteType_FAVORITE_TYPE_LEAGUE EDPCFavoriteType = 3
)

// Enum value maps for EDPCFavoriteType.
var (
	EDPCFavoriteType_name = map[int32]string{
		0: "FAVORITE_TYPE_ALL",
		1: "FAVORITE_TYPE_PLAYER",
		2: "FAVORITE_TYPE_TEAM",
		3: "FAVORITE_TYPE_LEAGUE",
	}
	EDPCFavoriteType_value = map[string]int32{
		"FAVORITE_TYPE_ALL":    0,
		"FAVORITE_TYPE_PLAYER": 1,
		"FAVORITE_TYPE_TEAM":   2,
		"FAVORITE_TYPE_LEAGUE": 3,
	}
)

func (x EDPCFavoriteType) Enum() *EDPCFavoriteType {
	p := new(EDPCFavoriteType)
	*p = x
	return p
}

func (x EDPCFavoriteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDPCFavoriteType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[46].Descriptor()
}

func (EDPCFavoriteType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[46]
}

func (x EDPCFavoriteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDPCFavoriteType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDPCFavoriteType(num)
	return nil
}

// Deprecated: Use EDPCFavoriteType.Descriptor instead.
func (EDPCFavoriteType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{46}
}

type EDPCPushNotification int32

const (
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_MATCH_STARTING               EDPCPushNotification = 1
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM             EDPCPushNotification = 10
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM           EDPCPushNotification = 11
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM_AS_COACH  EDPCPushNotification = 12
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM_AS_COACH    EDPCPushNotification = 13
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_LEAGUE_RESULT                EDPCPushNotification = 20
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE EDPCPushNotification = 30
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PREDICTION_RESULT            EDPCPushNotification = 31
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED       EDPCPushNotification = 40
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY        EDPCPushNotification = 41
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS        EDPCPushNotification = 42
)

// Enum value maps for EDPCPushNotification.
var (
	EDPCPushNotification_name = map[int32]string{
		1:  "DPC_PUSH_NOTIFICATION_MATCH_STARTING",
		10: "DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM",
		11: "DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM",
		12: "DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM_AS_COACH",
		13: "DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM_AS_COACH",
		20: "DPC_PUSH_NOTIFICATION_LEAGUE_RESULT",
		30: "DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE",
		31: "DPC_PUSH_NOTIFICATION_PREDICTION_RESULT",
		40: "DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED",
		41: "DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY",
		42: "DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS",
	}
	EDPCPushNotification_value = map[string]int32{
		"DPC_PUSH_NOTIFICATION_MATCH_STARTING":               1,
		"DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM":             10,
		"DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM":           11,
		"DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM_AS_COACH":  12,
		"DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM_AS_COACH":    13,
		"DPC_PUSH_NOTIFICATION_LEAGUE_RESULT":                20,
		"DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE": 30,
		"DPC_PUSH_NOTIFICATION_PREDICTION_RESULT":            31,
		"DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED":       40,
		"DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY":        41,
		"DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS":        42,
	}
)

func (x EDPCPushNotification) Enum() *EDPCPushNotification {
	p := new(EDPCPushNotification)
	*p = x
	return p
}

func (x EDPCPushNotification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDPCPushNotification) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[47].Descriptor()
}

func (EDPCPushNotification) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[47]
}

func (x EDPCPushNotification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDPCPushNotification) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDPCPushNotification(num)
	return nil
}

// Deprecated: Use EDPCPushNotification.Descriptor instead.
func (EDPCPushNotification) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{47}
}

type EEventActionScoreMode int32

const (
	EEventActionScoreMode_k_eEventActionScoreMode_Add EEventActionScoreMode = 0
	EEventActionScoreMode_k_eEventActionScoreMode_Min EEventActionScoreMode = 1
)

// Enum value maps for EEventActionScoreMode.
var (
	EEventActionScoreMode_name = map[int32]string{
		0: "k_eEventActionScoreMode_Add",
		1: "k_eEventActionScoreMode_Min",
	}
	EEventActionScoreMode_value = map[string]int32{
		"k_eEventActionScoreMode_Add": 0,
		"k_eEventActionScoreMode_Min": 1,
	}
)

func (x EEventActionScoreMode) Enum() *EEventActionScoreMode {
	p := new(EEventActionScoreMode)
	*p = x
	return p
}

func (x EEventActionScoreMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEventActionScoreMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[48].Descriptor()
}

func (EEventActionScoreMode) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[48]
}

func (x EEventActionScoreMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEventActionScoreMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEventActionScoreMode(num)
	return nil
}

// Deprecated: Use EEventActionScoreMode.Descriptor instead.
func (EEventActionScoreMode) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{48}
}

type EPlayerChallengeHistoryType int32

const (
	EPlayerChallengeHistoryType_k_EPlayerChallengeHistoryType_Invalid                     EPlayerChallengeHistoryType = 0
	EPlayerChallengeHistoryType_k_EPlayerChallengeHistoryType_KillEater                   EPlayerChallengeHistoryType = 1
	EPlayerChallengeHistoryType_k_EPlayerChallengeHistoryType_DotaPlusRelic               EPlayerChallengeHistoryType = 2
	EPlayerChallengeHistoryType_k_EPlayerChallengeHistoryType_DotaPlusHeroPlayerChallenge EPlayerChallengeHistoryType = 3
	EPlayerChallengeHistoryType_k_EPlayerChallengeHistoryType_InGameEventChallenge        EPlayerChallengeHistoryType = 4
	EPlayerChallengeHistoryType_k_EPlayerChallengeHistoryType_GuildContract               EPlayerChallengeHistoryType = 5
)

// Enum value maps for EPlayerChallengeHistoryType.
var (
	EPlayerChallengeHistoryType_name = map[int32]string{
		0: "k_EPlayerChallengeHistoryType_Invalid",
		1: "k_EPlayerChallengeHistoryType_KillEater",
		2: "k_EPlayerChallengeHistoryType_DotaPlusRelic",
		3: "k_EPlayerChallengeHistoryType_DotaPlusHeroPlayerChallenge",
		4: "k_EPlayerChallengeHistoryType_InGameEventChallenge",
		5: "k_EPlayerChallengeHistoryType_GuildContract",
	}
	EPlayerChallengeHistoryType_value = map[string]int32{
		"k_EPlayerChallengeHistoryType_Invalid":                     0,
		"k_EPlayerChallengeHistoryType_KillEater":                   1,
		"k_EPlayerChallengeHistoryType_DotaPlusRelic":               2,
		"k_EPlayerChallengeHistoryType_DotaPlusHeroPlayerChallenge": 3,
		"k_EPlayerChallengeHistoryType_InGameEventChallenge":        4,
		"k_EPlayerChallengeHistoryType_GuildContract":               5,
	}
)

func (x EPlayerChallengeHistoryType) Enum() *EPlayerChallengeHistoryType {
	p := new(EPlayerChallengeHistoryType)
	*p = x
	return p
}

func (x EPlayerChallengeHistoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPlayerChallengeHistoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[49].Descriptor()
}

func (EPlayerChallengeHistoryType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[49]
}

func (x EPlayerChallengeHistoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPlayerChallengeHistoryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPlayerChallengeHistoryType(num)
	return nil
}

// Deprecated: Use EPlayerChallengeHistoryType.Descriptor instead.
func (EPlayerChallengeHistoryType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{49}
}

type EOverwatchReportReason int32

const (
	EOverwatchReportReason_k_EOverwatchReportReason_Unknown      EOverwatchReportReason = 0
	EOverwatchReportReason_k_EOverwatchReportReason_Cheating     EOverwatchReportReason = 1
	EOverwatchReportReason_k_EOverwatchReportReason_Feeding      EOverwatchReportReason = 2
	EOverwatchReportReason_k_EOverwatchReportReason_Griefing     EOverwatchReportReason = 3
	EOverwatchReportReason_k_EOverwatchReportReason_Suspicious   EOverwatchReportReason = 4
	EOverwatchReportReason_k_EOverwatchReportReason_AbilityAbuse EOverwatchReportReason = 5
)

// Enum value maps for EOverwatchReportReason.
var (
	EOverwatchReportReason_name = map[int32]string{
		0: "k_EOverwatchReportReason_Unknown",
		1: "k_EOverwatchReportReason_Cheating",
		2: "k_EOverwatchReportReason_Feeding",
		3: "k_EOverwatchReportReason_Griefing",
		4: "k_EOverwatchReportReason_Suspicious",
		5: "k_EOverwatchReportReason_AbilityAbuse",
	}
	EOverwatchReportReason_value = map[string]int32{
		"k_EOverwatchReportReason_Unknown":      0,
		"k_EOverwatchReportReason_Cheating":     1,
		"k_EOverwatchReportReason_Feeding":      2,
		"k_EOverwatchReportReason_Griefing":     3,
		"k_EOverwatchReportReason_Suspicious":   4,
		"k_EOverwatchReportReason_AbilityAbuse": 5,
	}
)

func (x EOverwatchReportReason) Enum() *EOverwatchReportReason {
	p := new(EOverwatchReportReason)
	*p = x
	return p
}

func (x EOverwatchReportReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOverwatchReportReason) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[50].Descriptor()
}

func (EOverwatchReportReason) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[50]
}

func (x EOverwatchReportReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOverwatchReportReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOverwatchReportReason(num)
	return nil
}

// Deprecated: Use EOverwatchReportReason.Descriptor instead.
func (EOverwatchReportReason) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{50}
}

type ECandyShopUpgrade int32

const (
	ECandyShopUpgrade_k_ECandyShopUpgradeInvalid              ECandyShopUpgrade = -1
	ECandyShopUpgrade_k_ECandyShopUpgrade_InventorySize       ECandyShopUpgrade = 0
	ECandyShopUpgrade_k_ECandyShopUpgrade_RewardShelf         ECandyShopUpgrade = 1
	ECandyShopUpgrade_k_ECandyShopUpgrade_ExtraExchangeRecipe ECandyShopUpgrade = 2
)

// Enum value maps for ECandyShopUpgrade.
var (
	ECandyShopUpgrade_name = map[int32]string{
		-1: "k_ECandyShopUpgradeInvalid",
		0:  "k_ECandyShopUpgrade_InventorySize",
		1:  "k_ECandyShopUpgrade_RewardShelf",
		2:  "k_ECandyShopUpgrade_ExtraExchangeRecipe",
	}
	ECandyShopUpgrade_value = map[string]int32{
		"k_ECandyShopUpgradeInvalid":              -1,
		"k_ECandyShopUpgrade_InventorySize":       0,
		"k_ECandyShopUpgrade_RewardShelf":         1,
		"k_ECandyShopUpgrade_ExtraExchangeRecipe": 2,
	}
)

func (x ECandyShopUpgrade) Enum() *ECandyShopUpgrade {
	p := new(ECandyShopUpgrade)
	*p = x
	return p
}

func (x ECandyShopUpgrade) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECandyShopUpgrade) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[51].Descriptor()
}

func (ECandyShopUpgrade) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[51]
}

func (x ECandyShopUpgrade) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECandyShopUpgrade) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECandyShopUpgrade(num)
	return nil
}

// Deprecated: Use ECandyShopUpgrade.Descriptor instead.
func (ECandyShopUpgrade) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{51}
}

type EItemSuggestPreference int32

const (
	EItemSuggestPreference_k_EItemSuggestPreference_None     EItemSuggestPreference = 0
	EItemSuggestPreference_k_EItemSuggestPreference_Liked    EItemSuggestPreference = 1
	EItemSuggestPreference_k_EItemSuggestPreference_Disliked EItemSuggestPreference = 2
)

// Enum value maps for EItemSuggestPreference.
var (
	EItemSuggestPreference_name = map[int32]string{
		0: "k_EItemSuggestPreference_None",
		1: "k_EItemSuggestPreference_Liked",
		2: "k_EItemSuggestPreference_Disliked",
	}
	EItemSuggestPreference_value = map[string]int32{
		"k_EItemSuggestPreference_None":     0,
		"k_EItemSuggestPreference_Liked":    1,
		"k_EItemSuggestPreference_Disliked": 2,
	}
)

func (x EItemSuggestPreference) Enum() *EItemSuggestPreference {
	p := new(EItemSuggestPreference)
	*p = x
	return p
}

func (x EItemSuggestPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemSuggestPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[52].Descriptor()
}

func (EItemSuggestPreference) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[52]
}

func (x EItemSuggestPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EItemSuggestPreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EItemSuggestPreference(num)
	return nil
}

// Deprecated: Use EItemSuggestPreference.Descriptor instead.
func (EItemSuggestPreference) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{52}
}

type ETimerAlertType int32

const (
	ETimerAlertType_k_TimerAlertType_PowerRune    ETimerAlertType = 1
	ETimerAlertType_k_TimerAlertType_BountyRune   ETimerAlertType = 2
	ETimerAlertType_k_TimerAlertType_WisdomShrine ETimerAlertType = 3
	ETimerAlertType_k_TimerAlertType_JungleCamps  ETimerAlertType = 4
	ETimerAlertType_k_TimerAlertType_LotusPool    ETimerAlertType = 5
)

// Enum value maps for ETimerAlertType.
var (
	ETimerAlertType_name = map[int32]string{
		1: "k_TimerAlertType_PowerRune",
		2: "k_TimerAlertType_BountyRune",
		3: "k_TimerAlertType_WisdomShrine",
		4: "k_TimerAlertType_JungleCamps",
		5: "k_TimerAlertType_LotusPool",
	}
	ETimerAlertType_value = map[string]int32{
		"k_TimerAlertType_PowerRune":    1,
		"k_TimerAlertType_BountyRune":   2,
		"k_TimerAlertType_WisdomShrine": 3,
		"k_TimerAlertType_JungleCamps":  4,
		"k_TimerAlertType_LotusPool":    5,
	}
)

func (x ETimerAlertType) Enum() *ETimerAlertType {
	p := new(ETimerAlertType)
	*p = x
	return p
}

func (x ETimerAlertType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETimerAlertType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_shared_enums_proto_enumTypes[53].Descriptor()
}

func (ETimerAlertType) Type() protoreflect.EnumType {
	return &file_dota_shared_enums_proto_enumTypes[53]
}

func (x ETimerAlertType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETimerAlertType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETimerAlertType(num)
	return nil
}

// Deprecated: Use ETimerAlertType.Descriptor instead.
func (ETimerAlertType) EnumDescriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{53}
}

type CDOTAClientHardwareSpecs struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	LogicalProcessors   *uint32                `protobuf:"varint,1,opt,name=logical_processors,json=logicalProcessors" json:"logical_processors,omitempty"`
	CpuCyclesPerSecond  *uint64                `protobuf:"fixed64,2,opt,name=cpu_cycles_per_second,json=cpuCyclesPerSecond" json:"cpu_cycles_per_second,omitempty"`
	TotalPhysicalMemory *uint64                `protobuf:"fixed64,3,opt,name=total_physical_memory,json=totalPhysicalMemory" json:"total_physical_memory,omitempty"`
	Is_64BitOs          *bool                  `protobuf:"varint,4,opt,name=is_64_bit_os,json=is64BitOs" json:"is_64_bit_os,omitempty"`
	UploadMeasurement   *uint64                `protobuf:"varint,5,opt,name=upload_measurement,json=uploadMeasurement" json:"upload_measurement,omitempty"`
	PreferNotHost       *bool                  `protobuf:"varint,6,opt,name=prefer_not_host,json=preferNotHost" json:"prefer_not_host,omitempty"`
	Crc                 []uint32               `protobuf:"varint,7,rep,name=crc" json:"crc,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CDOTAClientHardwareSpecs) Reset() {
	*x = CDOTAClientHardwareSpecs{}
	mi := &file_dota_shared_enums_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTAClientHardwareSpecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientHardwareSpecs) ProtoMessage() {}

func (x *CDOTAClientHardwareSpecs) ProtoReflect() protoreflect.Message {
	mi := &file_dota_shared_enums_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientHardwareSpecs.ProtoReflect.Descriptor instead.
func (*CDOTAClientHardwareSpecs) Descriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{0}
}

func (x *CDOTAClientHardwareSpecs) GetLogicalProcessors() uint32 {
	if x != nil && x.LogicalProcessors != nil {
		return *x.LogicalProcessors
	}
	return 0
}

func (x *CDOTAClientHardwareSpecs) GetCpuCyclesPerSecond() uint64 {
	if x != nil && x.CpuCyclesPerSecond != nil {
		return *x.CpuCyclesPerSecond
	}
	return 0
}

func (x *CDOTAClientHardwareSpecs) GetTotalPhysicalMemory() uint64 {
	if x != nil && x.TotalPhysicalMemory != nil {
		return *x.TotalPhysicalMemory
	}
	return 0
}

func (x *CDOTAClientHardwareSpecs) GetIs_64BitOs() bool {
	if x != nil && x.Is_64BitOs != nil {
		return *x.Is_64BitOs
	}
	return false
}

func (x *CDOTAClientHardwareSpecs) GetUploadMeasurement() uint64 {
	if x != nil && x.UploadMeasurement != nil {
		return *x.UploadMeasurement
	}
	return 0
}

func (x *CDOTAClientHardwareSpecs) GetPreferNotHost() bool {
	if x != nil && x.PreferNotHost != nil {
		return *x.PreferNotHost
	}
	return false
}

func (x *CDOTAClientHardwareSpecs) GetCrc() []uint32 {
	if x != nil {
		return x.Crc
	}
	return nil
}

type CDOTASaveGame struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	MatchId       *uint64                       `protobuf:"varint,5,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	SaveTime      *uint32                       `protobuf:"varint,2,opt,name=save_time,json=saveTime" json:"save_time,omitempty"`
	Players       []*CDOTASaveGame_Player       `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	SaveInstances []*CDOTASaveGame_SaveInstance `protobuf:"bytes,4,rep,name=save_instances,json=saveInstances" json:"save_instances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTASaveGame) Reset() {
	*x = CDOTASaveGame{}
	mi := &file_dota_shared_enums_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTASaveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTASaveGame) ProtoMessage() {}

func (x *CDOTASaveGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_shared_enums_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTASaveGame.ProtoReflect.Descriptor instead.
func (*CDOTASaveGame) Descriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{1}
}

func (x *CDOTASaveGame) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CDOTASaveGame) GetSaveTime() uint32 {
	if x != nil && x.SaveTime != nil {
		return *x.SaveTime
	}
	return 0
}

func (x *CDOTASaveGame) GetPlayers() []*CDOTASaveGame_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CDOTASaveGame) GetSaveInstances() []*CDOTASaveGame_SaveInstance {
	if x != nil {
		return x.SaveInstances
	}
	return nil
}

type CMsgDOTACombatLogEntry struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Type                     *DOTA_COMBATLOG_TYPES  `protobuf:"varint,1,opt,name=type,enum=protocol.DOTA_COMBATLOG_TYPES,def=-1" json:"type,omitempty"`
	TargetName               *uint32                `protobuf:"varint,2,opt,name=target_name,json=targetName" json:"target_name,omitempty"`
	TargetSourceName         *uint32                `protobuf:"varint,3,opt,name=target_source_name,json=targetSourceName" json:"target_source_name,omitempty"`
	AttackerName             *uint32                `protobuf:"varint,4,opt,name=attacker_name,json=attackerName" json:"attacker_name,omitempty"`
	DamageSourceName         *uint32                `protobuf:"varint,5,opt,name=damage_source_name,json=damageSourceName" json:"damage_source_name,omitempty"`
	InflictorName            *uint32                `protobuf:"varint,6,opt,name=inflictor_name,json=inflictorName" json:"inflictor_name,omitempty"`
	IsAttackerIllusion       *bool                  `protobuf:"varint,7,opt,name=is_attacker_illusion,json=isAttackerIllusion" json:"is_attacker_illusion,omitempty"`
	IsAttackerHero           *bool                  `protobuf:"varint,8,opt,name=is_attacker_hero,json=isAttackerHero" json:"is_attacker_hero,omitempty"`
	IsTargetIllusion         *bool                  `protobuf:"varint,9,opt,name=is_target_illusion,json=isTargetIllusion" json:"is_target_illusion,omitempty"`
	IsTargetHero             *bool                  `protobuf:"varint,10,opt,name=is_target_hero,json=isTargetHero" json:"is_target_hero,omitempty"`
	IsVisibleRadiant         *bool                  `protobuf:"varint,11,opt,name=is_visible_radiant,json=isVisibleRadiant" json:"is_visible_radiant,omitempty"`
	IsVisibleDire            *bool                  `protobuf:"varint,12,opt,name=is_visible_dire,json=isVisibleDire" json:"is_visible_dire,omitempty"`
	Value                    *uint32                `protobuf:"varint,13,opt,name=value" json:"value,omitempty"`
	Health                   *int32                 `protobuf:"varint,14,opt,name=health" json:"health,omitempty"`
	Timestamp                *float32               `protobuf:"fixed32,15,opt,name=timestamp" json:"timestamp,omitempty"`
	StunDuration             *float32               `protobuf:"fixed32,16,opt,name=stun_duration,json=stunDuration" json:"stun_duration,omitempty"`
	SlowDuration             *float32               `protobuf:"fixed32,17,opt,name=slow_duration,json=slowDuration" json:"slow_duration,omitempty"`
	IsAbilityToggleOn        *bool                  `protobuf:"varint,18,opt,name=is_ability_toggle_on,json=isAbilityToggleOn" json:"is_ability_toggle_on,omitempty"`
	IsAbilityToggleOff       *bool                  `protobuf:"varint,19,opt,name=is_ability_toggle_off,json=isAbilityToggleOff" json:"is_ability_toggle_off,omitempty"`
	AbilityLevel             *uint32                `protobuf:"varint,20,opt,name=ability_level,json=abilityLevel" json:"ability_level,omitempty"`
	LocationX                *float32               `protobuf:"fixed32,21,opt,name=location_x,json=locationX" json:"location_x,omitempty"`
	LocationY                *float32               `protobuf:"fixed32,22,opt,name=location_y,json=locationY" json:"location_y,omitempty"`
	GoldReason               *uint32                `protobuf:"varint,23,opt,name=gold_reason,json=goldReason" json:"gold_reason,omitempty"`
	TimestampRaw             *float32               `protobuf:"fixed32,24,opt,name=timestamp_raw,json=timestampRaw" json:"timestamp_raw,omitempty"`
	ModifierDuration         *float32               `protobuf:"fixed32,25,opt,name=modifier_duration,json=modifierDuration" json:"modifier_duration,omitempty"`
	XpReason                 *uint32                `protobuf:"varint,26,opt,name=xp_reason,json=xpReason" json:"xp_reason,omitempty"`
	LastHits                 *uint32                `protobuf:"varint,27,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	AttackerTeam             *uint32                `protobuf:"varint,28,opt,name=attacker_team,json=attackerTeam" json:"attacker_team,omitempty"`
	TargetTeam               *uint32                `protobuf:"varint,29,opt,name=target_team,json=targetTeam" json:"target_team,omitempty"`
	ObsWardsPlaced           *uint32                `protobuf:"varint,30,opt,name=obs_wards_placed,json=obsWardsPlaced" json:"obs_wards_placed,omitempty"`
	AssistPlayer0            *uint32                `protobuf:"varint,31,opt,name=assist_player0,json=assistPlayer0" json:"assist_player0,omitempty"`
	AssistPlayer1            *uint32                `protobuf:"varint,32,opt,name=assist_player1,json=assistPlayer1" json:"assist_player1,omitempty"`
	AssistPlayer2            *uint32                `protobuf:"varint,33,opt,name=assist_player2,json=assistPlayer2" json:"assist_player2,omitempty"`
	AssistPlayer3            *uint32                `protobuf:"varint,34,opt,name=assist_player3,json=assistPlayer3" json:"assist_player3,omitempty"`
	StackCount               *uint32                `protobuf:"varint,35,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
	HiddenModifier           *bool                  `protobuf:"varint,36,opt,name=hidden_modifier,json=hiddenModifier" json:"hidden_modifier,omitempty"`
	IsTargetBuilding         *bool                  `protobuf:"varint,37,opt,name=is_target_building,json=isTargetBuilding" json:"is_target_building,omitempty"`
	NeutralCampType          *uint32                `protobuf:"varint,38,opt,name=neutral_camp_type,json=neutralCampType" json:"neutral_camp_type,omitempty"`
	RuneType                 *uint32                `protobuf:"varint,39,opt,name=rune_type,json=runeType" json:"rune_type,omitempty"`
	AssistPlayers            []int32                `protobuf:"varint,40,rep,name=assist_players,json=assistPlayers" json:"assist_players,omitempty"`
	IsHealSave               *bool                  `protobuf:"varint,41,opt,name=is_heal_save,json=isHealSave" json:"is_heal_save,omitempty"`
	IsUltimateAbility        *bool                  `protobuf:"varint,42,opt,name=is_ultimate_ability,json=isUltimateAbility" json:"is_ultimate_ability,omitempty"`
	AttackerHeroLevel        *uint32                `protobuf:"varint,43,opt,name=attacker_hero_level,json=attackerHeroLevel" json:"attacker_hero_level,omitempty"`
	TargetHeroLevel          *uint32                `protobuf:"varint,44,opt,name=target_hero_level,json=targetHeroLevel" json:"target_hero_level,omitempty"`
	Xpm                      *uint32                `protobuf:"varint,45,opt,name=xpm" json:"xpm,omitempty"`
	Gpm                      *uint32                `protobuf:"varint,46,opt,name=gpm" json:"gpm,omitempty"`
	EventLocation            *uint32                `protobuf:"varint,47,opt,name=event_location,json=eventLocation" json:"event_location,omitempty"`
	TargetIsSelf             *bool                  `protobuf:"varint,48,opt,name=target_is_self,json=targetIsSelf" json:"target_is_self,omitempty"`
	DamageType               *uint32                `protobuf:"varint,49,opt,name=damage_type,json=damageType" json:"damage_type,omitempty"`
	InvisibilityModifier     *bool                  `protobuf:"varint,50,opt,name=invisibility_modifier,json=invisibilityModifier" json:"invisibility_modifier,omitempty"`
	DamageCategory           *uint32                `protobuf:"varint,51,opt,name=damage_category,json=damageCategory" json:"damage_category,omitempty"`
	Networth                 *uint32                `protobuf:"varint,52,opt,name=networth" json:"networth,omitempty"`
	BuildingType             *uint32                `protobuf:"varint,53,opt,name=building_type,json=buildingType" json:"building_type,omitempty"`
	ModifierElapsedDuration  *float32               `protobuf:"fixed32,54,opt,name=modifier_elapsed_duration,json=modifierElapsedDuration" json:"modifier_elapsed_duration,omitempty"`
	SilenceModifier          *bool                  `protobuf:"varint,55,opt,name=silence_modifier,json=silenceModifier" json:"silence_modifier,omitempty"`
	HealFromLifesteal        *bool                  `protobuf:"varint,56,opt,name=heal_from_lifesteal,json=healFromLifesteal" json:"heal_from_lifesteal,omitempty"`
	ModifierPurged           *bool                  `protobuf:"varint,57,opt,name=modifier_purged,json=modifierPurged" json:"modifier_purged,omitempty"`
	SpellEvaded              *bool                  `protobuf:"varint,58,opt,name=spell_evaded,json=spellEvaded" json:"spell_evaded,omitempty"`
	MotionControllerModifier *bool                  `protobuf:"varint,59,opt,name=motion_controller_modifier,json=motionControllerModifier" json:"motion_controller_modifier,omitempty"`
	LongRangeKill            *bool                  `protobuf:"varint,60,opt,name=long_range_kill,json=longRangeKill" json:"long_range_kill,omitempty"`
	ModifierPurgeAbility     *uint32                `protobuf:"varint,61,opt,name=modifier_purge_ability,json=modifierPurgeAbility" json:"modifier_purge_ability,omitempty"`
	ModifierPurgeNpc         *uint32                `protobuf:"varint,62,opt,name=modifier_purge_npc,json=modifierPurgeNpc" json:"modifier_purge_npc,omitempty"`
	RootModifier             *bool                  `protobuf:"varint,63,opt,name=root_modifier,json=rootModifier" json:"root_modifier,omitempty"`
	TotalUnitDeathCount      *uint32                `protobuf:"varint,64,opt,name=total_unit_death_count,json=totalUnitDeathCount" json:"total_unit_death_count,omitempty"`
	AuraModifier             *bool                  `protobuf:"varint,65,opt,name=aura_modifier,json=auraModifier" json:"aura_modifier,omitempty"`
	ArmorDebuffModifier      *bool                  `protobuf:"varint,66,opt,name=armor_debuff_modifier,json=armorDebuffModifier" json:"armor_debuff_modifier,omitempty"`
	NoPhysicalDamageModifier *bool                  `protobuf:"varint,67,opt,name=no_physical_damage_modifier,json=noPhysicalDamageModifier" json:"no_physical_damage_modifier,omitempty"`
	ModifierAbility          *uint32                `protobuf:"varint,68,opt,name=modifier_ability,json=modifierAbility" json:"modifier_ability,omitempty"`
	ModifierHidden           *bool                  `protobuf:"varint,69,opt,name=modifier_hidden,json=modifierHidden" json:"modifier_hidden,omitempty"`
	InflictorIsStolenAbility *bool                  `protobuf:"varint,70,opt,name=inflictor_is_stolen_ability,json=inflictorIsStolenAbility" json:"inflictor_is_stolen_ability,omitempty"`
	KillEaterEvent           *uint32                `protobuf:"varint,71,opt,name=kill_eater_event,json=killEaterEvent" json:"kill_eater_event,omitempty"`
	UnitStatusLabel          *uint32                `protobuf:"varint,72,opt,name=unit_status_label,json=unitStatusLabel" json:"unit_status_label,omitempty"`
	SpellGeneratedAttack     *bool                  `protobuf:"varint,73,opt,name=spell_generated_attack,json=spellGeneratedAttack" json:"spell_generated_attack,omitempty"`
	AtNightTime              *bool                  `protobuf:"varint,74,opt,name=at_night_time,json=atNightTime" json:"at_night_time,omitempty"`
	AttackerHasScepter       *bool                  `protobuf:"varint,75,opt,name=attacker_has_scepter,json=attackerHasScepter" json:"attacker_has_scepter,omitempty"`
	NeutralCampTeam          *uint32                `protobuf:"varint,76,opt,name=neutral_camp_team,json=neutralCampTeam" json:"neutral_camp_team,omitempty"`
	RegeneratedHealth        *float32               `protobuf:"fixed32,77,opt,name=regenerated_health,json=regeneratedHealth" json:"regenerated_health,omitempty"`
	WillReincarnate          *bool                  `protobuf:"varint,78,opt,name=will_reincarnate,json=willReincarnate" json:"will_reincarnate,omitempty"`
	UsesCharges              *bool                  `protobuf:"varint,79,opt,name=uses_charges,json=usesCharges" json:"uses_charges,omitempty"`
	TrackedStatId            *uint32                `protobuf:"varint,80,opt,name=tracked_stat_id,json=trackedStatId" json:"tracked_stat_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for CMsgDOTACombatLogEntry fields.
const (
	Default_CMsgDOTACombatLogEntry_Type = DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_INVALID
)

func (x *CMsgDOTACombatLogEntry) Reset() {
	*x = CMsgDOTACombatLogEntry{}
	mi := &file_dota_shared_enums_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACombatLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACombatLogEntry) ProtoMessage() {}

func (x *CMsgDOTACombatLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_shared_enums_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACombatLogEntry.ProtoReflect.Descriptor instead.
func (*CMsgDOTACombatLogEntry) Descriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgDOTACombatLogEntry) GetType() DOTA_COMBATLOG_TYPES {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgDOTACombatLogEntry_Type
}

func (x *CMsgDOTACombatLogEntry) GetTargetName() uint32 {
	if x != nil && x.TargetName != nil {
		return *x.TargetName
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetTargetSourceName() uint32 {
	if x != nil && x.TargetSourceName != nil {
		return *x.TargetSourceName
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetAttackerName() uint32 {
	if x != nil && x.AttackerName != nil {
		return *x.AttackerName
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetDamageSourceName() uint32 {
	if x != nil && x.DamageSourceName != nil {
		return *x.DamageSourceName
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetInflictorName() uint32 {
	if x != nil && x.InflictorName != nil {
		return *x.InflictorName
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetIsAttackerIllusion() bool {
	if x != nil && x.IsAttackerIllusion != nil {
		return *x.IsAttackerIllusion
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetIsAttackerHero() bool {
	if x != nil && x.IsAttackerHero != nil {
		return *x.IsAttackerHero
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetIsTargetIllusion() bool {
	if x != nil && x.IsTargetIllusion != nil {
		return *x.IsTargetIllusion
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetIsTargetHero() bool {
	if x != nil && x.IsTargetHero != nil {
		return *x.IsTargetHero
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetIsVisibleRadiant() bool {
	if x != nil && x.IsVisibleRadiant != nil {
		return *x.IsVisibleRadiant
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetIsVisibleDire() bool {
	if x != nil && x.IsVisibleDire != nil {
		return *x.IsVisibleDire
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetHealth() int32 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetTimestamp() float32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetStunDuration() float32 {
	if x != nil && x.StunDuration != nil {
		return *x.StunDuration
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetSlowDuration() float32 {
	if x != nil && x.SlowDuration != nil {
		return *x.SlowDuration
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetIsAbilityToggleOn() bool {
	if x != nil && x.IsAbilityToggleOn != nil {
		return *x.IsAbilityToggleOn
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetIsAbilityToggleOff() bool {
	if x != nil && x.IsAbilityToggleOff != nil {
		return *x.IsAbilityToggleOff
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetAbilityLevel() uint32 {
	if x != nil && x.AbilityLevel != nil {
		return *x.AbilityLevel
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetLocationX() float32 {
	if x != nil && x.LocationX != nil {
		return *x.LocationX
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetLocationY() float32 {
	if x != nil && x.LocationY != nil {
		return *x.LocationY
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetGoldReason() uint32 {
	if x != nil && x.GoldReason != nil {
		return *x.GoldReason
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetTimestampRaw() float32 {
	if x != nil && x.TimestampRaw != nil {
		return *x.TimestampRaw
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetModifierDuration() float32 {
	if x != nil && x.ModifierDuration != nil {
		return *x.ModifierDuration
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetXpReason() uint32 {
	if x != nil && x.XpReason != nil {
		return *x.XpReason
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetAttackerTeam() uint32 {
	if x != nil && x.AttackerTeam != nil {
		return *x.AttackerTeam
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetTargetTeam() uint32 {
	if x != nil && x.TargetTeam != nil {
		return *x.TargetTeam
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetObsWardsPlaced() uint32 {
	if x != nil && x.ObsWardsPlaced != nil {
		return *x.ObsWardsPlaced
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetAssistPlayer0() uint32 {
	if x != nil && x.AssistPlayer0 != nil {
		return *x.AssistPlayer0
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetAssistPlayer1() uint32 {
	if x != nil && x.AssistPlayer1 != nil {
		return *x.AssistPlayer1
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetAssistPlayer2() uint32 {
	if x != nil && x.AssistPlayer2 != nil {
		return *x.AssistPlayer2
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetAssistPlayer3() uint32 {
	if x != nil && x.AssistPlayer3 != nil {
		return *x.AssistPlayer3
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetStackCount() uint32 {
	if x != nil && x.StackCount != nil {
		return *x.StackCount
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetHiddenModifier() bool {
	if x != nil && x.HiddenModifier != nil {
		return *x.HiddenModifier
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetIsTargetBuilding() bool {
	if x != nil && x.IsTargetBuilding != nil {
		return *x.IsTargetBuilding
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetNeutralCampType() uint32 {
	if x != nil && x.NeutralCampType != nil {
		return *x.NeutralCampType
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetRuneType() uint32 {
	if x != nil && x.RuneType != nil {
		return *x.RuneType
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetAssistPlayers() []int32 {
	if x != nil {
		return x.AssistPlayers
	}
	return nil
}

func (x *CMsgDOTACombatLogEntry) GetIsHealSave() bool {
	if x != nil && x.IsHealSave != nil {
		return *x.IsHealSave
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetIsUltimateAbility() bool {
	if x != nil && x.IsUltimateAbility != nil {
		return *x.IsUltimateAbility
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetAttackerHeroLevel() uint32 {
	if x != nil && x.AttackerHeroLevel != nil {
		return *x.AttackerHeroLevel
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetTargetHeroLevel() uint32 {
	if x != nil && x.TargetHeroLevel != nil {
		return *x.TargetHeroLevel
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetXpm() uint32 {
	if x != nil && x.Xpm != nil {
		return *x.Xpm
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetGpm() uint32 {
	if x != nil && x.Gpm != nil {
		return *x.Gpm
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetEventLocation() uint32 {
	if x != nil && x.EventLocation != nil {
		return *x.EventLocation
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetTargetIsSelf() bool {
	if x != nil && x.TargetIsSelf != nil {
		return *x.TargetIsSelf
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetDamageType() uint32 {
	if x != nil && x.DamageType != nil {
		return *x.DamageType
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetInvisibilityModifier() bool {
	if x != nil && x.InvisibilityModifier != nil {
		return *x.InvisibilityModifier
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetDamageCategory() uint32 {
	if x != nil && x.DamageCategory != nil {
		return *x.DamageCategory
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetNetworth() uint32 {
	if x != nil && x.Networth != nil {
		return *x.Networth
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetBuildingType() uint32 {
	if x != nil && x.BuildingType != nil {
		return *x.BuildingType
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetModifierElapsedDuration() float32 {
	if x != nil && x.ModifierElapsedDuration != nil {
		return *x.ModifierElapsedDuration
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetSilenceModifier() bool {
	if x != nil && x.SilenceModifier != nil {
		return *x.SilenceModifier
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetHealFromLifesteal() bool {
	if x != nil && x.HealFromLifesteal != nil {
		return *x.HealFromLifesteal
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetModifierPurged() bool {
	if x != nil && x.ModifierPurged != nil {
		return *x.ModifierPurged
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetSpellEvaded() bool {
	if x != nil && x.SpellEvaded != nil {
		return *x.SpellEvaded
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetMotionControllerModifier() bool {
	if x != nil && x.MotionControllerModifier != nil {
		return *x.MotionControllerModifier
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetLongRangeKill() bool {
	if x != nil && x.LongRangeKill != nil {
		return *x.LongRangeKill
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetModifierPurgeAbility() uint32 {
	if x != nil && x.ModifierPurgeAbility != nil {
		return *x.ModifierPurgeAbility
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetModifierPurgeNpc() uint32 {
	if x != nil && x.ModifierPurgeNpc != nil {
		return *x.ModifierPurgeNpc
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetRootModifier() bool {
	if x != nil && x.RootModifier != nil {
		return *x.RootModifier
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetTotalUnitDeathCount() uint32 {
	if x != nil && x.TotalUnitDeathCount != nil {
		return *x.TotalUnitDeathCount
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetAuraModifier() bool {
	if x != nil && x.AuraModifier != nil {
		return *x.AuraModifier
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetArmorDebuffModifier() bool {
	if x != nil && x.ArmorDebuffModifier != nil {
		return *x.ArmorDebuffModifier
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetNoPhysicalDamageModifier() bool {
	if x != nil && x.NoPhysicalDamageModifier != nil {
		return *x.NoPhysicalDamageModifier
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetModifierAbility() uint32 {
	if x != nil && x.ModifierAbility != nil {
		return *x.ModifierAbility
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetModifierHidden() bool {
	if x != nil && x.ModifierHidden != nil {
		return *x.ModifierHidden
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetInflictorIsStolenAbility() bool {
	if x != nil && x.InflictorIsStolenAbility != nil {
		return *x.InflictorIsStolenAbility
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetKillEaterEvent() uint32 {
	if x != nil && x.KillEaterEvent != nil {
		return *x.KillEaterEvent
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetUnitStatusLabel() uint32 {
	if x != nil && x.UnitStatusLabel != nil {
		return *x.UnitStatusLabel
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetSpellGeneratedAttack() bool {
	if x != nil && x.SpellGeneratedAttack != nil {
		return *x.SpellGeneratedAttack
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetAtNightTime() bool {
	if x != nil && x.AtNightTime != nil {
		return *x.AtNightTime
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetAttackerHasScepter() bool {
	if x != nil && x.AttackerHasScepter != nil {
		return *x.AttackerHasScepter
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetNeutralCampTeam() uint32 {
	if x != nil && x.NeutralCampTeam != nil {
		return *x.NeutralCampTeam
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetRegeneratedHealth() float32 {
	if x != nil && x.RegeneratedHealth != nil {
		return *x.RegeneratedHealth
	}
	return 0
}

func (x *CMsgDOTACombatLogEntry) GetWillReincarnate() bool {
	if x != nil && x.WillReincarnate != nil {
		return *x.WillReincarnate
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetUsesCharges() bool {
	if x != nil && x.UsesCharges != nil {
		return *x.UsesCharges
	}
	return false
}

func (x *CMsgDOTACombatLogEntry) GetTrackedStatId() uint32 {
	if x != nil && x.TrackedStatId != nil {
		return *x.TrackedStatId
	}
	return 0
}

type CMsgPendingEventAward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	ActionId      *uint32                `protobuf:"varint,2,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	NumToGrant    *uint32                `protobuf:"varint,3,opt,name=num_to_grant,json=numToGrant" json:"num_to_grant,omitempty"`
	ScoreMode     *EEventActionScoreMode `protobuf:"varint,4,opt,name=score_mode,json=scoreMode,enum=protocol.EEventActionScoreMode,def=0" json:"score_mode,omitempty"`
	AuditAction   *uint32                `protobuf:"varint,5,opt,name=audit_action,json=auditAction" json:"audit_action,omitempty"`
	AuditData     *uint64                `protobuf:"varint,6,opt,name=audit_data,json=auditData" json:"audit_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgPendingEventAward fields.
const (
	Default_CMsgPendingEventAward_EventId   = EEvent_EVENT_ID_NONE
	Default_CMsgPendingEventAward_ScoreMode = EEventActionScoreMode_k_eEventActionScoreMode_Add
)

func (x *CMsgPendingEventAward) Reset() {
	*x = CMsgPendingEventAward{}
	mi := &file_dota_shared_enums_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPendingEventAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPendingEventAward) ProtoMessage() {}

func (x *CMsgPendingEventAward) ProtoReflect() protoreflect.Message {
	mi := &file_dota_shared_enums_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPendingEventAward.ProtoReflect.Descriptor instead.
func (*CMsgPendingEventAward) Descriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgPendingEventAward) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgPendingEventAward_EventId
}

func (x *CMsgPendingEventAward) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgPendingEventAward) GetNumToGrant() uint32 {
	if x != nil && x.NumToGrant != nil {
		return *x.NumToGrant
	}
	return 0
}

func (x *CMsgPendingEventAward) GetScoreMode() EEventActionScoreMode {
	if x != nil && x.ScoreMode != nil {
		return *x.ScoreMode
	}
	return Default_CMsgPendingEventAward_ScoreMode
}

func (x *CMsgPendingEventAward) GetAuditAction() uint32 {
	if x != nil && x.AuditAction != nil {
		return *x.AuditAction
	}
	return 0
}

func (x *CMsgPendingEventAward) GetAuditData() uint64 {
	if x != nil && x.AuditData != nil {
		return *x.AuditData
	}
	return 0
}

type CDOTASaveGame_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Team          *DOTA_GC_TEAM          `protobuf:"varint,1,opt,name=team,enum=protocol.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Hero          *string                `protobuf:"bytes,3,opt,name=hero" json:"hero,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CDOTASaveGame_Player fields.
const (
	Default_CDOTASaveGame_Player_Team = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
)

func (x *CDOTASaveGame_Player) Reset() {
	*x = CDOTASaveGame_Player{}
	mi := &file_dota_shared_enums_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTASaveGame_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTASaveGame_Player) ProtoMessage() {}

func (x *CDOTASaveGame_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_shared_enums_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTASaveGame_Player.ProtoReflect.Descriptor instead.
func (*CDOTASaveGame_Player) Descriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CDOTASaveGame_Player) GetTeam() DOTA_GC_TEAM {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CDOTASaveGame_Player_Team
}

func (x *CDOTASaveGame_Player) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CDOTASaveGame_Player) GetHero() string {
	if x != nil && x.Hero != nil {
		return *x.Hero
	}
	return ""
}

type CDOTASaveGame_SaveInstance struct {
	state           protoimpl.MessageState                        `protogen:"open.v1"`
	GameTime        *uint32                                       `protobuf:"varint,2,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Team1Score      *uint32                                       `protobuf:"varint,3,opt,name=team1_score,json=team1Score" json:"team1_score,omitempty"`
	Team2Score      *uint32                                       `protobuf:"varint,4,opt,name=team2_score,json=team2Score" json:"team2_score,omitempty"`
	PlayerPositions []*CDOTASaveGame_SaveInstance_PlayerPositions `protobuf:"bytes,5,rep,name=player_positions,json=playerPositions" json:"player_positions,omitempty"`
	SaveId          *uint32                                       `protobuf:"varint,6,opt,name=save_id,json=saveId" json:"save_id,omitempty"`
	SaveTime        *uint32                                       `protobuf:"varint,7,opt,name=save_time,json=saveTime" json:"save_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CDOTASaveGame_SaveInstance) Reset() {
	*x = CDOTASaveGame_SaveInstance{}
	mi := &file_dota_shared_enums_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTASaveGame_SaveInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTASaveGame_SaveInstance) ProtoMessage() {}

func (x *CDOTASaveGame_SaveInstance) ProtoReflect() protoreflect.Message {
	mi := &file_dota_shared_enums_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTASaveGame_SaveInstance.ProtoReflect.Descriptor instead.
func (*CDOTASaveGame_SaveInstance) Descriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CDOTASaveGame_SaveInstance) GetGameTime() uint32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CDOTASaveGame_SaveInstance) GetTeam1Score() uint32 {
	if x != nil && x.Team1Score != nil {
		return *x.Team1Score
	}
	return 0
}

func (x *CDOTASaveGame_SaveInstance) GetTeam2Score() uint32 {
	if x != nil && x.Team2Score != nil {
		return *x.Team2Score
	}
	return 0
}

func (x *CDOTASaveGame_SaveInstance) GetPlayerPositions() []*CDOTASaveGame_SaveInstance_PlayerPositions {
	if x != nil {
		return x.PlayerPositions
	}
	return nil
}

func (x *CDOTASaveGame_SaveInstance) GetSaveId() uint32 {
	if x != nil && x.SaveId != nil {
		return *x.SaveId
	}
	return 0
}

func (x *CDOTASaveGame_SaveInstance) GetSaveTime() uint32 {
	if x != nil && x.SaveTime != nil {
		return *x.SaveTime
	}
	return 0
}

type CDOTASaveGame_SaveInstance_PlayerPositions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDOTASaveGame_SaveInstance_PlayerPositions) Reset() {
	*x = CDOTASaveGame_SaveInstance_PlayerPositions{}
	mi := &file_dota_shared_enums_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDOTASaveGame_SaveInstance_PlayerPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTASaveGame_SaveInstance_PlayerPositions) ProtoMessage() {}

func (x *CDOTASaveGame_SaveInstance_PlayerPositions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_shared_enums_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTASaveGame_SaveInstance_PlayerPositions.ProtoReflect.Descriptor instead.
func (*CDOTASaveGame_SaveInstance_PlayerPositions) Descriptor() ([]byte, []int) {
	return file_dota_shared_enums_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *CDOTASaveGame_SaveInstance_PlayerPositions) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CDOTASaveGame_SaveInstance_PlayerPositions) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

var File_dota_shared_enums_proto protoreflect.FileDescriptor

const file_dota_shared_enums_proto_rawDesc = "" +
	"\n" +
	"\x17dota_shared_enums.proto\x12\bprotocol\"\xba\x02\n" +
	"\x18CDOTAClientHardwareSpecs\x12-\n" +
	"\x12logical_processors\x18\x01 \x01(\rR\x11logicalProcessors\x121\n" +
	"\x15cpu_cycles_per_second\x18\x02 \x01(\x06R\x12cpuCyclesPerSecond\x122\n" +
	"\x15total_physical_memory\x18\x03 \x01(\x06R\x13totalPhysicalMemory\x12\x1f\n" +
	"\fis_64_bit_os\x18\x04 \x01(\bR\tis64BitOs\x12-\n" +
	"\x12upload_measurement\x18\x05 \x01(\x04R\x11uploadMeasurement\x12&\n" +
	"\x0fprefer_not_host\x18\x06 \x01(\bR\rpreferNotHost\x12\x10\n" +
	"\x03crc\x18\a \x03(\rR\x03crc\"\xfa\x04\n" +
	"\rCDOTASaveGame\x12\x19\n" +
	"\bmatch_id\x18\x05 \x01(\x04R\amatchId\x12\x1b\n" +
	"\tsave_time\x18\x02 \x01(\rR\bsaveTime\x128\n" +
	"\aplayers\x18\x03 \x03(\v2\x1e.protocol.CDOTASaveGame.PlayerR\aplayers\x12K\n" +
	"\x0esave_instances\x18\x04 \x03(\v2$.protocol.CDOTASaveGame.SaveInstanceR\rsaveInstances\x1at\n" +
	"\x06Player\x12B\n" +
	"\x04team\x18\x01 \x01(\x0e2\x16.protocol.DOTA_GC_TEAM:\x16DOTA_GC_TEAM_GOOD_GUYSR\x04team\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04hero\x18\x03 \x01(\tR\x04hero\x1a\xb3\x02\n" +
	"\fSaveInstance\x12\x1b\n" +
	"\tgame_time\x18\x02 \x01(\rR\bgameTime\x12\x1f\n" +
	"\vteam1_score\x18\x03 \x01(\rR\n" +
	"team1Score\x12\x1f\n" +
	"\vteam2_score\x18\x04 \x01(\rR\n" +
	"team2Score\x12_\n" +
	"\x10player_positions\x18\x05 \x03(\v24.protocol.CDOTASaveGame.SaveInstance.PlayerPositionsR\x0fplayerPositions\x12\x17\n" +
	"\asave_id\x18\x06 \x01(\rR\x06saveId\x12\x1b\n" +
	"\tsave_time\x18\a \x01(\rR\bsaveTime\x1a-\n" +
	"\x0fPlayerPositions\x12\f\n" +
	"\x01x\x18\x01 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x02R\x01y\"\xf5\x19\n" +
	"\x16CMsgDOTACombatLogEntry\x12J\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1e.protocol.DOTA_COMBATLOG_TYPES:\x16DOTA_COMBATLOG_INVALIDR\x04type\x12\x1f\n" +
	"\vtarget_name\x18\x02 \x01(\rR\n" +
	"targetName\x12,\n" +
	"\x12target_source_name\x18\x03 \x01(\rR\x10targetSourceName\x12#\n" +
	"\rattacker_name\x18\x04 \x01(\rR\fattackerName\x12,\n" +
	"\x12damage_source_name\x18\x05 \x01(\rR\x10damageSourceName\x12%\n" +
	"\x0einflictor_name\x18\x06 \x01(\rR\rinflictorName\x120\n" +
	"\x14is_attacker_illusion\x18\a \x01(\bR\x12isAttackerIllusion\x12(\n" +
	"\x10is_attacker_hero\x18\b \x01(\bR\x0eisAttackerHero\x12,\n" +
	"\x12is_target_illusion\x18\t \x01(\bR\x10isTargetIllusion\x12$\n" +
	"\x0eis_target_hero\x18\n" +
	" \x01(\bR\fisTargetHero\x12,\n" +
	"\x12is_visible_radiant\x18\v \x01(\bR\x10isVisibleRadiant\x12&\n" +
	"\x0fis_visible_dire\x18\f \x01(\bR\risVisibleDire\x12\x14\n" +
	"\x05value\x18\r \x01(\rR\x05value\x12\x16\n" +
	"\x06health\x18\x0e \x01(\x05R\x06health\x12\x1c\n" +
	"\ttimestamp\x18\x0f \x01(\x02R\ttimestamp\x12#\n" +
	"\rstun_duration\x18\x10 \x01(\x02R\fstunDuration\x12#\n" +
	"\rslow_duration\x18\x11 \x01(\x02R\fslowDuration\x12/\n" +
	"\x14is_ability_toggle_on\x18\x12 \x01(\bR\x11isAbilityToggleOn\x121\n" +
	"\x15is_ability_toggle_off\x18\x13 \x01(\bR\x12isAbilityToggleOff\x12#\n" +
	"\rability_level\x18\x14 \x01(\rR\fabilityLevel\x12\x1d\n" +
	"\n" +
	"location_x\x18\x15 \x01(\x02R\tlocationX\x12\x1d\n" +
	"\n" +
	"location_y\x18\x16 \x01(\x02R\tlocationY\x12\x1f\n" +
	"\vgold_reason\x18\x17 \x01(\rR\n" +
	"goldReason\x12#\n" +
	"\rtimestamp_raw\x18\x18 \x01(\x02R\ftimestampRaw\x12+\n" +
	"\x11modifier_duration\x18\x19 \x01(\x02R\x10modifierDuration\x12\x1b\n" +
	"\txp_reason\x18\x1a \x01(\rR\bxpReason\x12\x1b\n" +
	"\tlast_hits\x18\x1b \x01(\rR\blastHits\x12#\n" +
	"\rattacker_team\x18\x1c \x01(\rR\fattackerTeam\x12\x1f\n" +
	"\vtarget_team\x18\x1d \x01(\rR\n" +
	"targetTeam\x12(\n" +
	"\x10obs_wards_placed\x18\x1e \x01(\rR\x0eobsWardsPlaced\x12%\n" +
	"\x0eassist_player0\x18\x1f \x01(\rR\rassistPlayer0\x12%\n" +
	"\x0eassist_player1\x18  \x01(\rR\rassistPlayer1\x12%\n" +
	"\x0eassist_player2\x18! \x01(\rR\rassistPlayer2\x12%\n" +
	"\x0eassist_player3\x18\" \x01(\rR\rassistPlayer3\x12\x1f\n" +
	"\vstack_count\x18# \x01(\rR\n" +
	"stackCount\x12'\n" +
	"\x0fhidden_modifier\x18$ \x01(\bR\x0ehiddenModifier\x12,\n" +
	"\x12is_target_building\x18% \x01(\bR\x10isTargetBuilding\x12*\n" +
	"\x11neutral_camp_type\x18& \x01(\rR\x0fneutralCampType\x12\x1b\n" +
	"\trune_type\x18' \x01(\rR\bruneType\x12%\n" +
	"\x0eassist_players\x18( \x03(\x05R\rassistPlayers\x12 \n" +
	"\fis_heal_save\x18) \x01(\bR\n" +
	"isHealSave\x12.\n" +
	"\x13is_ultimate_ability\x18* \x01(\bR\x11isUltimateAbility\x12.\n" +
	"\x13attacker_hero_level\x18+ \x01(\rR\x11attackerHeroLevel\x12*\n" +
	"\x11target_hero_level\x18, \x01(\rR\x0ftargetHeroLevel\x12\x10\n" +
	"\x03xpm\x18- \x01(\rR\x03xpm\x12\x10\n" +
	"\x03gpm\x18. \x01(\rR\x03gpm\x12%\n" +
	"\x0eevent_location\x18/ \x01(\rR\reventLocation\x12$\n" +
	"\x0etarget_is_self\x180 \x01(\bR\ftargetIsSelf\x12\x1f\n" +
	"\vdamage_type\x181 \x01(\rR\n" +
	"damageType\x123\n" +
	"\x15invisibility_modifier\x182 \x01(\bR\x14invisibilityModifier\x12'\n" +
	"\x0fdamage_category\x183 \x01(\rR\x0edamageCategory\x12\x1a\n" +
	"\bnetworth\x184 \x01(\rR\bnetworth\x12#\n" +
	"\rbuilding_type\x185 \x01(\rR\fbuildingType\x12:\n" +
	"\x19modifier_elapsed_duration\x186 \x01(\x02R\x17modifierElapsedDuration\x12)\n" +
	"\x10silence_modifier\x187 \x01(\bR\x0fsilenceModifier\x12.\n" +
	"\x13heal_from_lifesteal\x188 \x01(\bR\x11healFromLifesteal\x12'\n" +
	"\x0fmodifier_purged\x189 \x01(\bR\x0emodifierPurged\x12!\n" +
	"\fspell_evaded\x18: \x01(\bR\vspellEvaded\x12<\n" +
	"\x1amotion_controller_modifier\x18; \x01(\bR\x18motionControllerModifier\x12&\n" +
	"\x0flong_range_kill\x18< \x01(\bR\rlongRangeKill\x124\n" +
	"\x16modifier_purge_ability\x18= \x01(\rR\x14modifierPurgeAbility\x12,\n" +
	"\x12modifier_purge_npc\x18> \x01(\rR\x10modifierPurgeNpc\x12#\n" +
	"\rroot_modifier\x18? \x01(\bR\frootModifier\x123\n" +
	"\x16total_unit_death_count\x18@ \x01(\rR\x13totalUnitDeathCount\x12#\n" +
	"\raura_modifier\x18A \x01(\bR\fauraModifier\x122\n" +
	"\x15armor_debuff_modifier\x18B \x01(\bR\x13armorDebuffModifier\x12=\n" +
	"\x1bno_physical_damage_modifier\x18C \x01(\bR\x18noPhysicalDamageModifier\x12)\n" +
	"\x10modifier_ability\x18D \x01(\rR\x0fmodifierAbility\x12'\n" +
	"\x0fmodifier_hidden\x18E \x01(\bR\x0emodifierHidden\x12=\n" +
	"\x1binflictor_is_stolen_ability\x18F \x01(\bR\x18inflictorIsStolenAbility\x12(\n" +
	"\x10kill_eater_event\x18G \x01(\rR\x0ekillEaterEvent\x12*\n" +
	"\x11unit_status_label\x18H \x01(\rR\x0funitStatusLabel\x124\n" +
	"\x16spell_generated_attack\x18I \x01(\bR\x14spellGeneratedAttack\x12\"\n" +
	"\rat_night_time\x18J \x01(\bR\vatNightTime\x120\n" +
	"\x14attacker_has_scepter\x18K \x01(\bR\x12attackerHasScepter\x12*\n" +
	"\x11neutral_camp_team\x18L \x01(\rR\x0fneutralCampTeam\x12-\n" +
	"\x12regenerated_health\x18M \x01(\x02R\x11regeneratedHealth\x12)\n" +
	"\x10will_reincarnate\x18N \x01(\bR\x0fwillReincarnate\x12!\n" +
	"\fuses_charges\x18O \x01(\bR\vusesCharges\x12&\n" +
	"\x0ftracked_stat_id\x18P \x01(\rR\rtrackedStatId\"\xb1\x02\n" +
	"\x15CMsgPendingEventAward\x12:\n" +
	"\bevent_id\x18\x01 \x01(\x0e2\x10.protocol.EEvent:\rEVENT_ID_NONER\aeventId\x12\x1b\n" +
	"\taction_id\x18\x02 \x01(\rR\bactionId\x12 \n" +
	"\fnum_to_grant\x18\x03 \x01(\rR\n" +
	"numToGrant\x12[\n" +
	"\n" +
	"score_mode\x18\x04 \x01(\x0e2\x1f.protocol.EEventActionScoreMode:\x1bk_eEventActionScoreMode_AddR\tscoreMode\x12!\n" +
	"\faudit_action\x18\x05 \x01(\rR\vauditAction\x12\x1d\n" +
	"\n" +
	"audit_data\x18\x06 \x01(\x04R\tauditData*\x9a\x05\n" +
	"\rDOTA_GameMode\x12\x16\n" +
	"\x12DOTA_GAMEMODE_NONE\x10\x00\x12\x14\n" +
	"\x10DOTA_GAMEMODE_AP\x10\x01\x12\x14\n" +
	"\x10DOTA_GAMEMODE_CM\x10\x02\x12\x14\n" +
	"\x10DOTA_GAMEMODE_RD\x10\x03\x12\x14\n" +
	"\x10DOTA_GAMEMODE_SD\x10\x04\x12\x14\n" +
	"\x10DOTA_GAMEMODE_AR\x10\x05\x12\x17\n" +
	"\x13DOTA_GAMEMODE_INTRO\x10\x06\x12\x14\n" +
	"\x10DOTA_GAMEMODE_HW\x10\a\x12\x1c\n" +
	"\x18DOTA_GAMEMODE_REVERSE_CM\x10\b\x12\x16\n" +
	"\x12DOTA_GAMEMODE_XMAS\x10\t\x12\x1a\n" +
	"\x16DOTA_GAMEMODE_TUTORIAL\x10\n" +
	"\x12\x14\n" +
	"\x10DOTA_GAMEMODE_MO\x10\v\x12\x14\n" +
	"\x10DOTA_GAMEMODE_LP\x10\f\x12\x17\n" +
	"\x13DOTA_GAMEMODE_POOL1\x10\r\x12\x14\n" +
	"\x10DOTA_GAMEMODE_FH\x10\x0e\x12\x18\n" +
	"\x14DOTA_GAMEMODE_CUSTOM\x10\x0f\x12\x14\n" +
	"\x10DOTA_GAMEMODE_CD\x10\x10\x12\x14\n" +
	"\x10DOTA_GAMEMODE_BD\x10\x11\x12\x1f\n" +
	"\x1bDOTA_GAMEMODE_ABILITY_DRAFT\x10\x12\x12\x17\n" +
	"\x13DOTA_GAMEMODE_EVENT\x10\x13\x12\x16\n" +
	"\x12DOTA_GAMEMODE_ARDM\x10\x14\x12\x18\n" +
	"\x14DOTA_GAMEMODE_1V1MID\x10\x15\x12\x1b\n" +
	"\x17DOTA_GAMEMODE_ALL_DRAFT\x10\x16\x12\x17\n" +
	"\x13DOTA_GAMEMODE_TURBO\x10\x17\x12\x1a\n" +
	"\x16DOTA_GAMEMODE_MUTATION\x10\x18\x12#\n" +
	"\x1fDOTA_GAMEMODE_COACHES_CHALLENGE\x10\x19*\xbc\x04\n" +
	"\x0eDOTA_GameState\x12\x1d\n" +
	"\x19DOTA_GAMERULES_STATE_INIT\x10\x00\x121\n" +
	"-DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD\x10\x01\x12'\n" +
	"#DOTA_GAMERULES_STATE_HERO_SELECTION\x10\x02\x12&\n" +
	"\"DOTA_GAMERULES_STATE_STRATEGY_TIME\x10\x03\x12!\n" +
	"\x1dDOTA_GAMERULES_STATE_PRE_GAME\x10\x04\x12)\n" +
	"%DOTA_GAMERULES_STATE_GAME_IN_PROGRESS\x10\x05\x12\"\n" +
	"\x1eDOTA_GAMERULES_STATE_POST_GAME\x10\x06\x12#\n" +
	"\x1fDOTA_GAMERULES_STATE_DISCONNECT\x10\a\x12&\n" +
	"\"DOTA_GAMERULES_STATE_TEAM_SHOWCASE\x10\b\x12*\n" +
	"&DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP\x10\t\x12-\n" +
	")DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD\x10\n" +
	"\x12'\n" +
	"#DOTA_GAMERULES_STATE_SCENARIO_SETUP\x10\v\x12%\n" +
	"!DOTA_GAMERULES_STATE_PLAYER_DRAFT\x10\f\x12\x1d\n" +
	"\x19DOTA_GAMERULES_STATE_LAST\x10\r*\xa9\x03\n" +
	"\fDOTA_GC_TEAM\x12\x1a\n" +
	"\x16DOTA_GC_TEAM_GOOD_GUYS\x10\x00\x12\x19\n" +
	"\x15DOTA_GC_TEAM_BAD_GUYS\x10\x01\x12\x1c\n" +
	"\x18DOTA_GC_TEAM_BROADCASTER\x10\x02\x12\x1a\n" +
	"\x16DOTA_GC_TEAM_SPECTATOR\x10\x03\x12\x1c\n" +
	"\x18DOTA_GC_TEAM_PLAYER_POOL\x10\x04\x12\x17\n" +
	"\x13DOTA_GC_TEAM_NOTEAM\x10\x05\x12\x19\n" +
	"\x15DOTA_GC_TEAM_CUSTOM_1\x10\x06\x12\x19\n" +
	"\x15DOTA_GC_TEAM_CUSTOM_2\x10\a\x12\x19\n" +
	"\x15DOTA_GC_TEAM_CUSTOM_3\x10\b\x12\x19\n" +
	"\x15DOTA_GC_TEAM_CUSTOM_4\x10\t\x12\x19\n" +
	"\x15DOTA_GC_TEAM_CUSTOM_5\x10\n" +
	"\x12\x19\n" +
	"\x15DOTA_GC_TEAM_CUSTOM_6\x10\v\x12\x19\n" +
	"\x15DOTA_GC_TEAM_CUSTOM_7\x10\f\x12\x19\n" +
	"\x15DOTA_GC_TEAM_CUSTOM_8\x10\r\x12\x19\n" +
	"\x15DOTA_GC_TEAM_NEUTRALS\x10\x0e*\xf6\v\n" +
	"\x06EEvent\x12\x11\n" +
	"\rEVENT_ID_NONE\x10\x00\x12\x15\n" +
	"\x11EVENT_ID_DIRETIDE\x10\x01\x12\x1c\n" +
	"\x18EVENT_ID_SPRING_FESTIVAL\x10\x02\x12\x1b\n" +
	"\x17EVENT_ID_FROSTIVUS_2013\x10\x03\x12\x1c\n" +
	"\x18EVENT_ID_COMPENDIUM_2014\x10\x04\x12\x1a\n" +
	"\x16EVENT_ID_NEXON_PC_BANG\x10\x05\x12\x1a\n" +
	"\x16EVENT_ID_PWRD_DAC_2015\x10\x06\x12\x1b\n" +
	"\x17EVENT_ID_NEW_BLOOM_2015\x10\a\x12\x1f\n" +
	"\x1bEVENT_ID_INTERNATIONAL_2015\x10\b\x12\x1c\n" +
	"\x18EVENT_ID_FALL_MAJOR_2015\x10\t\x12\x16\n" +
	"\x12EVENT_ID_ORACLE_PA\x10\n" +
	"\x12$\n" +
	" EVENT_ID_NEW_BLOOM_2015_PREBEAST\x10\v\x12\x16\n" +
	"\x12EVENT_ID_FROSTIVUS\x10\f\x12\x1e\n" +
	"\x1aEVENT_ID_WINTER_MAJOR_2016\x10\r\x12\x1f\n" +
	"\x1bEVENT_ID_INTERNATIONAL_2016\x10\x0e\x12\x1c\n" +
	"\x18EVENT_ID_FALL_MAJOR_2016\x10\x0f\x12\x1e\n" +
	"\x1aEVENT_ID_WINTER_MAJOR_2017\x10\x10\x12\x1b\n" +
	"\x17EVENT_ID_NEW_BLOOM_2017\x10\x11\x12\x1f\n" +
	"\x1bEVENT_ID_INTERNATIONAL_2017\x10\x12\x12\x1e\n" +
	"\x1aEVENT_ID_PLUS_SUBSCRIPTION\x10\x13\x12\x1d\n" +
	"\x19EVENT_ID_SINGLES_DAY_2017\x10\x14\x12\x1b\n" +
	"\x17EVENT_ID_FROSTIVUS_2017\x10\x15\x12\x1f\n" +
	"\x1bEVENT_ID_INTERNATIONAL_2018\x10\x16\x12\x1b\n" +
	"\x17EVENT_ID_FROSTIVUS_2018\x10\x17\x12\x1b\n" +
	"\x17EVENT_ID_NEW_BLOOM_2019\x10\x18\x12\x1f\n" +
	"\x1bEVENT_ID_INTERNATIONAL_2019\x10\x19\x12\"\n" +
	"\x1eEVENT_ID_NEW_PLAYER_EXPERIENCE\x10\x1a\x12\x1b\n" +
	"\x17EVENT_ID_FROSTIVUS_2019\x10\x1b\x12\x1b\n" +
	"\x17EVENT_ID_NEW_BLOOM_2020\x10\x1c\x12\x1f\n" +
	"\x1bEVENT_ID_INTERNATIONAL_2020\x10\x1d\x12\x18\n" +
	"\x14EVENT_ID_TEAM_FANDOM\x10\x1e\x12\x1a\n" +
	"\x16EVENT_ID_DIRETIDE_2020\x10\x1f\x12\x18\n" +
	"\x14EVENT_ID_SPRING_2021\x10 \x12\x16\n" +
	"\x12EVENT_ID_FALL_2021\x10!\x12\"\n" +
	"\x1eEVENT_ID_TEAM_FANDOM_FALL_2021\x10\"\x12!\n" +
	"\x1dEVENT_ID_TEAM_2021_2022_TOUR2\x10#\x12\x1f\n" +
	"\x1bEVENT_ID_INTERNATIONAL_2022\x10$\x12!\n" +
	"\x1dEVENT_ID_TEAM_2021_2022_TOUR3\x10%\x12$\n" +
	" EVENT_ID_TEAM_INTERNATIONAL_2022\x10&\x12\x1d\n" +
	"\x19EVENT_ID_PERMANENT_GRANTS\x10'\x12&\n" +
	"\"EVENT_ID_MUERTA_RELEASE_SPRING2023\x10(\x12\x1c\n" +
	"\x18EVENT_ID_TEAM_2023_TOUR1\x10)\x12\x1c\n" +
	"\x18EVENT_ID_TEAM_2023_TOUR2\x10*\x12\x1c\n" +
	"\x18EVENT_ID_TEAM_2023_TOUR3\x10+\x12\x1f\n" +
	"\x1bEVENT_ID_INTERNATIONAL_2023\x10-\x12\x1d\n" +
	"\x19EVENT_ID_10TH_ANNIVERSARY\x10.\x12\x16\n" +
	"\x12EVENT_ID_CROWNFALL\x10/\x12\x1b\n" +
	"\x17EVENT_ID_FROSTIVUS_2023\x100\x12\x1f\n" +
	"\x1bEVENT_ID_INTERNATIONAL_2024\x101\x12\x1b\n" +
	"\x17EVENT_ID_FROSTIVUS_2024\x102*\xbb\x02\n" +
	"\tERankType\x12\x17\n" +
	"\x13k_ERankType_Invalid\x10\x00\x12\x16\n" +
	"\x12k_ERankType_Casual\x10\x01\x12\x16\n" +
	"\x12k_ERankType_Ranked\x10\x02\x12\x1c\n" +
	"\x18k_ERankType_CasualLegacy\x10\x03\x12\x1c\n" +
	"\x18k_ERankType_RankedLegacy\x10\x04\x12\x1c\n" +
	"\x18k_ERankType_CasualGlicko\x10\x05\x12\x1c\n" +
	"\x18k_ERankType_RankedGlicko\x10\x06\x12\x17\n" +
	"\x13k_ERankType_RankMax\x10\a\x12\x1f\n" +
	"\x1bk_ERankType_BehaviorPrivate\x10d\x12\x1e\n" +
	"\x1ak_ERankType_BehaviorPublic\x10e\x12\x13\n" +
	"\x0fk_ERankType_Max\x10f*\xca\x02\n" +
	"\x12DOTALeaverStatus_t\x12\x14\n" +
	"\x10DOTA_LEAVER_NONE\x10\x00\x12\x1c\n" +
	"\x18DOTA_LEAVER_DISCONNECTED\x10\x01\x12%\n" +
	"!DOTA_LEAVER_DISCONNECTED_TOO_LONG\x10\x02\x12\x19\n" +
	"\x15DOTA_LEAVER_ABANDONED\x10\x03\x12\x13\n" +
	"\x0fDOTA_LEAVER_AFK\x10\x04\x12\x1f\n" +
	"\x1bDOTA_LEAVER_NEVER_CONNECTED\x10\x05\x12(\n" +
	"$DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG\x10\x06\x12\"\n" +
	"\x1eDOTA_LEAVER_FAILED_TO_READY_UP\x10\a\x12\x18\n" +
	"\x14DOTA_LEAVER_DECLINED\x10\b\x12 \n" +
	"\x1cDOTA_LEAVER_DECLINED_REQUEUE\x10\t*\x9e\x02\n" +
	"\x15DOTAConnectionState_t\x12!\n" +
	"\x1dDOTA_CONNECTION_STATE_UNKNOWN\x10\x00\x12+\n" +
	"'DOTA_CONNECTION_STATE_NOT_YET_CONNECTED\x10\x01\x12#\n" +
	"\x1fDOTA_CONNECTION_STATE_CONNECTED\x10\x02\x12&\n" +
	"\"DOTA_CONNECTION_STATE_DISCONNECTED\x10\x03\x12#\n" +
	"\x1fDOTA_CONNECTION_STATE_ABANDONED\x10\x04\x12!\n" +
	"\x1dDOTA_CONNECTION_STATE_LOADING\x10\x05\x12 \n" +
	"\x1cDOTA_CONNECTION_STATE_FAILED\x10\x06*\x8c\x01\n" +
	"\rFantasy_Roles\x12\x1a\n" +
	"\x16FANTASY_ROLE_UNDEFINED\x10\x00\x12\x15\n" +
	"\x11FANTASY_ROLE_CORE\x10\x01\x12\x18\n" +
	"\x14FANTASY_ROLE_SUPPORT\x10\x02\x12\x18\n" +
	"\x14FANTASY_ROLE_OFFLANE\x10\x03\x12\x14\n" +
	"\x10FANTASY_ROLE_MID\x10\x04*\xa1\x05\n" +
	"\x0fFantasy_Scoring\x12\x19\n" +
	"\x15FANTASY_SCORING_KILLS\x10\x00\x12\x1a\n" +
	"\x16FANTASY_SCORING_DEATHS\x10\x01\x12\x16\n" +
	"\x12FANTASY_SCORING_CS\x10\x02\x12\x17\n" +
	"\x13FANTASY_SCORING_GPM\x10\x03\x12\x1f\n" +
	"\x1bFANTASY_SCORING_TOWER_KILLS\x10\x04\x12 \n" +
	"\x1cFANTASY_SCORING_ROSHAN_KILLS\x10\x05\x12+\n" +
	"'FANTASY_SCORING_TEAMFIGHT_PARTICIPATION\x10\x06\x12!\n" +
	"\x1dFANTASY_SCORING_WARDS_PLANTED\x10\a\x12!\n" +
	"\x1dFANTASY_SCORING_CAMPS_STACKED\x10\b\x12!\n" +
	"\x1dFANTASY_SCORING_RUNES_GRABBED\x10\t\x12\x1f\n" +
	"\x1bFANTASY_SCORING_FIRST_BLOOD\x10\n" +
	"\x12\x19\n" +
	"\x15FANTASY_SCORING_STUNS\x10\v\x12\x1f\n" +
	"\x1bFANTASY_SCORING_SMOKES_USED\x10\f\x12(\n" +
	"$FANTASY_SCORING_NEUTRAL_TOKENS_FOUND\x10\r\x12\"\n" +
	"\x1eFANTASY_SCORING_WATCHERS_TAKEN\x10\x0e\x12\"\n" +
	"\x1eFANTASY_SCORING_LOTUSES_GAINED\x10\x0f\x12#\n" +
	"\x1fFANTASY_SCORING_TORMENTOR_KILLS\x10\x10\x12!\n" +
	"\x1dFANTASY_SCORING_COURIER_KILLS\x10\x11\x12\x19\n" +
	"\x15FANTASY_SCORING_TYPES\x10\x12\x12\x1b\n" +
	"\x17FANTASY_SCORING_INVALID\x10\x13*\x8a\x01\n" +
	"\x12Fantasy_Team_Slots\x12\x15\n" +
	"\x11FANTASY_SLOT_NONE\x10\x00\x12\x15\n" +
	"\x11FANTASY_SLOT_CORE\x10\x01\x12\x18\n" +
	"\x14FANTASY_SLOT_SUPPORT\x10\x02\x12\x14\n" +
	"\x10FANTASY_SLOT_ANY\x10\x03\x12\x16\n" +
	"\x12FANTASY_SLOT_BENCH\x10\x04*\xdd\x02\n" +
	"\x16Fantasy_Selection_Mode\x12\x1d\n" +
	"\x19FANTASY_SELECTION_INVALID\x10\x00\x12\x1c\n" +
	"\x18FANTASY_SELECTION_LOCKED\x10\x01\x12\x1d\n" +
	"\x19FANTASY_SELECTION_SHUFFLE\x10\x02\x12\x1f\n" +
	"\x1bFANTASY_SELECTION_FREE_PICK\x10\x03\x12\x1b\n" +
	"\x17FANTASY_SELECTION_ENDED\x10\x04\x12 \n" +
	"\x1cFANTASY_SELECTION_PRE_SEASON\x10\x05\x12\x1f\n" +
	"\x1bFANTASY_SELECTION_PRE_DRAFT\x10\x06\x12\x1e\n" +
	"\x1aFANTASY_SELECTION_DRAFTING\x10\a\x12$\n" +
	" FANTASY_SELECTION_REGULAR_SEASON\x10\b\x12 \n" +
	"\x1cFANTASY_SELECTION_CARD_BASED\x10\t*j\n" +
	"\x10Fantasy_Gem_Type\x12\x19\n" +
	"\x15FANTASY_GEM_TYPE_RUBY\x10\x00\x12\x1d\n" +
	"\x19FANTASY_GEM_TYPE_SAPPHIRE\x10\x01\x12\x1c\n" +
	"\x18FANTASY_GEM_TYPE_EMERALD\x10\x02*\x82\x06\n" +
	"\x15DOTAChatChannelType_t\x12\x1c\n" +
	"\x18DOTAChannelType_Regional\x10\x00\x12\x1a\n" +
	"\x16DOTAChannelType_Custom\x10\x01\x12\x19\n" +
	"\x15DOTAChannelType_Party\x10\x02\x12\x19\n" +
	"\x15DOTAChannelType_Lobby\x10\x03\x12\x18\n" +
	"\x14DOTAChannelType_Team\x10\x04\x12\x19\n" +
	"\x15DOTAChannelType_Guild\x10\x05\x12\x1b\n" +
	"\x17DOTAChannelType_Fantasy\x10\x06\x12\x1b\n" +
	"\x17DOTAChannelType_Whisper\x10\a\x12\x1b\n" +
	"\x17DOTAChannelType_Console\x10\b\x12\x17\n" +
	"\x13DOTAChannelType_Tab\x10\t\x12\x1b\n" +
	"\x17DOTAChannelType_Invalid\x10\n" +
	"\x12\x1b\n" +
	"\x17DOTAChannelType_GameAll\x10\v\x12\x1e\n" +
	"\x1aDOTAChannelType_GameAllies\x10\f\x12!\n" +
	"\x1dDOTAChannelType_GameSpectator\x10\r\x12 \n" +
	"\x1cDOTAChannelType_GameCoaching\x10\x0e\x12\x18\n" +
	"\x14DOTAChannelType_Cafe\x10\x0f\x12\x1e\n" +
	"\x1aDOTAChannelType_CustomGame\x10\x10\x12\x1b\n" +
	"\x17DOTAChannelType_Private\x10\x11\x12\x1c\n" +
	"\x18DOTAChannelType_PostGame\x10\x12\x12\x1d\n" +
	"\x19DOTAChannelType_BattleCup\x10\x13\x12!\n" +
	"\x1dDOTAChannelType_HLTVSpectator\x10\x14\x12\x1e\n" +
	"\x1aDOTAChannelType_GameEvents\x10\x15\x12\x1a\n" +
	"\x16DOTAChannelType_Trivia\x10\x16\x12\x1d\n" +
	"\x19DOTAChannelType_NewPlayer\x10\x17\x12#\n" +
	"\x1fDOTAChannelType_PrivateCoaching\x10\x18*\x90\x01\n" +
	"\x16EChatSpecialPrivileges\x12!\n" +
	"\x1dk_EChatSpecialPrivileges_None\x10\x00\x12&\n" +
	"\"k_EChatSpecialPrivileges_Moderator\x10\x01\x12+\n" +
	"'k_EChatSpecialPrivileges_SuperModerator\x10\x02*\xdd\x03\n" +
	"\x0eDOTACommType_t\x12\x17\n" +
	"\x13DOTA_COMM_TYPE_NONE\x10\x00\x12\x17\n" +
	"\x13DOTA_COMM_TYPE_PING\x10\x01\x12\x1c\n" +
	"\x18DOTA_COMM_TYPE_CHATWHEEL\x10\x02\x12\x16\n" +
	"\x12DOTA_COMM_TYPE_TIP\x10\x03\x12\x17\n" +
	"\x13DOTA_COMM_TYPE_TEXT\x10\x04\x12\x1b\n" +
	"\x17DOTA_COMM_TYPE_SHOWCASE\x10\x05\x12\x18\n" +
	"\x14DOTA_COMM_TYPE_VOICE\x10\x06\x12\x1f\n" +
	"\x1bDOTA_COMM_TYPE_ALLY_ABILITY\x10\a\x12\x18\n" +
	"\x14DOTA_COMM_TYPE_PAUSE\x10\b\x12\x1b\n" +
	"\x17DOTA_COMM_TYPE_COACHING\x10\t\x12\x1d\n" +
	"\x19DOTA_COMM_TYPE_NOCOOLDOWN\x10\n" +
	"\x12\"\n" +
	"\x1eDOTA_COMM_TYPE_RANKEDMATCHMAKE\x10\v\x12\x18\n" +
	"\x14DOTA_COMM_TYPE_DROPS\x10\f\x12#\n" +
	"\x1fDOTA_COMM_TYPE_NEWPLAYER_EXPERT\x10\r\x12\x1a\n" +
	"\x16DOTA_COMM_TYPE_COACHED\x10\x0e\x12\x1d\n" +
	"\x19DOTA_COMM_TYPE_MAPDRAWING\x10\x0f*\xfa\x01\n" +
	"\x0fDOTACommLevel_t\x12\x18\n" +
	"\x14DOTA_COMM_LEVEL_NONE\x10\x00\x12\x1c\n" +
	"\x18DOTA_COMM_LEVEL_COOLDOWN\x10\x01\x12\x19\n" +
	"\x15DOTA_COMM_LEVEL_PINGS\x10\x02\x12\x1e\n" +
	"\x1aDOTA_COMM_LEVEL_MAPDRAWING\x10\x03\x12\x18\n" +
	"\x14DOTA_COMM_LEVEL_CHAT\x10\x04\x12\x1b\n" +
	"\x17DOTA_COMM_LEVEL_TIPPING\x10\x05\x12\x19\n" +
	"\x15DOTA_COMM_LEVEL_VOICE\x10\x06\x12\"\n" +
	"\x1eDOTA_COMM_LEVEL_ALLIED_ABILITY\x10\a*\xbd\x01\n" +
	"\x13DOTABehaviorLevel_t\x12\x1c\n" +
	"\x18DOTA_BEHAVIOR_LEVEL_NONE\x10\x00\x12&\n" +
	"\"DOTA_BEHAVIOR_LEVEL_RANKED_ALLOWED\x10\x01\x12\x1f\n" +
	"\x1bDOTA_BEHAVIOR_LEVEL_PAUSING\x10\x02\x12\x1d\n" +
	"\x19DOTA_BEHAVIOR_LEVEL_DROPS\x10\x03\x12 \n" +
	"\x1cDOTA_BEHAVIOR_LEVEL_COACHING\x10\x04*\x84\x02\n" +
	"\x14EProfileCardSlotType\x12 \n" +
	"\x1ck_EProfileCardSlotType_Empty\x10\x00\x12\x1f\n" +
	"\x1bk_EProfileCardSlotType_Stat\x10\x01\x12!\n" +
	"\x1dk_EProfileCardSlotType_Trophy\x10\x02\x12\x1f\n" +
	"\x1bk_EProfileCardSlotType_Item\x10\x03\x12\x1f\n" +
	"\x1bk_EProfileCardSlotType_Hero\x10\x04\x12#\n" +
	"\x1fk_EProfileCardSlotType_Emoticon\x10\x05\x12\x1f\n" +
	"\x1bk_EProfileCardSlotType_Team\x10\x06*\x95\x01\n" +
	"\x17EMatchGroupServerStatus\x12 \n" +
	"\x1ck_EMatchGroupServerStatus_OK\x10\x00\x121\n" +
	"-k_EMatchGroupServerStatus_LimitedAvailability\x10\x01\x12%\n" +
	"!k_EMatchGroupServerStatus_Offline\x10\x02*O\n" +
	"\fDOTA_CM_PICK\x12\x12\n" +
	"\x0eDOTA_CM_RANDOM\x10\x00\x12\x15\n" +
	"\x11DOTA_CM_GOOD_GUYS\x10\x01\x12\x14\n" +
	"\x10DOTA_CM_BAD_GUYS\x10\x02*\xb4\x01\n" +
	"\x16DOTALowPriorityBanType\x12!\n" +
	"\x1dDOTA_LOW_PRIORITY_BAN_ABANDON\x10\x00\x12!\n" +
	"\x1dDOTA_LOW_PRIORITY_BAN_REPORTS\x10\x01\x12+\n" +
	"'DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON\x10\x02\x12'\n" +
	"#DOTA_LOW_PRIORITY_BAN_PRE_GAME_ROLE\x10\x03*\xa7\x01\n" +
	"\x13DOTALobbyReadyState\x12\"\n" +
	"\x1eDOTALobbyReadyState_UNDECLARED\x10\x00\x12 \n" +
	"\x1cDOTALobbyReadyState_ACCEPTED\x10\x01\x12 \n" +
	"\x1cDOTALobbyReadyState_DECLINED\x10\x02\x12(\n" +
	"$DOTALobbyReadyState_DECLINED_REQUEUE\x10\x03*\xba\x04\n" +
	"\x13DOTAJoinLobbyResult\x12\x1c\n" +
	"\x18DOTA_JOIN_RESULT_SUCCESS\x10\x00\x12$\n" +
	" DOTA_JOIN_RESULT_ALREADY_IN_GAME\x10\x01\x12\"\n" +
	"\x1eDOTA_JOIN_RESULT_INVALID_LOBBY\x10\x02\x12'\n" +
	"#DOTA_JOIN_RESULT_INCORRECT_PASSWORD\x10\x03\x12\"\n" +
	"\x1eDOTA_JOIN_RESULT_ACCESS_DENIED\x10\x04\x12\"\n" +
	"\x1eDOTA_JOIN_RESULT_GENERIC_ERROR\x10\x05\x12&\n" +
	"\"DOTA_JOIN_RESULT_INCORRECT_VERSION\x10\x06\x12\"\n" +
	"\x1eDOTA_JOIN_RESULT_IN_TEAM_PARTY\x10\a\x12#\n" +
	"\x1fDOTA_JOIN_RESULT_NO_LOBBY_FOUND\x10\b\x12\x1f\n" +
	"\x1bDOTA_JOIN_RESULT_LOBBY_FULL\x10\t\x122\n" +
	".DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION\x10\n" +
	"\x12\x1c\n" +
	"\x18DOTA_JOIN_RESULT_TIMEOUT\x10\v\x12)\n" +
	"%DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN\x10\f\x12\x19\n" +
	"\x15DOTA_JOIN_RESULT_BUSY\x10\r\x12 \n" +
	"\x1cDOTA_JOIN_RESULT_NO_PLAYTIME\x10\x0e*q\n" +
	"\x1aDOTASelectionPriorityRules\x12'\n" +
	"#k_DOTASelectionPriorityRules_Manual\x10\x00\x12*\n" +
	"&k_DOTASelectionPriorityRules_Automatic\x10\x01*\xf6\x01\n" +
	"\x1bDOTASelectionPriorityChoice\x12)\n" +
	"%k_DOTASelectionPriorityChoice_Invalid\x10\x00\x12+\n" +
	"'k_DOTASelectionPriorityChoice_FirstPick\x10\x01\x12,\n" +
	"(k_DOTASelectionPriorityChoice_SecondPick\x10\x02\x12)\n" +
	"%k_DOTASelectionPriorityChoice_Radiant\x10\x03\x12&\n" +
	"\"k_DOTASelectionPriorityChoice_Dire\x10\x04*b\n" +
	"\rDOTAMatchVote\x12\x19\n" +
	"\x15DOTAMatchVote_INVALID\x10\x00\x12\x1a\n" +
	"\x16DOTAMatchVote_POSITIVE\x10\x01\x12\x1a\n" +
	"\x16DOTAMatchVote_NEGATIVE\x10\x02*x\n" +
	"\x13DOTALobbyVisibility\x12\x1e\n" +
	"\x1aDOTALobbyVisibility_Public\x10\x00\x12\x1f\n" +
	"\x1bDOTALobbyVisibility_Friends\x10\x01\x12 \n" +
	"\x1cDOTALobbyVisibility_Unlisted\x10\x02*\x8b\x01\n" +
	"\x12EDOTAPlayerMMRType\x12 \n" +
	"\x1ck_EDOTAPlayerMMRType_Invalid\x10\x00\x12&\n" +
	"\"k_EDOTAPlayerMMRType_GeneralHidden\x10\x01\x12+\n" +
	"'k_EDOTAPlayerMMRType_GeneralCompetitive\x10\x03*s\n" +
	"\x11EDOTAMMRBoostType\x12\x1c\n" +
	"\x18k_EDOTAMMRBoostType_None\x10\x00\x12\x1e\n" +
	"\x1ak_EDOTAMMRBoostType_Leader\x10\x01\x12 \n" +
	"\x1ck_EDOTAMMRBoostType_Follower\x10\x02*\xd0\x01\n" +
	"\tMatchType\x12\x15\n" +
	"\x11MATCH_TYPE_CASUAL\x10\x00\x12\x18\n" +
	"\x14MATCH_TYPE_COOP_BOTS\x10\x01\x12\x1a\n" +
	"\x16MATCH_TYPE_COMPETITIVE\x10\x04\x12\x1e\n" +
	"\x1aMATCH_TYPE_WEEKEND_TOURNEY\x10\x05\x12\x14\n" +
	"\x10MATCH_TYPE_EVENT\x10\a\x12 \n" +
	"\x1cMATCH_TYPE_COACHES_CHALLENGE\x10\f\x12\x1e\n" +
	"\x1aMATCH_TYPE_NEW_PLAYER_POOL\x10\x0e*\x9c\x02\n" +
	"\x11DOTABotDifficulty\x12\x1a\n" +
	"\x16BOT_DIFFICULTY_PASSIVE\x10\x00\x12\x17\n" +
	"\x13BOT_DIFFICULTY_EASY\x10\x01\x12\x19\n" +
	"\x15BOT_DIFFICULTY_MEDIUM\x10\x02\x12\x17\n" +
	"\x13BOT_DIFFICULTY_HARD\x10\x03\x12\x19\n" +
	"\x15BOT_DIFFICULTY_UNFAIR\x10\x04\x12\x1a\n" +
	"\x16BOT_DIFFICULTY_INVALID\x10\x05\x12\x19\n" +
	"\x15BOT_DIFFICULTY_EXTRA1\x10\x06\x12\x19\n" +
	"\x15BOT_DIFFICULTY_EXTRA2\x10\a\x12\x19\n" +
	"\x15BOT_DIFFICULTY_EXTRA3\x10\b\x12\x16\n" +
	"\x12BOT_DIFFICULTY_NPX\x10\t*\xae\x06\n" +
	"\rDOTA_BOT_MODE\x12\x16\n" +
	"\x12DOTA_BOT_MODE_NONE\x10\x00\x12\x18\n" +
	"\x14DOTA_BOT_MODE_LANING\x10\x01\x12\x18\n" +
	"\x14DOTA_BOT_MODE_ATTACK\x10\x02\x12\x16\n" +
	"\x12DOTA_BOT_MODE_ROAM\x10\x03\x12\x19\n" +
	"\x15DOTA_BOT_MODE_RETREAT\x10\x04\x12\x1d\n" +
	"\x19DOTA_BOT_MODE_SECRET_SHOP\x10\x05\x12\x1b\n" +
	"\x17DOTA_BOT_MODE_SIDE_SHOP\x10\x06\x12\x16\n" +
	"\x12DOTA_BOT_MODE_RUNE\x10\a\x12 \n" +
	"\x1cDOTA_BOT_MODE_PUSH_TOWER_TOP\x10\b\x12 \n" +
	"\x1cDOTA_BOT_MODE_PUSH_TOWER_MID\x10\t\x12 \n" +
	"\x1cDOTA_BOT_MODE_PUSH_TOWER_BOT\x10\n" +
	"\x12\"\n" +
	"\x1eDOTA_BOT_MODE_DEFEND_TOWER_TOP\x10\v\x12\"\n" +
	"\x1eDOTA_BOT_MODE_DEFEND_TOWER_MID\x10\f\x12\"\n" +
	"\x1eDOTA_BOT_MODE_DEFEND_TOWER_BOT\x10\r\x12\x1a\n" +
	"\x16DOTA_BOT_MODE_ASSEMBLE\x10\x0e\x12&\n" +
	"\"DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS\x10\x0f\x12\x1b\n" +
	"\x17DOTA_BOT_MODE_TEAM_ROAM\x10\x10\x12\x16\n" +
	"\x12DOTA_BOT_MODE_FARM\x10\x11\x12\x1d\n" +
	"\x19DOTA_BOT_MODE_DEFEND_ALLY\x10\x12\x12#\n" +
	"\x1fDOTA_BOT_MODE_EVASIVE_MANEUVERS\x10\x13\x12\x18\n" +
	"\x14DOTA_BOT_MODE_ROSHAN\x10\x14\x12\x16\n" +
	"\x12DOTA_BOT_MODE_ITEM\x10\x15\x12\x16\n" +
	"\x12DOTA_BOT_MODE_WARD\x10\x16\x12\x1b\n" +
	"\x17DOTA_BOT_MODE_COMPANION\x10\x17\x12\x1f\n" +
	"\x1bDOTA_BOT_MODE_TUTORIAL_BOSS\x10\x18\x12\x18\n" +
	"\x14DOTA_BOT_MODE_MINION\x10\x19\x12\x19\n" +
	"\x15DOTA_BOT_MODE_OUTPOST\x10\x1a*\xf3\x01\n" +
	"\x0eMatchLanguages\x12\x1a\n" +
	"\x16MATCH_LANGUAGE_INVALID\x10\x00\x12\x1a\n" +
	"\x16MATCH_LANGUAGE_ENGLISH\x10\x01\x12\x1a\n" +
	"\x16MATCH_LANGUAGE_RUSSIAN\x10\x02\x12\x1a\n" +
	"\x16MATCH_LANGUAGE_CHINESE\x10\x03\x12\x19\n" +
	"\x15MATCH_LANGUAGE_KOREAN\x10\x04\x12\x1a\n" +
	"\x16MATCH_LANGUAGE_SPANISH\x10\x05\x12\x1d\n" +
	"\x19MATCH_LANGUAGE_PORTUGUESE\x10\x06\x12\x1b\n" +
	"\x17MATCH_LANGUAGE_ENGLISH2\x10\a*\xd8\x02\n" +
	"\x1aETourneyQueueDeadlineState\x12'\n" +
	"#k_ETourneyQueueDeadlineState_Normal\x10\x00\x12'\n" +
	"#k_ETourneyQueueDeadlineState_Missed\x10\x01\x12*\n" +
	"&k_ETourneyQueueDeadlineState_ExpiredOK\x10\x02\x12+\n" +
	"'k_ETourneyQueueDeadlineState_SeekingBye\x10\x03\x122\n" +
	".k_ETourneyQueueDeadlineState_EligibleForRefund\x10\x04\x12,\n" +
	"\x1fk_ETourneyQueueDeadlineState_NA\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12-\n" +
	")k_ETourneyQueueDeadlineState_ExpiringSoon\x10e*\xd7\x05\n" +
	"\rEMatchOutcome\x12\x1b\n" +
	"\x17k_EMatchOutcome_Unknown\x10\x00\x12\x1e\n" +
	"\x1ak_EMatchOutcome_RadVictory\x10\x02\x12\x1f\n" +
	"\x1bk_EMatchOutcome_DireVictory\x10\x03\x12\"\n" +
	"\x1ek_EMatchOutcome_NeutralVictory\x10\x04\x12 \n" +
	"\x1ck_EMatchOutcome_NoTeamWinner\x10\x05\x12\"\n" +
	"\x1ek_EMatchOutcome_Custom1Victory\x10\x06\x12\"\n" +
	"\x1ek_EMatchOutcome_Custom2Victory\x10\a\x12\"\n" +
	"\x1ek_EMatchOutcome_Custom3Victory\x10\b\x12\"\n" +
	"\x1ek_EMatchOutcome_Custom4Victory\x10\t\x12\"\n" +
	"\x1ek_EMatchOutcome_Custom5Victory\x10\n" +
	"\x12\"\n" +
	"\x1ek_EMatchOutcome_Custom6Victory\x10\v\x12\"\n" +
	"\x1ek_EMatchOutcome_Custom7Victory\x10\f\x12\"\n" +
	"\x1ek_EMatchOutcome_Custom8Victory\x10\r\x123\n" +
	"/k_EMatchOutcome_NotScored_PoorNetworkConditions\x10@\x12$\n" +
	" k_EMatchOutcome_NotScored_Leaver\x10A\x12)\n" +
	"%k_EMatchOutcome_NotScored_ServerCrash\x10B\x12*\n" +
	"&k_EMatchOutcome_NotScored_NeverStarted\x10C\x12&\n" +
	"\"k_EMatchOutcome_NotScored_Canceled\x10D\x12(\n" +
	"$k_EMatchOutcome_NotScored_Suspicious\x10E*\x86\x01\n" +
	"\tELaneType\x12\x15\n" +
	"\x11LANE_TYPE_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eLANE_TYPE_SAFE\x10\x01\x12\x11\n" +
	"\rLANE_TYPE_OFF\x10\x02\x12\x11\n" +
	"\rLANE_TYPE_MID\x10\x03\x12\x14\n" +
	"\x10LANE_TYPE_JUNGLE\x10\x04\x12\x12\n" +
	"\x0eLANE_TYPE_ROAM\x10\x05*\xdb\x05\n" +
	"\n" +
	"EBadgeType\x12\x18\n" +
	"\x14k_EBadgeType_Invalid\x10\x00\x12\x1c\n" +
	"\x18k_EBadgeType_TI7_Midweek\x10\x01\x12\x1b\n" +
	"\x17k_EBadgeType_TI7_Finals\x10\x02\x12\x1d\n" +
	"\x19k_EBadgeType_TI7_AllEvent\x10\x03\x12\x1c\n" +
	"\x18k_EBadgeType_TI8_Midweek\x10\x04\x12\x1b\n" +
	"\x17k_EBadgeType_TI8_Finals\x10\x05\x12\x1d\n" +
	"\x19k_EBadgeType_TI8_AllEvent\x10\x06\x12\x15\n" +
	"\x11k_EBadgeType_TI10\x10\a\x12\"\n" +
	"\x1ek_EBadgeType_TI11_PlayoffsDay1\x10\b\x12\"\n" +
	"\x1ek_EBadgeType_TI11_PlayoffsDay2\x10\t\x12\"\n" +
	"\x1ek_EBadgeType_TI11_PlayoffsDay3\x10\n" +
	"\x12\"\n" +
	"\x1ek_EBadgeType_TI11_PlayoffsDay4\x10\v\x12#\n" +
	"\x1fk_EBadgeType_TI11_FinalsWeekend\x10\f\x12\"\n" +
	"\x1ek_EBadgeType_TI12_PlayoffsDay1\x10\r\x12\"\n" +
	"\x1ek_EBadgeType_TI12_PlayoffsDay2\x10\x0e\x12\"\n" +
	"\x1ek_EBadgeType_TI12_PlayoffsDay3\x10\x0f\x12#\n" +
	"\x1fk_EBadgeType_TI12_FinalsWeekend\x10\x10\x12\x1d\n" +
	"\x19k_EBadgeType_TI12_Special\x10\x11\x12 \n" +
	"\x1ck_EBadgeType_TI13_FinalsDay1\x10\x12\x12 \n" +
	"\x1ck_EBadgeType_TI13_FinalsDay2\x10\x13\x12 \n" +
	"\x1ck_EBadgeType_TI13_FinalsDay3\x10\x14\x12\x1d\n" +
	"\x19k_EBadgeType_TI13_Special\x10\x15*\xd4\x01\n" +
	"\rELeagueStatus\x12\x17\n" +
	"\x13LEAGUE_STATUS_UNSET\x10\x00\x12\x1d\n" +
	"\x19LEAGUE_STATUS_UNSUBMITTED\x10\x01\x12\x1b\n" +
	"\x17LEAGUE_STATUS_SUBMITTED\x10\x02\x12\x1a\n" +
	"\x16LEAGUE_STATUS_ACCEPTED\x10\x03\x12\x1a\n" +
	"\x16LEAGUE_STATUS_REJECTED\x10\x04\x12\x1b\n" +
	"\x17LEAGUE_STATUS_CONCLUDED\x10\x05\x12\x19\n" +
	"\x15LEAGUE_STATUS_DELETED\x10\x06*\xb2\x01\n" +
	"\rELeagueRegion\x12\x17\n" +
	"\x13LEAGUE_REGION_UNSET\x10\x00\x12\x14\n" +
	"\x10LEAGUE_REGION_NA\x10\x01\x12\x14\n" +
	"\x10LEAGUE_REGION_SA\x10\x02\x12\x15\n" +
	"\x11LEAGUE_REGION_WEU\x10\x03\x12\x15\n" +
	"\x11LEAGUE_REGION_EEU\x10\x04\x12\x17\n" +
	"\x13LEAGUE_REGION_CHINA\x10\x05\x12\x15\n" +
	"\x11LEAGUE_REGION_SEA\x10\x06*\xac\x02\n" +
	"\vELeagueTier\x12\x15\n" +
	"\x11LEAGUE_TIER_UNSET\x10\x00\x12\x17\n" +
	"\x13LEAGUE_TIER_AMATEUR\x10\x01\x12\x1c\n" +
	"\x18LEAGUE_TIER_PROFESSIONAL\x10\x02\x12\x15\n" +
	"\x11LEAGUE_TIER_MINOR\x10\x03\x12\x15\n" +
	"\x11LEAGUE_TIER_MAJOR\x10\x04\x12\x1d\n" +
	"\x19LEAGUE_TIER_INTERNATIONAL\x10\x05\x12\x1d\n" +
	"\x19LEAGUE_TIER_DPC_QUALIFIER\x10\x06\x12$\n" +
	" LEAGUE_TIER_DPC_LEAGUE_QUALIFIER\x10\a\x12\x1a\n" +
	"\x16LEAGUE_TIER_DPC_LEAGUE\x10\b\x12!\n" +
	"\x1dLEAGUE_TIER_DPC_LEAGUE_FINALS\x10\t*|\n" +
	"\x13ELeagueTierCategory\x12 \n" +
	"\x1cLEAGUE_TIER_CATEGORY_AMATEUR\x10\x01\x12%\n" +
	"!LEAGUE_TIER_CATEGORY_PROFESSIONAL\x10\x02\x12\x1c\n" +
	"\x18LEAGUE_TIER_CATEGORY_DPC\x10\x03*[\n" +
	"\x0fELeagueDivision\x12\x19\n" +
	"\x15LEAGUE_DIVISION_UNSET\x10\x00\x12\x15\n" +
	"\x11LEAGUE_DIVISION_I\x10\x01\x12\x16\n" +
	"\x12LEAGUE_DIVISION_II\x10\x02*\xab\x01\n" +
	"\x18ELeagueBroadcastProvider\x12\x1c\n" +
	"\x18LEAGUE_BROADCAST_UNKNOWN\x10\x00\x12\x1a\n" +
	"\x16LEAGUE_BROADCAST_STEAM\x10\x01\x12\x1b\n" +
	"\x17LEAGUE_BROADCAST_TWITCH\x10\x02\x12\x1c\n" +
	"\x18LEAGUE_BROADCAST_YOUTUBE\x10\x03\x12\x1a\n" +
	"\x16LEAGUE_BROADCAST_OTHER\x10d*\x86\x01\n" +
	"\fELeaguePhase\x12\x16\n" +
	"\x12LEAGUE_PHASE_UNSET\x10\x00\x12#\n" +
	"\x1fLEAGUE_PHASE_REGIONAL_QUALIFIER\x10\x01\x12\x1c\n" +
	"\x18LEAGUE_PHASE_GROUP_STAGE\x10\x02\x12\x1b\n" +
	"\x17LEAGUE_PHASE_MAIN_EVENT\x10\x03*\xda\x0e\n" +
	"\x12ELeagueAuditAction\x12\x1f\n" +
	"\x1bLEAGUE_AUDIT_ACTION_INVALID\x10\x00\x12%\n" +
	"!LEAGUE_AUDIT_ACTION_LEAGUE_CREATE\x10\x01\x12#\n" +
	"\x1fLEAGUE_AUDIT_ACTION_LEAGUE_EDIT\x10\x02\x12%\n" +
	"!LEAGUE_AUDIT_ACTION_LEAGUE_DELETE\x10\x03\x12(\n" +
	"$LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD\x10\x04\x12+\n" +
	"'LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE\x10\x05\x12,\n" +
	"(LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE\x10\x06\x12)\n" +
	"%LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD\x10\a\x12,\n" +
	"(LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE\x10\b\x12,\n" +
	"(LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED\x10\t\x12,\n" +
	"(LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED\x10\n" +
	"\x12(\n" +
	"$LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED\x10\v\x12-\n" +
	")LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL\x10\f\x122\n" +
	".LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM\x10\r\x125\n" +
	"1LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM\x10\x0e\x12*\n" +
	"&LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START\x10\x0f\x12(\n" +
	"$LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END\x10\x10\x12/\n" +
	"+LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM\x10\x11\x122\n" +
	".LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM\x10\x12\x12-\n" +
	")LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED\x10\x13\x12*\n" +
	"&LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT\x10\x14\x12(\n" +
	"$LEAGUE_AUDIT_ACTION_LEAGUE_TEAM_SWAP\x10\x15\x12(\n" +
	"$LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE\x10d\x12)\n" +
	"%LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY\x10e\x12*\n" +
	"&LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM\x10f\x12-\n" +
	")LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM\x10g\x12/\n" +
	"+LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING\x10h\x12&\n" +
	"\"LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT\x10i\x12*\n" +
	"&LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE\x10j\x12+\n" +
	"'LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED\x10k\x129\n" +
	"5LEAGUE_AUDIT_ACTION_NODEGROUP_SET_SECONDARY_ADVANCING\x10l\x128\n" +
	"4LEAGUE_AUDIT_ACTION_NODEGROUP_SET_TERTIARY_ADVANCING\x10m\x12$\n" +
	"\x1fLEAGUE_AUDIT_ACTION_NODE_CREATE\x10\xc8\x01\x12%\n" +
	" LEAGUE_AUDIT_ACTION_NODE_DESTROY\x10\xc9\x01\x12(\n" +
	"#LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE\x10\xca\x01\x12&\n" +
	"!LEAGUE_AUDIT_ACTION_NODE_SET_TEAM\x10\xcb\x01\x12+\n" +
	"&LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID\x10\xcc\x01\x12+\n" +
	"&LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING\x10\xcd\x01\x12&\n" +
	"!LEAGUE_AUDIT_ACTION_NODE_SET_TIME\x10\xce\x01\x12-\n" +
	"(LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED\x10\xcf\x01\x12'\n" +
	"\"LEAGUE_AUDIT_ACTION_NODE_COMPLETED\x10\xd0\x01\x12\"\n" +
	"\x1dLEAGUE_AUDIT_ACTION_NODE_EDIT\x10\xd1\x01*\x8f\f\n" +
	"\x14DOTA_COMBATLOG_TYPES\x12#\n" +
	"\x16DOTA_COMBATLOG_INVALID\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x19\n" +
	"\x15DOTA_COMBATLOG_DAMAGE\x10\x00\x12\x17\n" +
	"\x13DOTA_COMBATLOG_HEAL\x10\x01\x12\x1f\n" +
	"\x1bDOTA_COMBATLOG_MODIFIER_ADD\x10\x02\x12\"\n" +
	"\x1eDOTA_COMBATLOG_MODIFIER_REMOVE\x10\x03\x12\x18\n" +
	"\x14DOTA_COMBATLOG_DEATH\x10\x04\x12\x1a\n" +
	"\x16DOTA_COMBATLOG_ABILITY\x10\x05\x12\x17\n" +
	"\x13DOTA_COMBATLOG_ITEM\x10\x06\x12\x1b\n" +
	"\x17DOTA_COMBATLOG_LOCATION\x10\a\x12\x17\n" +
	"\x13DOTA_COMBATLOG_GOLD\x10\b\x12\x1d\n" +
	"\x19DOTA_COMBATLOG_GAME_STATE\x10\t\x12\x15\n" +
	"\x11DOTA_COMBATLOG_XP\x10\n" +
	"\x12\x1b\n" +
	"\x17DOTA_COMBATLOG_PURCHASE\x10\v\x12\x1a\n" +
	"\x16DOTA_COMBATLOG_BUYBACK\x10\f\x12\"\n" +
	"\x1eDOTA_COMBATLOG_ABILITY_TRIGGER\x10\r\x12\x1e\n" +
	"\x1aDOTA_COMBATLOG_PLAYERSTATS\x10\x0e\x12\x1c\n" +
	"\x18DOTA_COMBATLOG_MULTIKILL\x10\x0f\x12\x1d\n" +
	"\x19DOTA_COMBATLOG_KILLSTREAK\x10\x10\x12%\n" +
	"!DOTA_COMBATLOG_TEAM_BUILDING_KILL\x10\x11\x12\x1e\n" +
	"\x1aDOTA_COMBATLOG_FIRST_BLOOD\x10\x12\x12'\n" +
	"#DOTA_COMBATLOG_MODIFIER_STACK_EVENT\x10\x13\x12%\n" +
	"!DOTA_COMBATLOG_NEUTRAL_CAMP_STACK\x10\x14\x12\x1e\n" +
	"\x1aDOTA_COMBATLOG_PICKUP_RUNE\x10\x15\x12%\n" +
	"!DOTA_COMBATLOG_REVEALED_INVISIBLE\x10\x16\x12\x1d\n" +
	"\x19DOTA_COMBATLOG_HERO_SAVED\x10\x17\x12 \n" +
	"\x1cDOTA_COMBATLOG_MANA_RESTORED\x10\x18\x12\x1f\n" +
	"\x1bDOTA_COMBATLOG_HERO_LEVELUP\x10\x19\x12#\n" +
	"\x1fDOTA_COMBATLOG_BOTTLE_HEAL_ALLY\x10\x1a\x12 \n" +
	"\x1cDOTA_COMBATLOG_ENDGAME_STATS\x10\x1b\x12$\n" +
	" DOTA_COMBATLOG_INTERRUPT_CHANNEL\x10\x1c\x12\x1e\n" +
	"\x1aDOTA_COMBATLOG_ALLIED_GOLD\x10\x1d\x12\x1e\n" +
	"\x1aDOTA_COMBATLOG_AEGIS_TAKEN\x10\x1e\x12\x1e\n" +
	"\x1aDOTA_COMBATLOG_MANA_DAMAGE\x10\x1f\x12,\n" +
	"(DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED\x10 \x12 \n" +
	"\x1cDOTA_COMBATLOG_UNIT_SUMMONED\x10!\x12\x1f\n" +
	"\x1bDOTA_COMBATLOG_ATTACK_EVADE\x10\"\x12\x1b\n" +
	"\x17DOTA_COMBATLOG_TREE_CUT\x10#\x12\"\n" +
	"\x1eDOTA_COMBATLOG_SUCCESSFUL_SCAN\x10$\x12!\n" +
	"\x1dDOTA_COMBATLOG_END_KILLSTREAK\x10%\x12$\n" +
	" DOTA_COMBATLOG_BLOODSTONE_CHARGE\x10&\x12\"\n" +
	"\x1eDOTA_COMBATLOG_CRITICAL_DAMAGE\x10'\x12\x1f\n" +
	"\x1bDOTA_COMBATLOG_SPELL_ABSORB\x10(\x12\"\n" +
	"\x1eDOTA_COMBATLOG_UNIT_TELEPORTED\x10)\x12#\n" +
	"\x1fDOTA_COMBATLOG_KILL_EATER_EVENT\x10*\x12&\n" +
	"\"DOTA_COMBATLOG_NEUTRAL_ITEM_EARNED\x10+\x12&\n" +
	"\"DOTA_COMBATLOG_STAT_TRACKER_PLAYER\x10,*u\n" +
	"\x10EDPCFavoriteType\x12\x15\n" +
	"\x11FAVORITE_TYPE_ALL\x10\x00\x12\x18\n" +
	"\x14FAVORITE_TYPE_PLAYER\x10\x01\x12\x16\n" +
	"\x12FAVORITE_TYPE_TEAM\x10\x02\x12\x18\n" +
	"\x14FAVORITE_TYPE_LEAGUE\x10\x03*\xa8\x04\n" +
	"\x14EDPCPushNotification\x12(\n" +
	"$DPC_PUSH_NOTIFICATION_MATCH_STARTING\x10\x01\x12*\n" +
	"&DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM\x10\n" +
	"\x12,\n" +
	"(DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM\x10\v\x125\n" +
	"1DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM_AS_COACH\x10\f\x123\n" +
	"/DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM_AS_COACH\x10\r\x12'\n" +
	"#DPC_PUSH_NOTIFICATION_LEAGUE_RESULT\x10\x14\x126\n" +
	"2DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE\x10\x1e\x12+\n" +
	"'DPC_PUSH_NOTIFICATION_PREDICTION_RESULT\x10\x1f\x120\n" +
	",DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED\x10(\x12/\n" +
	"+DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY\x10)\x12/\n" +
	"+DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS\x10**Y\n" +
	"\x15EEventActionScoreMode\x12\x1f\n" +
	"\x1bk_eEventActionScoreMode_Add\x10\x00\x12\x1f\n" +
	"\x1bk_eEventActionScoreMode_Min\x10\x01*\xce\x02\n" +
	"\x1bEPlayerChallengeHistoryType\x12)\n" +
	"%k_EPlayerChallengeHistoryType_Invalid\x10\x00\x12+\n" +
	"'k_EPlayerChallengeHistoryType_KillEater\x10\x01\x12/\n" +
	"+k_EPlayerChallengeHistoryType_DotaPlusRelic\x10\x02\x12=\n" +
	"9k_EPlayerChallengeHistoryType_DotaPlusHeroPlayerChallenge\x10\x03\x126\n" +
	"2k_EPlayerChallengeHistoryType_InGameEventChallenge\x10\x04\x12/\n" +
	"+k_EPlayerChallengeHistoryType_GuildContract\x10\x05*\x86\x02\n" +
	"\x16EOverwatchReportReason\x12$\n" +
	" k_EOverwatchReportReason_Unknown\x10\x00\x12%\n" +
	"!k_EOverwatchReportReason_Cheating\x10\x01\x12$\n" +
	" k_EOverwatchReportReason_Feeding\x10\x02\x12%\n" +
	"!k_EOverwatchReportReason_Griefing\x10\x03\x12'\n" +
	"#k_EOverwatchReportReason_Suspicious\x10\x04\x12)\n" +
	"%k_EOverwatchReportReason_AbilityAbuse\x10\x05*\xb5\x01\n" +
	"\x11ECandyShopUpgrade\x12'\n" +
	"\x1ak_ECandyShopUpgradeInvalid\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12%\n" +
	"!k_ECandyShopUpgrade_InventorySize\x10\x00\x12#\n" +
	"\x1fk_ECandyShopUpgrade_RewardShelf\x10\x01\x12+\n" +
	"'k_ECandyShopUpgrade_ExtraExchangeRecipe\x10\x02*\x86\x01\n" +
	"\x16EItemSuggestPreference\x12!\n" +
	"\x1dk_EItemSuggestPreference_None\x10\x00\x12\"\n" +
	"\x1ek_EItemSuggestPreference_Liked\x10\x01\x12%\n" +
	"!k_EItemSuggestPreference_Disliked\x10\x02*\xb7\x01\n" +
	"\x0fETimerAlertType\x12\x1e\n" +
	"\x1ak_TimerAlertType_PowerRune\x10\x01\x12\x1f\n" +
	"\x1bk_TimerAlertType_BountyRune\x10\x02\x12!\n" +
	"\x1dk_TimerAlertType_WisdomShrine\x10\x03\x12 \n" +
	"\x1ck_TimerAlertType_JungleCamps\x10\x04\x12\x1e\n" +
	"\x1ak_TimerAlertType_LotusPool\x10\x05"

var (
	file_dota_shared_enums_proto_rawDescOnce sync.Once
	file_dota_shared_enums_proto_rawDescData []byte
)

func file_dota_shared_enums_proto_rawDescGZIP() []byte {
	file_dota_shared_enums_proto_rawDescOnce.Do(func() {
		file_dota_shared_enums_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dota_shared_enums_proto_rawDesc), len(file_dota_shared_enums_proto_rawDesc)))
	})
	return file_dota_shared_enums_proto_rawDescData
}

var file_dota_shared_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 54)
var file_dota_shared_enums_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dota_shared_enums_proto_goTypes = []any{
	(DOTA_GameMode)(0),                                 // 0: protocol.DOTA_GameMode
	(DOTA_GameState)(0),                                // 1: protocol.DOTA_GameState
	(DOTA_GC_TEAM)(0),                                  // 2: protocol.DOTA_GC_TEAM
	(EEvent)(0),                                        // 3: protocol.EEvent
	(ERankType)(0),                                     // 4: protocol.ERankType
	(DOTALeaverStatusT)(0),                             // 5: protocol.DOTALeaverStatus_t
	(DOTAConnectionStateT)(0),                          // 6: protocol.DOTAConnectionState_t
	(Fantasy_Roles)(0),                                 // 7: protocol.Fantasy_Roles
	(Fantasy_Scoring)(0),                               // 8: protocol.Fantasy_Scoring
	(Fantasy_Team_Slots)(0),                            // 9: protocol.Fantasy_Team_Slots
	(Fantasy_Selection_Mode)(0),                        // 10: protocol.Fantasy_Selection_Mode
	(Fantasy_Gem_Type)(0),                              // 11: protocol.Fantasy_Gem_Type
	(DOTAChatChannelTypeT)(0),                          // 12: protocol.DOTAChatChannelType_t
	(EChatSpecialPrivileges)(0),                        // 13: protocol.EChatSpecialPrivileges
	(DOTACommTypeT)(0),                                 // 14: protocol.DOTACommType_t
	(DOTACommLevelT)(0),                                // 15: protocol.DOTACommLevel_t
	(DOTABehaviorLevelT)(0),                            // 16: protocol.DOTABehaviorLevel_t
	(EProfileCardSlotType)(0),                          // 17: protocol.EProfileCardSlotType
	(EMatchGroupServerStatus)(0),                       // 18: protocol.EMatchGroupServerStatus
	(DOTA_CM_PICK)(0),                                  // 19: protocol.DOTA_CM_PICK
	(DOTALowPriorityBanType)(0),                        // 20: protocol.DOTALowPriorityBanType
	(DOTALobbyReadyState)(0),                           // 21: protocol.DOTALobbyReadyState
	(DOTAJoinLobbyResult)(0),                           // 22: protocol.DOTAJoinLobbyResult
	(DOTASelectionPriorityRules)(0),                    // 23: protocol.DOTASelectionPriorityRules
	(DOTASelectionPriorityChoice)(0),                   // 24: protocol.DOTASelectionPriorityChoice
	(DOTAMatchVote)(0),                                 // 25: protocol.DOTAMatchVote
	(DOTALobbyVisibility)(0),                           // 26: protocol.DOTALobbyVisibility
	(EDOTAPlayerMMRType)(0),                            // 27: protocol.EDOTAPlayerMMRType
	(EDOTAMMRBoostType)(0),                             // 28: protocol.EDOTAMMRBoostType
	(MatchType)(0),                                     // 29: protocol.MatchType
	(DOTABotDifficulty)(0),                             // 30: protocol.DOTABotDifficulty
	(DOTA_BOT_MODE)(0),                                 // 31: protocol.DOTA_BOT_MODE
	(MatchLanguages)(0),                                // 32: protocol.MatchLanguages
	(ETourneyQueueDeadlineState)(0),                    // 33: protocol.ETourneyQueueDeadlineState
	(EMatchOutcome)(0),                                 // 34: protocol.EMatchOutcome
	(ELaneType)(0),                                     // 35: protocol.ELaneType
	(EBadgeType)(0),                                    // 36: protocol.EBadgeType
	(ELeagueStatus)(0),                                 // 37: protocol.ELeagueStatus
	(ELeagueRegion)(0),                                 // 38: protocol.ELeagueRegion
	(ELeagueTier)(0),                                   // 39: protocol.ELeagueTier
	(ELeagueTierCategory)(0),                           // 40: protocol.ELeagueTierCategory
	(ELeagueDivision)(0),                               // 41: protocol.ELeagueDivision
	(ELeagueBroadcastProvider)(0),                      // 42: protocol.ELeagueBroadcastProvider
	(ELeaguePhase)(0),                                  // 43: protocol.ELeaguePhase
	(ELeagueAuditAction)(0),                            // 44: protocol.ELeagueAuditAction
	(DOTA_COMBATLOG_TYPES)(0),                          // 45: protocol.DOTA_COMBATLOG_TYPES
	(EDPCFavoriteType)(0),                              // 46: protocol.EDPCFavoriteType
	(EDPCPushNotification)(0),                          // 47: protocol.EDPCPushNotification
	(EEventActionScoreMode)(0),                         // 48: protocol.EEventActionScoreMode
	(EPlayerChallengeHistoryType)(0),                   // 49: protocol.EPlayerChallengeHistoryType
	(EOverwatchReportReason)(0),                        // 50: protocol.EOverwatchReportReason
	(ECandyShopUpgrade)(0),                             // 51: protocol.ECandyShopUpgrade
	(EItemSuggestPreference)(0),                        // 52: protocol.EItemSuggestPreference
	(ETimerAlertType)(0),                               // 53: protocol.ETimerAlertType
	(*CDOTAClientHardwareSpecs)(nil),                   // 54: protocol.CDOTAClientHardwareSpecs
	(*CDOTASaveGame)(nil),                              // 55: protocol.CDOTASaveGame
	(*CMsgDOTACombatLogEntry)(nil),                     // 56: protocol.CMsgDOTACombatLogEntry
	(*CMsgPendingEventAward)(nil),                      // 57: protocol.CMsgPendingEventAward
	(*CDOTASaveGame_Player)(nil),                       // 58: protocol.CDOTASaveGame.Player
	(*CDOTASaveGame_SaveInstance)(nil),                 // 59: protocol.CDOTASaveGame.SaveInstance
	(*CDOTASaveGame_SaveInstance_PlayerPositions)(nil), // 60: protocol.CDOTASaveGame.SaveInstance.PlayerPositions
}
var file_dota_shared_enums_proto_depIdxs = []int32{
	58, // 0: protocol.CDOTASaveGame.players:type_name -> protocol.CDOTASaveGame.Player
	59, // 1: protocol.CDOTASaveGame.save_instances:type_name -> protocol.CDOTASaveGame.SaveInstance
	45, // 2: protocol.CMsgDOTACombatLogEntry.type:type_name -> protocol.DOTA_COMBATLOG_TYPES
	3,  // 3: protocol.CMsgPendingEventAward.event_id:type_name -> protocol.EEvent
	48, // 4: protocol.CMsgPendingEventAward.score_mode:type_name -> protocol.EEventActionScoreMode
	2,  // 5: protocol.CDOTASaveGame.Player.team:type_name -> protocol.DOTA_GC_TEAM
	60, // 6: protocol.CDOTASaveGame.SaveInstance.player_positions:type_name -> protocol.CDOTASaveGame.SaveInstance.PlayerPositions
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_dota_shared_enums_proto_init() }
func file_dota_shared_enums_proto_init() {
	if File_dota_shared_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dota_shared_enums_proto_rawDesc), len(file_dota_shared_enums_proto_rawDesc)),
			NumEnums:      54,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_shared_enums_proto_goTypes,
		DependencyIndexes: file_dota_shared_enums_proto_depIdxs,
		EnumInfos:         file_dota_shared_enums_proto_enumTypes,
		MessageInfos:      file_dota_shared_enums_proto_msgTypes,
	}.Build()
	File_dota_shared_enums_proto = out.File
	file_dota_shared_enums_proto_goTypes = nil
	file_dota_shared_enums_proto_depIdxs = nil
}
